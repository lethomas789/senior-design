{"version":3,"sources":["images/ourgroup.png","images/dog1.jpg","images/dog2.jpg","images/dog3.jpg","images/wics2.png","images/cows.jpg","images/band.jpg","images/bikes.jpg","images/generic_club.jpg","images/more_treats.jpg","components/About/About.js","components/Signup/Signup.js","components/Home/Home.js","store/actions.js","components/Login/Login.js","components/ButtonAppBar/ButtonAppBar.js","components/ShopItem/ShopItem.js","components/ShopView/ShopView.js","components/Shop/Shop.js","components/CartItem/CartItem.js","components/Checkout/Checkout.js","components/Cart/Cart.js","components/EmptyItem/EmptyItem.js","components/VendorView/VendorView.js","components/VendorSignup/VendorSignup.js","components/EditClubInfo/EditClubInfo.js","components/AddProduct/AddProduct.js","components/OrderHistoryItem/OrderHistoryItem.js","components/OrderHistory/OrderHistory.js","components/ShopItemDetailed/ShopItemDetailed.js","components/EditItem/EditItem.js","components/EditItemView/EditItemView.js","components/AboutClub/AboutClub.js","App.js","serviceWorker.js","store/loginReducer.js","store/getProductsReducer.js","store/cartReducer.js","store/vendorReducer.js","store/shopItemReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","About","react_default","a","createElement","Grid_default","container","direction","justify","alignContent","alignItems","className","id","src","require","width","height","Component","Signup","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","firstName","lastName","email","password","confirmPassword","open","progressValue","progressVariant","responseMessage","success","sendSignup","bind","assertThisInitialized","handleClose","handleEnter","setState","history","push","_this2","axios","post","params","then","res","data","message","catch","err","alert","e","keyCode","_this3","classes","Paper_default","TextField_default","label","required","onChange","event","target","value","onKeyDown","type","Button_default","variant","color","onClick","CircularProgress_default","defineProperty","size","progress","Dialog_default","onClose","aria-describedby","DialogContent_default","DialogContentText_default","index_es","withStyles","theme","margin","spacing","unit","Home","href","actions","LOGGED_IN","LOGGED_OUT","GET_PRODUCTS","ADMIN_LOGGED_IN","GET_CART","ADD_CART","REMOVE_CART","EMPTY_CART","UPDATE_TOTAL","GET_VENDOR_PRODUCTS","GET_VENDORS","UPDATE_VENDOR_ID","UPDATE_SELECTED_ITEM","Login","responseGoogle","response","w3","U3","ofa","wea","get","console","log","vendors","length","updateLogin","getCart","user","currentVendorID","vid","currentVendors","currentVendorName","vendorName","updateAdminLogin","sendLogin","updateItems","login","_this4","google_login_default","clientId","buttononText","onSuccess","onFailure","cookiePolicy","propsTypes","PropTypes","object","isRequired","connect","items","cart","auth","vendor","dispatch","currentEmail","vendorID","adminsOf","admins","currentVendor","ButtonAppBar","alertMessage","currentAdminOf","openSelect","anchorEl","handleMenuClose","handleAdminClick","currentTarget","handleCloseSelect","handleOpenSelect","logoutUser","loginText","updateLogout","emptyCart","handleSelect","i","updateCurrentVendor","viewCartCheck","loginValue","updateVendors","isAdmin","vendorList","map","result","MenuItem_default","key","AppBar_default","position","Toolbar_default","Typography_default","component","Link","to","FormControl_default","InputLabel_default","htmlFor","Select_default","currentvendor","onOpen","input","name","react","aria-owns","undefined","aria-haspopup","style","Menu_default","Boolean","Badge_default","badgeContent","cartLength","badge","ShoppingCart_default","text","top","right","border","concat","palette","grey","ShopItem","productName","price","productPrice","pid","amtPurchased","imageLink","imageSrc","addItem","updateVendor","showDetailed","viewVendor","image","updateSelectedItem","pathName","item","xs","withRouter","newVendor","itemID","ShopView","updateProducts","products","components_ShopItem_ShopItem","productPicture","stock","productInfo","display","justifyContent","class","justify-xs-space-evenly","getAllItems","Shop","components_ShopView_ShopView","CartItem","handleChange","handleQuantityChange","removeItem","currentCart","priceTotal","updateTotal","Number","totalPrice","_this$props","toFixed","alt","InputLabelProps","shrink","sum","total","Checkout","payment","updateSelectedVendor","paymentOptions","transactions","item_list","String","paymentID","payerID","delete","emptyCartOnPayment","clearTotalOnPayment","onCancel","onError","env","currency","client","sandbox","production","intent","redirect_urls","return_url","cancel_url","note_to_payer","cartTotal","paypalTransactionsArray","paypalTransactions","paypalItems","paypalItem","quantity","amount","react_paypal_express_checkout_default","shipping","extendedIcon","marginRight","Cart","components_CartItem_CartItem","components_Checkout_Checkout","VendorView","bio","handle","match","VendorSignup","createBrowserHistory","code","handleOpen","adminCode","EditClubInfo","lastUpdate","lastUpdateUser","emailSchedule","getClubInfo","sendEdit","updateEmailPreferences","selectedPreference","patch","multiline","rows","ref","select","config","apiKey","private_key","authDomain","databaseURL","storageBucket","firebase","initializeApp","field","AddProduct","handleUploadSuccess","filename","storage","child","handleStockChangeApparel","runningStockTotal","small","medium","large","xsmall","xlarge","handleFileChange","files","filesToStore","imageNames","actualImages","images","imageName","randomText","possible","charAt","Math","floor","random","productID","pickupLocation","isApparel","apparelCSS","itemShowStock","addProduct","uploadFiles","forEach","file","fileUploader","startUpload","s_stock","m_stock","l_stock","xs_stock","xl_stock","FormLabel_default","RadioGroup_default","aria-label","FormControlLabel_default","control","Radio_default","labelPlacement","disabled","react_firebase_file_uploader_lib_default","accept","storageRef","instance","multiple","onUploadError","error","OrderHistoryItem","List_default","root","ListItem_default","ListItemText_default","primary","secondary","orderDate","Divider_default","dividerFullWidth","dividerInset","oid","paid","pickedUp","maxWidth","backgroundColor","background","paper","OrderHistory","orders","order","date","convertDate","Date","hours","getHours","timeOfDay","minutes","getMinutes","getSeconds","actualDate","toDateString","components_OrderHistoryItem_OrderHistoryItem","CarouselImage","handleClick","index","isActive","data-index","ItemImageViewer","currentImage","nextImage","prevImage","changeImage","ReactImageMagnify","smallImage","isFluidWidth","largeImage","enlargedImagePosition","enlargedImageContainerStyle","zIndex","ShopItemDetailed_CarouselImage","ApparelItemInfo","_this$props2","displayApparelStock","clubName","autoComplete","ItemInfo","_this$props3","displayStock","ShopItemDetailed","productStock","vendorNames","_this4$state","totalStock","apiURL","addQuantity","currentQuantity","removeQuantity","selectedSize","_this5","product","ShopItemDetailed_ItemImageViewer","ShopItemDetailed_ItemInfo","ShopItemDetailed_ApparelItemInfo","selectedItem","selectedItemID","EditItem","updateFormAferClicked","clickFunction","EditItemView","populateEditForm","currentItem","info","itemStockCSS","updateItemInfo","pickupTime","lastUser","components_EditItem_EditItem","ClubInfo","AboutClub","_res$data","_this$state","AboutClub_ClubInfo","App","BrowserRouter","components_ButtonAppBar_ButtonAppBar","Route","exact","path","window","location","hostname","initialState","reducer","arguments","action","objectSpread","rootReducer","combineReducers","loginReducer","getProductsReducer","cartReducer","vendorReducer","shopItemReducer","persistConfig","stateReconciler","autoMergeLevel2","pReducer","persistReducer","store","createStore","persistor","persistStore","ReactDOM","render","es","integration_react","loading","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be2f5fcb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ourgroup.3bcf16d2.png\";","module.exports = __webpack_public_path__ + \"static/media/dog1.aa9094e4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog2.303269b8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog3.751aa161.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wics2.2a5423e7.png\";","module.exports = __webpack_public_path__ + \"static/media/cows.4311192d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/band.b4c57d5e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bikes.5287a317.jpg\";","module.exports = __webpack_public_path__ + \"static/media/generic_club.1adfb96a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/more_treats.c74c442d.jpg\";","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './About.css';\r\n\r\nexport default class About extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Grid container direction=\"column\" justify=\"center\"alignContent = \"center\" alignItems=\"center\">\r\n        <div className = \"aboutBox\">\r\n        <div className = \"plsCenter\">\r\n\r\n          <h1 id = \"aboutHeader\"> About Us </h1>\r\n         \r\n          <p>We are a group of Computer Science seniors and this website is our senior design final project.\r\n            From a technical standpoint, our goal was to make a site with secure end to end transactions using\r\n            modern technologies such as React, Node, Firebase, and Google Cloud Services. We utilize https protocols \r\n            and the PayPal API to accomplish this. We aimed to create user and admin accounts with different privileges\r\n            while utilizing Oauth 2.0 to enhance userability. \r\n          </p>\r\n\r\n          <p>The goals of our class is to respond to an open-ended interdisciplinary computer-science related design problem,\r\n            develop a precise problem statement, propose a design that solves the problem, implement a prototype design, and validate\r\n            the design and report on the results. We learn the complete process of a computational problem solving by \r\n            experiencing the complete process of creating an initial design, implementing it, and reporting the results. \r\n            We learn to function in a team-oriented problem-solving environment, and learn the issues that are involved\r\n            with the implementation process of large-scale.\r\n          </p>\r\n          <img src={require('../../images/ourgroup.png')} width=\"100%\" height = \"100%\"/>\r\n          </div>\r\n          </div>\r\n          \r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport './Signup.css';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { DialogActions } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles'; \nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\n\nconst styles = theme => ({\n  progress: {\n    margin: theme.spacing.unit * 2\n  }\n});\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props)\n    //store user input\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      open: false,\n      progressValue: 0,\n      progressVariant: 'determinate',\n      responseMessage: '',\n      success: false\n    }\n    this.sendSignup = this.sendSignup.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleEnter = this.handleEnter.bind(this);\n  }\n\n  //handle dialog closing\n  handleClose(){\n    this.setState({\n        open: false\n    });\n\n    if(this.state.success === true){\n      this.props.history.push('/shop');\n    }\n  }\n\n  //send signup request\n  sendSignup(){\n      //load progress circle to wait for signup check\n      this.setState({\n        progressValue: 50,\n        progressVariant: \"indeterminate\"\n      });\n\n      if(this.state.password != this.state.confirmPassword){\n        this.setState({\n          open: true,\n          progressValue: 0,\n          progressVariant: \"determinate\",\n          responseMessage: \"Passwords do not match!\"\n        });\n      }\n\n      else{\n        const apiURL = \"/api/signup\";\n        //send signup request\n        axios.post(apiURL, {\n          params: {\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            email: this.state.email,\n            password: this.state.password\n          }\n        })\n        .then(res => {\n          //if signup is successful, display success message\n          if(res.data.success === true){\n            this.setState({\n              open: true,\n              progressValue: 0,\n              progressVariant: \"determinate\",\n              responseMessage: \"Signup successful! Please login!\",\n              success: true\n            })\n          }\n\n          //display error message\n          else{\n            this.setState({\n              open: true,\n              progressValue: 0,\n              progressVariant: \"determinate\",\n              responseMessage: res.data.message\n            })\n          }\n        })\n        .catch(err => {\n          alert(err);\n        })\n      }    \n    }\n\n    //handle enter key being pressed\n    handleEnter(e){\n      var key = e.keyCode;\n      if(key === 13){\n          this.sendSignup();\n      }\n    }\n  \n  render() {\n    const { classes } = this.props;\n    return (\n      <div id = \"signupContainer\">\n        <div id = \"signupForms\">\n          <Paper className = \"signupPaperContainer\">\n            <h1> Sign Up </h1>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                label=\"First Name\"\n                required=\"true\"\n                onChange={(event) => this.setState({ firstName: event.target.value })}\n                onKeyDown = {this.handleEnter}\n              />\n            </div>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                label=\"Last Name\"\n                required=\"true\"\n                onChange={(event) => this.setState({ lastName: event.target.value })}\n                onKeyDown = {this.handleEnter}\n              />\n            </div>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                label=\"Email\"\n                required=\"true\"\n                onChange={(event) => this.setState({ email: event.target.value })}\n                onKeyDown = {this.handleEnter}\n              />\n            </div>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                required=\"true\"\n                onChange={(event) => this.setState({ password: event.target.value })}\n                onKeyDown = {this.handleEnter}\n              />\n            </div>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                type=\"password\"\n                label=\"Confirm Password\"\n                required=\"true\"\n                onChange={(event) => this.setState({ confirmPassword: event.target.value })}\n                onKeyDown = {this.handleEnter}\n              />\n            </div>\n            <div className = \"pushDown\">\n              <Button variant = \"contained\" color = \"primary\" onClick = {this.sendSignup}> Sign Up  </Button>\n            </div>\n          </Paper>\n\n          <div className = \"progressContainer\">\n            <div className = \"circle\">\n              <CircularProgress className = \"loadingCircle\" size = {80} variant = {this.state.progressVariant} value = {this.state.progressValue} className = {classes.progress}/>\n            </div>\n          </div>\n          \n          <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\n            <DialogContent>\n              <DialogContentText id = \"alert-dialog-description\">\n                {this.state.responseMessage}\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick = {this.handleClose} color = \"primary\">\n                Ok\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </div>\n      </div>\n    )\n  }\n}\n\nSignup.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Signup);\n","import React, { Component } from 'react';\nimport './Home.css';\nimport Grid from '@material-ui/core/Grid';\nimport { Slide } from 'react-slideshow-image';\nimport AliceCarousel from 'react-alice-carousel';\nimport \"react-alice-carousel/lib/alice-carousel.css\";\nimport image1 from '../../images/dog1.jpg';\nimport image2 from '../../images/dog2.jpg';\nimport image3 from '../../images/dog3.jpg';\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div id = \"homeContainer\">\n        <Grid container direction=\"column\" justify=\"center\"alignContent = \"center\" alignItems=\"center\">\n          <h1> Welcome to ECS193 ECommerce! </h1>\n\n          <img src={require('../../images/wics2.png')} width=\"100%\" />\n          <div className = \"homeText\">\n          <div className = \"center\">\n          <p>This is a ecommerce website for UC Davis's clubs. \n          Here we make merchandise available from all different clubs of Davis.\n          UC Davis clubs typically have an unofficial way to sell their merchandise, usually through Facebook and word of mouth. \n          There is no easy way to display, buy and sell goods. \n          </p>\n          </div>\n          </div>\n          <div className = \"roww\">\n          <div className=\"colls\">\n          <div className = \"moreContainer\">\n          <div className = \"hero-imagee\">\n          <a target=\"_blank\" href=\"https://193ecommerce.com/shop\">\n          <img src={require('../../images/cows.jpg')} width=\"100%\"/>\n          </a>\n          </div>\n          <a target=\"_blank\" href=\"https://193ecommerce.com/shop\">\n          <div className = \"hero-textt\">SHOP</div>\n          </a>\n          </div>\n          </div>\n\n\n          <div className=\"colls\">\n          <div className = \"moreContainer\">\n          <div className = \"hero-imagee\">\n          <img src={require('../../images/band.jpg')} width=\"100%\" />\n          </div>\n          <div className = \"hero-textt\">CLUBS</div>\n          </div>\n          </div>\n          \n          <div className=\"colls\">\n          <div className = \"moreContainer\">\n          <div className = \"hero-imagee\">\n          <a target=\"_blank\" href=\"https://193ecommerce.com/about\">\n          <img src={require('../../images/bikes.jpg')} width=\"100%\"/>\n          </a>\n          </div>\n          <a target=\"_blank\" href=\"https://193ecommerce.com/about\">\n          <div className = \"hero-textt\">ABOUT</div>\n          </a>\n          </div>\n          </div>\n\n          </div>\n         \n\n          {/* <div id = \"carouselContainer\">\n            <AliceCarousel autoPlay = {true} autoPlayInterval = {2000} buttonsDisabled = {true}>\n                <img className = \"slideImage\" src = {image1} />\n                <img className = \"slideImage\" src = {image2} />\n                <img className = \"slideImage\" src = {image3} />\n            </AliceCarousel>\n          </div> */}\n  \n        </Grid>\n        </div>\n    );\n  }\n}\n\n \n","//actions to trigger reducer to handle state changes\nconst actions =  {\n    //auth actions\n    LOGGED_IN: \"LOGGED_IN\",\n    LOGGED_OUT: \"LOGGED_OUT\",\n    GET_PRODUCTS: \"GET_PRODUCTS\",\n    ADMIN_LOGGED_IN: \"ADMIN_LOGGED_IN\",\n    //cart actions\n    GET_CART: \"GET_CART\",\n    ADD_CART:\"ADD_CART\",\n    REMOVE_CART:\"REMOVE_CART\",\n    EMPTY_CART: \"EMPTY_CART\",\n    UPDATE_TOTAL: \"UPDATE_TOTAL\",\n    //vendor actions\n    GET_VENDOR_PRODUCTS: \"GET_VENDOR_PRODUCTS\",\n    GET_VENDORS: \"GET_VENDORS\",\n    UPDATE_VENDOR_ID: \"UPDATE_VENDOR_ID\",\n    //update selected item in shop view for detailed item info\n    UPDATE_SELECTED_ITEM: \"UPDATE_SELECTED_ITEM\",\n}\n\nexport default actions;\n","import React, { Component } from 'react';\r\nimport GoogleLogin from 'react-google-login';\r\nimport {connect} from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport './Login.css';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport { DialogActions } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles'; \r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport PropTypes from 'prop-types';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst styles = theme => ({\r\n    progress: {\r\n      margin: theme.spacing.unit * 2\r\n    }\r\n});\r\n\r\n//Login component, allows user to login with email and password credentials\r\nclass Login extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        //store user input\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            open: false,\r\n            progressValue: 0,\r\n            progressVariant: 'determinate',\r\n            responseMessage: ''        \r\n        }\r\n        this.getCart = this.getCart.bind(this);\r\n        this.sendLogin = this.sendLogin.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleEnter = this.handleEnter.bind(this);\r\n    }\r\n\r\n    //get logged in user's cart info\r\n    getCart(){\r\n   //   const apiURL = \"http://localhost:4000/api/getUserCart\"\r\n      const apiURL = \"/api/getUserCart\";\r\n      axios.get(apiURL, {\r\n        params:{\r\n          user: this.state.email\r\n        }\r\n      }).then(res => {\r\n          //after getting cart info, update redux store container\r\n          this.props.updateItems(res.data.data);\r\n        })\r\n        .catch(err => {\r\n          alert(err);\r\n        })\r\n    }\r\n\r\n    //send login request, display if login was successful\r\n    sendLogin(){\r\n        //load progress circle to wait for login check\r\n        this.setState({\r\n            progressValue: 50,\r\n            progressVariant: \"indeterminate\"\r\n        });\r\n        //const apiURL = \"http://localhost:4000/api/login\";\r\n        const apiURL = \"/api/login\";\r\n\taxios.post(apiURL, {\r\n            params:{\r\n              email: this.state.email,\r\n              password: this.state.password\r\n            }\r\n        })\r\n        //successful login, display message\r\n        .then(res => {\r\n            //login for regular user, non-admin\r\n            if(res.data.success === true && res.data.vendors.length === 0){\r\n                //dispatch update login action to update login state\r\n                let email = this.state.email;\r\n                this.props.updateLogin(email);\r\n\r\n                //after updating login, get cart info\r\n                this.getCart();\r\n\r\n                //display dialog for login successful\r\n                this.setState({\r\n                    open: true,\r\n                    progressValue: 0,\r\n                    progressVariant: \"determinate\",\r\n                    responseMessage: \"Login Succesful!\"\r\n                });\r\n            }\r\n\r\n            else if (res.data.success === true && res.data.vendors.length > 0){\r\n\r\n                //after determining user is an admin, get object list of user's active vendors\r\n                console.log(\"admin login\", res.data);\r\n\r\n                const vendorURL = \"/api/adminUser\";\r\n                axios.get(vendorURL, {\r\n                    params:{\r\n                        user: this.state.email\r\n                    }\r\n                })\r\n                .then(res => {\r\n                    console.log(res.data);\r\n                    let currentVendorID = res.data.vendors[0].vid;\r\n                    let email = this.state.email;\r\n                    let currentVendors = res.data.vendors;\r\n                    let currentVendorName = res.data.vendors[0].vendorName;\r\n\r\n                    //update redux store state\r\n                    this.props.updateAdminLogin(email, currentVendorID, currentVendors, currentVendorName);\r\n\r\n                    //after updating login, get cart info\r\n                    this.getCart();\r\n                \r\n                    //display dialog for login successful\r\n                    this.setState({\r\n                        open: true,\r\n                        progressValue: 0,\r\n                        progressVariant: \"determinate\",\r\n                        responseMessage: \"Login Succesful!\"\r\n                    });\r\n\r\n                })\r\n                .catch(err => {\r\n                    alert(err);\r\n                })\r\n            }     \r\n            //display error message with logging in\r\n            else{\r\n                this.setState({\r\n     \t\t    open: true,\r\n                    progressValue: 0,\r\n                    progressVariant: \"determinate\",\r\n                    responseMessage: res.data.message\r\n                });\r\n            }\r\n        })\r\n        .catch(err => {\r\n            alert(err);\r\n        })\r\n    }\r\n\r\n    //handle dialog closing\r\n    handleClose(){\r\n        this.setState({\r\n            open: false\r\n        });\r\n\r\n        if(this.props.login === true){\r\n            this.props.history.push('/shop');\r\n        }\r\n    }\r\n\r\n    //handle enter key being pressed\r\n    handleEnter(e){\r\n        var key = e.keyCode;\r\n        if(key === 13){\r\n            this.sendLogin();\r\n        }\r\n    }\r\n\r\n    responseGoogle = (response) => {\r\n        //after getting response from google, proceed with login process of redux state\r\n        //send login parameters to backend\r\n        var email = response.w3.U3;\r\n        var firstName = response.w3.ofa;\r\n        var lastName = response.w3.wea;\r\n\r\n        //update email of user logged in by modifying state\r\n        this.setState({\r\n            email: email,\r\n        });\r\n\r\n        //make api call to login with gmail\r\n        axios.get('/api/login/gmail', {\r\n            params:{\r\n                email: email,\r\n                firstName: firstName,\r\n                lastName: lastName\r\n            }\r\n        })\r\n        .then(res => {\r\n            console.log(\"this is the response from the api\" , res);\r\n            //check for login success status\r\n            if(res.data.success === true && res.data.vendors.length === 0){\r\n                //dispatch update login action to update login state\r\n                this.props.updateLogin(email);\r\n\r\n                //after updating login, get cart info\r\n                this.getCart();\r\n\r\n                //display dialog for login successful\r\n                this.setState({\r\n                    open: true,\r\n                    progressValue: 0,\r\n                    progressVariant: \"determinate\",\r\n                    responseMessage: \"Login Succesful!\"\r\n                });\r\n            }\r\n\r\n            else if (res.data.success === true && res.data.vendors.length > 0){\r\n                const vendorURL = \"/api/adminUser\";\r\n                axios.get(vendorURL, {\r\n                    params:{\r\n                        user: this.state.email\r\n                    }\r\n                })\r\n                .then(res => {\r\n                    let currentVendorID = res.data.vendors[0].vid;\r\n                    let email = this.state.email;\r\n                    let currentVendors = res.data.vendors;\r\n                    let currentVendorName = res.data.vendors[0].vendorName;\r\n\r\n                    //update redux store state\r\n                    this.props.updateAdminLogin(email, currentVendorID, currentVendors, currentVendorName);\r\n\r\n                    //after updating login, get cart info\r\n                    this.getCart();\r\n                \r\n                    //display dialog for login successful\r\n                    this.setState({\r\n                        open: true,\r\n                        progressValue: 0,\r\n                        progressVariant: \"determinate\",\r\n                        responseMessage: \"Login Succesful!\"\r\n                    });\r\n\r\n                })\r\n                .catch(err => {\r\n                    alert(err);\r\n                })\r\n            }// end of admin login\r\n\r\n            else{\r\n                this.setState({\r\n                    open: true,\r\n                    progressValue: 0,\r\n                    progressVariant: \"determinate\",\r\n                    responseMessage: res.data.message\r\n                });\r\n            }\r\n        })\r\n        .catch(err => {\r\n            alert(err);\r\n        })\r\n    }\r\n    render(){\r\n        const { classes } = this.props;\r\n        return(\r\n            <div id = \"loginContainer\">\r\n                <div id = \"loginForms\">\r\n                    <Paper className = \"paperContainer\">\r\n                        <h1> Login </h1>\r\n                        <div className = \"textForm\" id=\"row\">\r\n                            <TextField\r\n                            id = \"outline-simple-start-adornment\"\r\n                            label=\"Email\"\r\n                            required=\"true\"\r\n                            onChange={(event) => this.setState({ email: event.target.value })}\r\n                            onKeyDown = {this.handleEnter}\r\n                            />\r\n                        </div>\r\n                        <div className = \"textForm\" id=\"row\">\r\n                            <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            required=\"true\"\r\n                            onChange={(event) => this.setState({ password: event.target.value })}\r\n                            onKeyDown = {this.handleEnter}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className = \"pushDown\">\r\n                        <Button variant = \"contained\" color = \"primary\" onClick = {this.sendLogin}> Login  </Button>\r\n                        </div>\r\n\t\t\t<div className = \"pushDown2\">\r\n\t\t\t\t<GoogleLogin clientId=\"409029968816-1bf8e3qtt6jb2ivj9udb1qata3q0bdrc.apps.googleusercontent.com\"\r\n\t\t\t\tbuttononText=\"Login\"\r\n\t\t\t\tonSuccess={this.responseGoogle}\r\n\t\t\t\tonFailure={this.responseGoogle}\r\n\t\t\t\tcookiePolicy={'single_host_origin'}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n                    </Paper>\r\n                 \r\n                    <div className = \"progressContainer\">\r\n                        <div className = \"circle\">\r\n                            <CircularProgress className = \"loadingCircle\" size = {80} variant = {this.state.progressVariant} value = {this.state.progressValue} className = {classes.progress}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\r\n                        <DialogContent>\r\n                            <DialogContentText id = \"alert-dialog-description\">\r\n                                {this.state.responseMessage}\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick = {this.handleClose} color = \"primary\">\r\n                                Ok\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n    return{\r\n      items: state.cart.items,\r\n      login: state.auth.login,\r\n      user: state.auth.user,\r\n      vendors: state.vendor.vendors\r\n    }\r\n  }\r\n\r\n//redux, dispatch action to reducer to update state\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        //update logged in values\r\n        updateLogin: (currentEmail) => dispatch({\r\n            type: actions.LOGGED_IN,\r\n            user: currentEmail\r\n        }),\r\n\r\n        //get user's cart from state after logging in\r\n        updateItems: (response) => dispatch({\r\n          type: actions.GET_CART,\r\n          cart: response\r\n        }),\r\n\r\n        //update admin login\r\n        updateAdminLogin: (currentEmail, vendorID, adminsOf, vendor) => dispatch({\r\n            type: actions.ADMIN_LOGGED_IN,\r\n            user: currentEmail,\r\n            vid: vendorID,\r\n            admins: adminsOf,\r\n            currentVendor: vendor\r\n        })\r\n    }\r\n}\r\n\r\nLogin.propsTypes = {\r\n    classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withStyles(styles)(Login));\r\n","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./ButtonAppBar.css\";\nimport { connect } from \"react-redux\";\nimport actions from \"../../store/actions\";\nimport { Route, Link, Redirect } from \"react-router-dom\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport CartIcon from \"@material-ui/icons/ShoppingCart\";\nimport Badge from \"@material-ui/core/Badge\";\nimport axios from \"axios\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport { DialogActions, OutlinedInput } from \"@material-ui/core\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\n//variables to store routes to redirect to with Link component\nconst homeRoute = \"/\";\nconst aboutRoute = \"/about\";\nconst signupRoute = \"/signup\";\nconst loginRoute = \"/login\";\nconst shopRoute = \"/shop\";\nconst cartRoute = \"/cart\";\nconst editClubRoute = \"/editClubInfo\";\nconst addProductRoute = \"/addProduct\";\nconst editItemRoute = \"/editItem\";\n\n//style for cart to display number of items\nconst styles = theme => ({\n  badge: {\n    top: \"50%\",\n    right: -3,\n    // The border color match the background color.\n    border: `2px solid ${\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[200]\n        : theme.palette.grey[900]\n    }`\n  }\n});\n\n//navbar component\nclass ButtonAppBar extends Component {\n  state = {\n    open: false,\n    alertMessage: \"\",\n    currentAdminOf: this.props.vendorID,\n    adminsOf: this.props.adminsOf,\n    openSelect: false,\n    currentVendor: \"\",\n    anchorEl: null\n  };\n\n  //when navbar loads, get list of all vendors in database\n  //trying to get club names\n  componentDidMount() {\n    const apiURL = \"/api/getVendorInfo\";\n    axios\n      .get(apiURL)\n      .then(res => {\n        //update vendors of redux store\n        this.props.updateVendors(res.data.vendors);\n      })\n      .catch(err => {\n        alert(err);\n      });\n  }\n\n  // handle menu\n  handleMenuClose = () => {\n    this.setState({ anchorEl: null });\n  };\n\n  handleAdminClick = event => {\n    this.setState({ anchorEl: event.currentTarget });\n  };\n\n  //handle dialog closing\n  handleClose = () => {\n    this.setState({\n      open: false\n    });\n  };\n\n  //handle closing select\n  handleCloseSelect = () => {\n    this.setState({\n      openSelect: false\n    });\n  };\n\n  //handle open select\n  handleOpenSelect = () => {\n    this.setState({\n      openSelect: true\n    });\n  };\n\n  //logout user when clicking \"Logout\" on navbar\n  //empty shopping cart\n  logoutUser = () => {\n    if (this.props.loginText === \"Logout\") {\n      this.props.updateLogout();\n      this.props.emptyCart();\n      //display dialog\n      this.setState({\n        open: true,\n        alertMessage: \"Logout successful!\"\n      });\n    }\n  };\n\n  //update value selected from dropdown menu\n  //if user is an admin of multiple clubs, will change what is being updated\n  handleSelect = event => {\n    var currentVendorName = event.target.value;\n    var currentVendorID = \"\";\n\n    //search through list of vendors, check if name selected equals vendor\n    //update vendor name selected and vid\n    for (let i = 0; i < this.props.vendors.length; i++) {\n      if (this.props.vendors[i].vendorName === currentVendorName) {\n        currentVendorID = this.props.vendors[i].vid;\n        this.props.updateCurrentVendor(currentVendorID, currentVendorName);\n        break;\n      }\n    }\n  };\n\n  //check if user is logged in to view cart\n  viewCartCheck = () => {\n    //prevent user from using cart until logged in\n    if (this.props.loginValue === false) {\n      this.setState({\n        open: true,\n        alertMessage: \"Please login to view cart\"\n      });\n    }\n\n    //if logged in, get cart and calculate cart's total\n    else {\n      const apiURL = \"/api/getUserCart\";\n      //if user is logged in, get cart info\n      if (this.props.login === true) {\n        axios\n          .get(apiURL, {\n            params: {\n              user: this.props.user\n            }\n          })\n          .then(res => {\n            //after getting cart from server, update user's items in redux state\n            alert(\"updating store with new items\");\n            this.props.updateItems(res.data.data);\n          })\n          .catch(err => {\n            alert(err);\n          });\n      }\n    }\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { anchorEl } = this.state;\n\n    if (this.props.isAdmin) {\n      var vendorList = this.props.adminsOf.map(result => {\n        return (\n          <MenuItem key={result.vid} value={result.vendorName}>\n            {\" \"}\n            {result.vendorName}{\" \"}\n          </MenuItem>\n        );\n      });\n    }\n\n    return (\n      <nav className=\"root\">\n        <AppBar position=\"static\">\n          <Toolbar>\n            {/* MENU BUTTON */}\n            {/* currently doesnt do anything so hide it */}\n            {/* <IconButton\n              className=\"menuButton\"\n              color=\"inherit\"\n              aria-label=\"Menu\"\n            >\n              <MenuIcon />\n            </IconButton> */}\n\n            {/* HOME LABEL */}\n            <Typography\n              component={Link}\n              to={homeRoute}\n              variant=\"h6\"\n              color=\"inherit\"\n              className=\"grow\"\n            >\n              ECS193 ECommerce\n            </Typography>\n\n            <Typography variant=\"h6\" color=\"inherit\">\n              Select Club:\n            </Typography>\n\n            {/* NAV BUTTONS */}\n            <div id=\"navLink\">\n              {/* SELECT CLUB */}\n              <FormControl variant=\"filled\" className=\"club-select\">\n                <InputLabel htmlFor=\"club-select\">\n                  {this.props.currentVendor}\n                </InputLabel>\n\n                <Select\n                  value={this.props.currentvendor}\n                  open={this.state.openSelect}\n                  onClose={this.handleCloseSelect}\n                  onOpen={this.handleOpenSelect}\n                  onChange={this.handleSelect}\n                  input={<OutlinedInput name={this.props.currentVendor} />}\n                >\n                  {vendorList}\n                </Select>\n              </FormControl>\n\n              {/* <Button color=\"inherit\">\n                <InputLabel className=\"navLabel\" color=\"white\">\n                  {\" \"}\n                  {this.props.currentVendor}{\" \"}\n                </InputLabel>\n                <Select\n                  color=\"inherit\"\n                  value={this.props.vendorID}\n                  open={this.state.openSelect}\n                  onClose={this.handleCloseSelect}\n                  onOpen={this.handleOpenSelect}\n                  onChange={this.handleSelect}\n                >\n                  {vendorList}\n                </Select>\n              </Button> */}\n\n              {/* ADMIN BUTTONS */}\n              {this.props.isAdmin ? (\n                <Fragment>\n                  <Button\n                    aria-owns={anchorEl ? \"admin-menu\" : undefined}\n                    aria-haspopup=\"true\"\n                    onClick={this.handleAdminClick}\n                    style={{ color: \"white\" }}\n                  >\n                    Admin Menu\n                  </Button>\n                  <Menu\n                    id=\"admin-menu\"\n                    anchorEl={anchorEl}\n                    open={Boolean(anchorEl)}\n                    onClose={this.handleMenuClose}\n                  >\n                    <MenuItem\n                      component={Link}\n                      to={editClubRoute}\n                      color=\"inherit\"\n                      onClick={this.handleMenuClose}\n                    >\n                      {\" \"}\n                      Edit Club Info{\" \"}\n                    </MenuItem>\n                    <MenuItem\n                      component={Link}\n                      to={addProductRoute}\n                      color=\"inherit\"\n                      onClick={this.handleMenuClose}\n                    >\n                      {\" \"}\n                      Add Items{\" \"}\n                    </MenuItem>\n                    <MenuItem\n                      component={Link}\n                      to={editItemRoute}\n                      color=\"inherit\"\n                      onClick={this.handleMenuClose}\n                    >\n                      {\" \"}\n                      Edit Items{\" \"}\n                    </MenuItem>\n                  </Menu>\n                </Fragment>\n              ) : (\n                // else dont display admin stuff\n                <Fragment />\n              )}\n\n              {/* BUTTONS FOR ALL USERS */}\n              <Button component={Link} to={aboutRoute} color=\"inherit\">\n                {\" \"}\n                About{\" \"}\n              </Button>\n\n              {/* display signup if not logged in */}\n              {!this.props.loginValue ? (\n                <Button component={Link} to={signupRoute} color=\"inherit\">\n                  {\" \"}\n                  Sign Up{\" \"}\n                </Button>\n              ) : (\n                <Fragment />\n              )}\n\n              {/* ACCOUNT BUTTON? */}\n\n              {/*LOGIN/LOGOUT BUTTON*/}\n              <Button\n                component={Link}\n                to={loginRoute}\n                color=\"inherit\"\n                onClick={this.logoutUser}\n              >\n                {\" \"}\n                {this.props.loginText}{\" \"}\n              </Button>\n\n              <Button component={Link} to={shopRoute} color=\"inherit\">\n                {\" \"}\n                Shop{\" \"}\n              </Button>\n\n              {/* CART BUTTON */}\n              {this.props.loginValue ? (\n                // if logged in, display amt items in cart\n                <Button\n                  component={Link}\n                  to={cartRoute}\n                  color=\"inherit\"\n                  onClick={this.viewCartCheck}\n                >\n                  <Badge\n                    badgeContent={this.props.cartLength}\n                    color=\"primary\"\n                    classes={{ badge: classes.badge }}\n                  >\n                    <CartIcon />\n                  </Badge>\n                </Button>\n              ) : (\n                // else not logged in, display generic cart icon\n                <Button color=\"inherit\" onClick={this.props.viewCartCheck}>\n                  <CartIcon />\n                </Button>\n              )}\n            </div>\n\n            {/* POP UP DIALOG */}\n            {/* TODO: remove with an alert library for UX */}\n            <Dialog\n              open={this.state.open}\n              onClose={this.handleClose}\n              aria-describedby=\"alert-dialog-description\"\n            >\n              <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                  {this.state.alertMessage}\n                </DialogContentText>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color=\"primary\">\n                  Ok\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </Toolbar>\n        </AppBar>\n      </nav>\n    );\n  }\n}\n\n//redux\n\n//dispatch action to reducer\nconst mapDispatchToProps = dispatch => {\n  return {\n    //update store that user logged out\n    updateLogout: () =>\n      dispatch({\n        type: actions.LOGGED_OUT\n      }),\n\n    //update store cart is empty\n    emptyCart: () =>\n      dispatch({\n        type: actions.EMPTY_CART\n      }),\n\n    //update vendors\n    updateVendors: response =>\n      dispatch({\n        type: actions.GET_VENDORS,\n        vendors: response\n      }),\n\n    //update vendor id\n    updateCurrentVendor: (vendorID, vendorName) =>\n      dispatch({\n        type: actions.UPDATE_VENDOR_ID,\n        vid: vendorID,\n        vendor: vendorName\n      })\n  };\n};\n\n//obtain state from store as props for component\n//get login value, login text, and cart length\nconst mapStateToProps = state => {\n  return {\n    loginValue: state.auth.login,\n    loginText: state.auth.text,\n    user: state.auth.user,\n    isAdmin: state.auth.isAdmin,\n    cartLength: state.cart.items.length,\n    items: state.cart.items,\n    adminsOf: state.auth.adminsOf,\n    vendorID: state.auth.vendorID,\n    vendors: state.vendor.vendors,\n    currentVendor: state.auth.currentVendor\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(ButtonAppBar));\n","import React, { Component } from 'react';\nimport './ShopItem.css';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport actions from '../../store/actions';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { withStyles } from '@material-ui/core/styles';\nimport {Link, withRouter} from 'react-router-dom';\n\n//component to display product info\nclass ShopItem extends Component {\n  constructor(props){\n    super(props);\n\n    //initial state of products\n    this.state = {\n      name: this.props.productName,\n      price: this.props.productPrice,\n      pid: this.props.pid,\n      amtPurchased: 1,\n      vendorID: this.props.vendorID,\n      open: false,\n      alertMessage: '',\n      imageLink: this.props.imageSrc\n    }\n\n    //bind functions to component\n    this.addItem = this.addItem.bind(this);\n    this.updateVendor = this.updateVendor.bind(this);\n    this.showDetailed = this.showDetailed.bind(this);\n  }\n\n  //update vendor in redux store\n  updateVendor(){\n    var viewVendor = this.state.vendorID;\n    console.log(\"trying to update vendor \", viewVendor);\n    this.props.updateVendor(viewVendor);\n  }\n\n  //function to update cart of user\n  //add item to user's cart\n  addItem(){\n    //check if user is logged in\n    //only allow user to add to cart if logged in\n    if(this.props.login === false){\n      this.setState({\n        open: true,\n        alertMessage: \"Please login to add to cart!\"\n      })\n    }\n\n    else{\n      //update user's cart on server\n      var apiURL = \"/api/getUserCart/addItems\";\n      axios.post(apiURL, {\n        params:{\n          user: this.props.user,\n          pid: this.state.pid,\n          amtPurchased: this.state.amtPurchased,\n          vendorID: this.state.vendorID,\n          image: this.state.imageLink\n        }\n      })\n      .then(res => {\n        if(res.data.success === true){\n          //after adding to item, get updated cart\n          const getCartURL = \"/api/getUserCart\";\n          axios.get(getCartURL, {\n            params:{\n              user: this.props.user\n            }\n          })\n          .then(res => {\n            //after getting cart info, update redux store container\n            this.props.updateItems(res.data.data);\n            this.setState({\n              open: true,\n              alertMessage: \"Item added to cart!\"\n            });\n          })\n          .catch(err => {\n            alert(err);\n          })\n        }\n      })\n      .catch(err => {\n        alert(err);\n      })\n    }\n  } //end of add item\n\n  //show detailed info of item, reroute\n  showDetailed(){\n    //update which item was selected for detailed view in Redux\n    this.props.updateSelectedItem(this.state.pid);\n    this.props.updateVendor(this.state.vendorID);\n\n    //add vendorID and pid to url as parameters\n    //allows user to access shop info via URL instead of only being allowed click\n\n    //construct URL with pathname, /itemDetails/vid/pid\n    var pathName = '/itemDetails';\n    pathName = pathName + '/' + this.state.vendorID;\n    pathName = pathName + '/' + this.state.pid;\n\n    //redirect to url with vendor id and pid\n    this.props.history.push(pathName);\n  }\n\n  render() {\n    return (\n      <Grid item xs = {4} spacing = {2}>\n        <div className = \"centerPage\">\n          <div onClick = {this.showDetailed} className = \"box\">\n            <div className = \"center\">\n              <img src={this.props.imageSrc}  width=\"100%\" height=\"100%\"/>\n            </div>\n          </div>\n\n         <div className = \"resizing\">\n            <h5>\n              {this.props.productName}\n            </h5>\n            <p>\n              ${this.props.productPrice}\n              <Button size=\"small\" color=\"primary\" onClick = {this.addItem}>\n                Add To Cart\n              </Button>\n\n              <Button size=\"small\" color=\"primary\" onClick = {this.updateVendor}>\n                <Link to = {`/vendorProducts/${this.state.vendorID}`}> More From Vendor </Link>\n              </Button>\n            </p>\n          </div>\n        </div>\n      </Grid>\n    )\n  }\n}\n\n//obtain state from store as props for component\n//get login value and user email\nconst mapStateToProps = state => {\n  return{\n      user: state.auth.user,\n      login: state.auth.login\n  }\n}\n\n//dispatch action to reducer\n//update redux state of current cart\nconst mapDispatchToProps = dispatch => {\n  return{\n      //get user's cart from state after logging in\n      updateItems: (response) => dispatch({\n        type: actions.GET_CART,\n        cart: response\n      }),\n\n      updateVendor: (newVendor) => dispatch({\n        type: actions.GET_VENDOR_PRODUCTS,\n        vendor: newVendor\n      }),\n\n      updateSelectedItem: (pid) => dispatch({\n        type: actions.UPDATE_SELECTED_ITEM,\n        itemID: pid\n      })\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ShopItem));\n","import React, { Component } from 'react';\r\nimport './ShopView.css';\r\nimport ShopItem from '../ShopItem/ShopItem';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport { banner } from '../../images/generic_club.jpg';\r\n\r\nclass ShopView extends Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  //get products from server after mounting to screen\r\n  componentDidMount(){\r\n    //const apiURL = \"http://localhost:4000/api/getAllProducts\";\r\n    const apiURL = \"/api/getAllProducts\";\r\n    //get all products from server\r\n    //update state of view to obtain items\r\n    axios.get(apiURL)\r\n      .then(res => {\r\n        //update product state in redux store\r\n        console.log(res.data);\r\n        this.props.updateProducts(res.data.data);\r\n\r\n        //after getting products, get list of vendors\r\n        const vendorsURL = \"/api/getVendorInfo\";\r\n        axios.get(vendorsURL)\r\n          .then(res => {\r\n            console.log(res.data);\r\n            this.props.updateVendors(res.data.vendors);\r\n          })\r\n          .catch(err => {\r\n            alert(\"error getting vendors\");\r\n          })\r\n      })\r\n      .catch(err => {\r\n        alert(\"Server error retrieving items\");\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const items = this.props.products.map(result => {\r\n      return <ShopItem key = {result.pid} imageSrc = {result.productPicture[0]} vendorID = {result.vid} pid = {result.pid} productName = {result.productName} productPrice = {result.productPrice} stock = {result.stock} productInfo = {result.productInfo} />\r\n    });\r\n\r\n    return (\r\n      <div className = \"grow\">\r\n         <Grid container direction = \"column\" display= \"flex\"  justifyContent= \"center\" alignItems=\"center\" height= \"100vh\">\r\n        {/* <Grid container direction=\"column\" justify=\"center\"alignContent = \"center\" alignItems=\"center\"> */}\r\n          <h1> Shop </h1>    \r\n          <div className = \"container\">     \r\n          <div className = \"hero-image\">\r\n          <img src={require('../../images/more_treats.jpg')} width=\"100%\" height=\"100%\"/>\r\n          </div>\r\n          <div class=\"hero-text\">\r\n          UCD CLUBS\r\n          </div>\r\n          </div> \r\n        </Grid>\r\n        \r\n        <Grid container direction = \"row\" display= \"flex\"  justifyContent= \"center\" alignItems=\"center\" height= \"100vh\" justify-xs-space-evenly>\r\n\r\n        {/* <Grid container spacing={24} direction=\"row\" justify=\"flex-start\" alignItems=\"center\" justify-xs-space-evenly> */}\r\n          {items}\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//redux\r\n\r\n//dispatch action to reducer\r\n//update items from server to become state of store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n      updateProducts: (products) => dispatch({\r\n          type: actions.GET_PRODUCTS,\r\n          items: products\r\n      }),\r\n\r\n      updateVendors: (currentVendors) => dispatch({\r\n        type: actions.GET_VENDORS,\r\n        vendors: currentVendors\r\n      })\r\n  }\r\n}\r\n\r\n//get items from products state of store\r\n//obtain state from store as props for component\r\nconst mapStateToProps = state => {\r\n  return{\r\n      products: state.getAllItems.products\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopView);\r\n","import React, { Component } from 'react';\r\nimport './Shop.css';\r\nimport ShopView from '../ShopView/ShopView';\r\n\r\nexport default class Shop extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <ShopView/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./CartItem.css\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../../store/actions\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n//component to display cart objects\r\nclass CartItem extends Component {\r\n  // store product id PID to reference for item removal\r\n  state = {\r\n    pid: this.props.pid,\r\n    vid: this.props.vendorID,\r\n    size: this.props.size,\r\n    amtPurchased: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ amtPurchased: this.props.amtPurchased });\r\n  }\r\n\r\n  handleChange = name => event => {\r\n    this.setState({ [name]: event.target.value });\r\n  };\r\n\r\n  // TODO figure out how we want to handle 0 change here\r\n  handleQuantityChange = event => {\r\n    if (event.target.value < 0) {\r\n      this.setState({ amtPurchased: 1 });\r\n    } else {\r\n      this.setState({ amtPurchased: event.target.value });\r\n    }\r\n  };\r\n\r\n  //remove item from user's cart\r\n  removeItem = () => {\r\n    const apiURL = \"/api/getUserCart/deleteItems\";\r\n    axios\r\n      .post(apiURL, {\r\n        params: {\r\n          user: this.props.user,\r\n          pid: this.state.pid\r\n        }\r\n      })\r\n      .then(res => {\r\n        const getCart = \"/api/getUserCart\";\r\n        //after successful deletion, get updated user's cart\r\n        axios\r\n          .get(getCart, {\r\n            params: {\r\n              user: this.props.user\r\n            }\r\n          })\r\n          .then(res => {\r\n            //after removing item from cart, update cart on server\r\n            this.props.updateItems(res.data.data);\r\n            //get total from items\r\n            var currentCart = res.data.data;\r\n            var priceTotal = 0;\r\n\r\n            //if cart is empty, total price is $0\r\n            if (currentCart.length === 0) {\r\n              console.log(\"cart is empty\");\r\n              this.props.updateTotal(priceTotal);\r\n            }\r\n\r\n            //if there are items, calculate total price\r\n            else {\r\n              console.log(\"cart is not empty\");\r\n              for (let i = 0; i < currentCart.length; i++) {\r\n                priceTotal += Number(currentCart[i].totalPrice);\r\n              }\r\n              console.log(priceTotal);\r\n              this.props.updateTotal(priceTotal);\r\n            }\r\n          })\r\n          .catch(err => {\r\n            alert(err);\r\n          });\r\n      })\r\n      .catch(err => {\r\n        alert(err);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { imageSrc, productName, size } = this.props;\r\n\r\n    const { amtPurchased } = this.state;\r\n\r\n    const productPrice = this.props.productPrice.toFixed(2);\r\n    const totalPrice = this.props.totalPrice.toFixed(2);\r\n\r\n    return (\r\n      <div className=\"cart-row-container\">\r\n        <div className=\"cart-item-container\">\r\n          <img src={imageSrc} className=\"cart-img\" alt={`${productName}`} />\r\n          <div className=\"cart-item-info\">\r\n            <div>\r\n              <b>{`${productName}`}</b>\r\n            </div>\r\n            {size ? (\r\n              <div>\r\n                <b>Size</b>: {`${size}`}\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <Button size=\"small\" color=\"primary\" onClick={this.removeItem} id=\"btn-remove\">\r\n              Remove Item\r\n            </Button>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div>${productPrice}</div>\r\n\r\n        <TextField\r\n          className=\"cart-qty\"\r\n          value={amtPurchased}\r\n          onChange={this.handleQuantityChange}\r\n          type=\"number\"\r\n          InputLabelProps={{ shrink: true}}\r\n        />\r\n\r\n        <div>${totalPrice}</div>\r\n      </div>\r\n    );\r\n\r\n    /* \r\n    if(this.props.size === undefined){\r\n      return (\r\n        <Grid item xs>\r\n          <Card className= \"card\">\r\n            <CardActionArea>\r\n              <img src={this.props.imageSrc} width=\"100%\" height=\"100%\"/>\r\n              <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  {this.props.productName}\r\n                </Typography>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  Amount: {this.props.amtPurchased}\r\n                </Typography>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  Price: ${this.props.productPrice}\r\n                </Typography>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  Total Price: ${this.props.totalPrice}\r\n                </Typography>\r\n              </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n              <Button size=\"small\" color=\"primary\" onClick = {this.removeItem}>\r\n                Remove Item\r\n              </Button>\r\n              <Button size=\"small\" color=\"primary\">\r\n                Add Item\r\n              </Button>\r\n            </CardActions>\r\n          </Card>\r\n        </Grid>\r\n      )\r\n    }\r\n\r\n    //return cart item description for apparel\r\n    else{\r\n\r\n      return (\r\n        <Grid item xs>\r\n          <Card className= \"card\">\r\n            <CardActionArea>\r\n              <img src={this.props.imageSrc} width=\"100%\" height=\"100%\"/>\r\n              <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  {this.props.productName}\r\n                </Typography>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  Amount: {this.props.amtPurchased}\r\n                </Typography>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  Size: {this.props.size}\r\n                </Typography>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  Price: ${this.props.productPrice}\r\n                </Typography>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  Total Price: ${this.props.totalPrice}\r\n                </Typography>\r\n              </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n              <Button size=\"small\" color=\"primary\" onClick = {this.removeItem}>\r\n                Remove Item\r\n              </Button>\r\n              <Button size=\"small\" color=\"primary\">\r\n                Add Item\r\n              </Button>\r\n            </CardActions>\r\n          </Card>\r\n        </Grid>\r\n      )\r\n    }\r\n    */\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return {\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user\r\n  };\r\n};\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart from store\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    updateItems: response =>\r\n      dispatch({\r\n        type: actions.GET_CART,\r\n        cart: response\r\n      }),\r\n\r\n    //update store of cart total\r\n    updateTotal: sum =>\r\n      dispatch({\r\n        type: actions.UPDATE_TOTAL,\r\n        total: sum\r\n      })\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CartItem);\r\n","import React, { Component, Fragment } from \"react\";\nimport \"./Checkout.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport { connect } from \"react-redux\";\nimport actions from \"../../store/actions\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport PaypalExpressBtn from \"react-paypal-express-checkout\";\nimport axios from \"axios\";\n\n//styles for checkout button\nconst styles = theme => ({\n  margin: {\n    margin: theme.spacing.unit\n  },\n  extendedIcon: {\n    marginRight: theme.spacing.unit\n  }\n});\n\n//calculate total price of user's cart and allow user to checkout\n//get user's cart info from state\n//state consists of information needed for paypal checkout\nclass Checkout extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      total: this.props.total,\n      env: \"sandbox\",\n      currency: \"USD\",\n      client: {\n        sandbox:\n          \"AQRbJx9R02PGD4hvGRQlGL48Ri1mvf4c7qd6LzuNHqmbtothVDp-vI6K7qatzi3dgYcg4tkp5lpXHBye\",\n        production: \"YOUR-PRODUCTION-APP-ID\"\n      },\n      paymentOptions: {\n        intent: \"sale\",\n        // \"payer\": {\n        //   \"payer_info\": {  // payer_info not saved to paypal transaction, will need to send email to vendor with transaction ID for cross reference\n        //     \"email\": \"tst@gmail.com\",\n        //     \"first_name\": \"a\",\n        //     \"last_name\": \"d\"\n        //   },\n        //   \"payment_method\": \"paypal\"\n        // },\n        redirect_urls: {\n          return_url: \"www.google.com\",\n          cancel_url: \"www.reddit.com\"\n        },\n        transactions: [],\n        note_to_payer: \"Pickup the sale at this location:\" // does a popup, not incuded in transaction on paypal\n      },\n      cartTotal: this.props.total\n    };\n  }\n\n  //convert items in cart to array of paypal objects for payment option\n  componentDidMount() {\n    //array to store as payment option\n    var paypalTransactionsArray = [];\n    var paypalTransactions = {};\n    paypalTransactions.item_list = {};\n    paypalTransactions.amount = {};\n    paypalTransactions.description = \"Sale\";\n\n    var paypalItems = [];\n\n    //go through each item in redux store\n    for (let i = 0; i < this.props.cart.length; i++) {\n      let paypalItem = {};\n\n      //construct new paypal object based on each item in Redux store container\n      paypalItem.name = this.props.cart[i].productName;\n      paypalItem.price = String(this.props.cart[i].productPrice.toFixed(2));\n      paypalItem.currency = this.state.currency;\n      paypalItem.quantity = String(this.props.cart[i].amtPurchased);\n\n      //store\n      paypalItems.push(paypalItem);\n    }\n\n    paypalTransactions.item_list.items = paypalItems;\n    paypalTransactions.amount.currency = this.state.currency;\n    paypalTransactions.amount.total = String(this.props.total);\n\n    //update payment options to be list of paypal items\n    paypalTransactionsArray.push(paypalTransactions);\n    this.state.paymentOptions.transactions = paypalTransactionsArray;\n  }\n\n  //update payment option on update\n  componentDidUpdate() {\n    this.state.paymentOptions.transactions[0].amount.total = this.props.total;\n    this.state.paymentOptions.transactions[0].amount.total = String(\n      this.props.total\n    );\n  }\n\n  onSuccess = payment => {\n    console.log(\"Payment successful!\", payment);\n    this.props.updateSelectedVendor(this.props.cart[0].vid);\n\n    const apiURL = \"/api/orders\";\n\n    //make post request to orders\n    axios\n      .post(apiURL, {\n        params: {\n          items: this.state.paymentOptions.transactions[0].item_list.items,\n          totalPrice: String(this.props.total),\n          vid: this.props.cart[0].vid,\n          user: this.props.user,\n          paymentID: payment.paymentID,\n          payerID: payment.payerID\n        }\n      })\n      .then(res => {\n        //on successful payment\n        if (res.data.success === true) {\n          alert(res.data.message);\n\n          //clear cart on server\n          const clearcartURL = \"/api/getUserCart/clearCart\";\n          axios\n            .delete(clearcartURL, {\n              params: {\n                user: this.props.user\n              }\n            })\n            .then(res => {\n              if (res.data.success === true) {\n                //when payment is successfully processed, clear cart and set total to 0\n                this.props.emptyCartOnPayment();\n                this.props.clearTotalOnPayment(0);\n              } else {\n                alert(\"error with server\");\n              }\n            })\n            .catch(err => {\n              alert(err);\n            });\n        } else {\n          alert(\"Error with sending order\");\n        }\n      })\n      .catch(err => {\n        alert(err);\n      });\n\n    // You can bind the \"payment\" object's value to your state or props or whatever here, please see below for sample returned data\n    // alert('Transaction completed by ' + payment.email);\n\n    // TODO, payment contains info, send it to backend\n    // payment.payerID\n    // payment.paymentID\n\n    // payment.returnUrl can be used to route back to somewhere\n    // or route ourselves\n  };\n\n  onCancel = data => {\n    // The user pressed \"cancel\" or closed the PayPal popup\n    console.log(\"Payment cancelled!\", data);\n    // You can bind the \"data\" object's value to your state or props or whatever here, please see below for sample returned data\n  };\n\n  onError = err => {\n    // The main Paypal script could not be loaded or something blocked the script from loading\n    console.log(\"Error!\", err);\n    alert(err);\n    // Because the Paypal's main script is loaded asynchronously from \"https://www.paypalobjects.com/api/checkout.js\"\n    // => sometimes it may take about 0.5 second for everything to get set, or for the button to appear\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <Fragment>\n        <PaypalExpressBtn\n          env={this.state.env}\n          client={this.state.client}\n          currency={this.state.currency}\n          total={Number(this.props.total)}\n          onError={this.onError}\n          onSuccess={this.onSuccess}\n          onCancel={this.onCancel}\n          shipping={1}\n          paymentOptions={this.state.paymentOptions}\n        />\n      </Fragment>\n    );\n  }\n}\n\n//obtain state from store as props for component\n//get cart items, login value, and user email\nconst mapStateToProps = state => {\n  return {\n    items: state.cart.items,\n    login: state.auth.login,\n    user: state.auth.user,\n    total: state.cart.total,\n    cart: state.cart.items\n  };\n};\n\n//redux\n//dispatch action to reducer, get user's cart from store\nconst mapDispatchToProps = dispatch => {\n  return{\n    updateItems: (response) => dispatch({\n      type: actions.GET_CART,\n      cart: response\n    }),\n\n    updateSelectedVendor: (currentVendor) => dispatch({\n      type: actions.GET_VENDOR_PRODUCTS,\n      vendor: currentVendor\n    }),\n\n    emptyCartOnPayment: () => dispatch({\n      type: actions.EMPTY_CART\n    }),\n\n    clearTotalOnPayment: (value) => dispatch({\n      type: actions.UPDATE_TOTAL,\n      total: value\n    })\n  }\n}\n\n/*Checkout.PropTypes = {\n  classes: PropTypes.object.isRequired\n};*/\n\n// Checkout.PropTypes = {\n//   classes: PropTypes.object.isRequired\n// };\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(Checkout));\n","import React, { Component } from \"react\";\r\nimport \"./Cart.css\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../../store/actions\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CartItem from \"../CartItem/CartItem\";\r\nimport Checkout from \"../Checkout/Checkout\";\r\nimport { Link } from \"react-router-dom\";\r\nimport EmptyItem from \"../EmptyItem/EmptyItem\";\r\n\r\n//component to display user's cart\r\nclass Cart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      total: 0\r\n    };\r\n  }\r\n\r\n  //get cart from server for user\r\n  componentDidMount() {\r\n    //get total from items\r\n    var currentCart = this.props.items;\r\n    var priceTotal = 0;\r\n\r\n    //if cart is empty, total price is $0\r\n    if (currentCart.length === 0) {\r\n      this.props.updateTotal(priceTotal);\r\n    }\r\n\r\n    //if there are items, calculate total price\r\n    else {\r\n      //go through each item in cart and sum up price\r\n      for (let i = 0; i < currentCart.length; i++) {\r\n        priceTotal += Number(currentCart[i].totalPrice);\r\n      }\r\n      priceTotal = priceTotal.toFixed(2);\r\n      this.setState({\r\n        total: priceTotal\r\n      });\r\n      this.props.updateTotal(priceTotal);\r\n    }\r\n  }\r\n\r\n  //render cart items to cart view\r\n  render() {\r\n    const cart = this.props.items.map(result => {\r\n      console.log(\"result in cart:\", result);\r\n      if (result.size === undefined) {\r\n        return (\r\n          <CartItem\r\n            key={result.productName}\r\n            imageSrc={result.image[0]}\r\n            pid={result.pid}\r\n            vendorID={result.vid}\r\n            productName={result.productName}\r\n            amtPurchased={result.amtPurchased}\r\n            productPrice={result.productPrice}\r\n            totalPrice={result.totalPrice}\r\n          />\r\n        );\r\n      } else {\r\n        return (\r\n          <CartItem\r\n            key={result.productName}\r\n            size={result.size}\r\n            imageSrc={result.image[0]}\r\n            pid={result.pid}\r\n            vendorID={result.vid}\r\n            productName={result.productName}\r\n            amtPurchased={result.amtPurchased}\r\n            productPrice={result.productPrice}\r\n            totalPrice={result.totalPrice}\r\n          />\r\n        );\r\n      }\r\n    });\r\n\r\n    return (\r\n      <div className=\"cart-table-container\">\r\n        {/* TABLE HEADERS */}\r\n        <span className=\"table-header table-row\">\r\n          <span>\r\n            <strong>My Cart ({this.props.items.length})</strong>\r\n          </span>\r\n          <span>\r\n            <strong>Price</strong>\r\n          </span>\r\n          <span>\r\n            <strong>Qty</strong>\r\n          </span>\r\n          <span>\r\n            <strong>Total</strong>\r\n          </span>\r\n        </span>\r\n\r\n        {/* TABLE DATA */}\r\n        {/* TODO have conditional to render empty page */}\r\n        {cart}\r\n\r\n        <div id=\"total-text\">Total</div>\r\n        <div id=\"total-price\">${this.state.total}</div>\r\n        <div id=\"btn-paypal\">\r\n          <Checkout total={this.state.total} />\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    /*\r\n    //render items in cart\r\n    if (this.props.items.length > 0){\r\n      //map each entry in item array to render a component\r\n      const cart = this.props.items.map(result => {\r\n        if (result.size === undefined){\r\n          return <CartItem key = {result.productName} imageSrc = {result.imageLink} pid = {result.pid} vendorID = {result.vid} productName = {result.productName} amtPurchased = {result.amtPurchased} productPrice = {result.productPrice}  totalPrice = {result.totalPrice} />\r\n        }\r\n        else{\r\n          return <CartItem key = {result.productName} size  = {result.size} imageSrc = {result.imageLink} pid = {result.pid} vendorID = {result.vid} productName = {result.productName} amtPurchased = {result.amtPurchased} productPrice = {result.productPrice}  totalPrice = {result.totalPrice} />\r\n        }\r\n      });\r\n\r\n      return(\r\n        <div>\r\n          <Grid container direction=\"column\">\r\n            <h1> <Link to = \"/orderHistory\"> Order History </Link> </h1>\r\n            <h1> Current Cart: </h1>\r\n          </Grid>\r\n  \r\n          <Grid container direction=\"column\" justify-xs-space-evenly>\r\n            <Checkout total = {this.state.total}/>\r\n            {cart}\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    //empty cart case\r\n    else{\r\n      return(\r\n        <div>\r\n          <Grid container direction=\"column\">\r\n            <h1> <Link to = \"/orderHistory\"> Order History </Link> </h1>\r\n            <h1> Current Cart: </h1>\r\n          </Grid>\r\n  \r\n          <Grid container direction=\"column\" justify-xs-space-evenly>\r\n            <Checkout total = {this.state.total}/>\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n    */\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    updateItems: response =>\r\n      dispatch({\r\n        type: actions.GET_CART,\r\n        cart: response\r\n      }),\r\n\r\n    //update store of cart total\r\n    updateTotal: sum =>\r\n      dispatch({\r\n        type: actions.UPDATE_TOTAL,\r\n        total: sum\r\n      })\r\n  };\r\n};\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return {\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Cart);\r\n","import React, { Component } from 'react'\r\n\r\nexport default class EmptyItem extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './VendorView.css';\r\nimport axios from 'axios';\r\nimport {Link} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport ShopItem from '../ShopItem/ShopItem';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass VendorView extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      products: [],\r\n      vendorName: '',\r\n      bio: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    //get array of vendor names and information associated with each vendor\r\n    const vendorAPI = \"/api/getVendorInfo\";\r\n\r\n    //get vendor info as an array and store into redux\r\n    axios.get(vendorAPI)\r\n      .then(res => {\r\n        if(res.data.success === true){\r\n          //update array of vendors containing vid, name, bio etc.\r\n          this.props.updateVendors(res.data.vendors);\r\n\r\n          //extract param values from URL\r\n          //match object contains parameter values\r\n          const handle = this.props.match.params;\r\n          const apiURL = \"/api/getVendorProducts\";\r\n          axios.get(apiURL, {\r\n            params:{\r\n              vid: handle.vid\r\n            }\r\n          })\r\n          .then(res => {\r\n            console.log(\"getting vendor products \", res.data);\r\n\r\n            var currentVendorName = '';\r\n            var currentVendorBio = '';\r\n\r\n            //search for matching vendor id in array of vendors of redux store\r\n            //compare parameter of vid in url to matching vid in array of vendors\r\n            for(let i = 0; i < this.props.vendors.length; i++){\r\n              if(this.props.vendors[i].vid === handle.vid){\r\n                //extract info from matching vid\r\n                //update component state, list of products from vendor, name of vendor, and bio\r\n                this.setState({\r\n                  products: res.data.data,\r\n                  vendorName: this.props.vendors[i].vendorName,\r\n                  bio: this.props.vendors[i].bio\r\n                });\r\n                break;\r\n              }\r\n            }\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        alert(err);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const items = this.state.products.map(result => {\r\n      return <ShopItem key = {result.pid} imageSrc = {result.productPicture[0]} vendorID = {result.vid} pid = {result.pid} productName = {result.productName} productPrice = {result.productPrice} stock = {result.stock} productInfo = {result.productInfo} />\r\n    });\r\n\r\n    return (\r\n      <div className = \"grow\">\r\n        <Grid container direction=\"column\" justify=\"center\"alignContent = \"center\" alignItems=\"center\">\r\n          <h1> {this.state.vendorName} </h1>\r\n          <h3> <Link to={`/aboutClub/${this.props.vendor}`}> About Us </Link> </h3>\r\n          <h3> Bio: {this.state.bio} </h3>\r\n        </Grid>\r\n\r\n        <Grid container spacing={24} direction=\"row\" justify=\"center\" alignItems=\"center\" justify-xs-space-evenly>\r\n          {items}\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//redux\r\n\r\n//dispatch action to reducer\r\n//update items from server to become state of store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n      //update products to view based on selected vendor\r\n      updateProducts: (products) => dispatch({\r\n          type: actions.GET_PRODUCTS,\r\n          items: products\r\n      }),\r\n\r\n      //update vendor names and information\r\n      updateVendors: (currentVendors) => dispatch({\r\n        type: actions.GET_VENDORS,\r\n        vendors: currentVendors\r\n      })\r\n  }\r\n}\r\n\r\n//get items from products state of store\r\n//obtain state from store as props for component\r\nconst mapStateToProps = state => {\r\n  return{\r\n    vendor: state.vendor.vendor,\r\n    vendors: state.vendor.vendors\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VendorView);\r\n","import React, { Component } from 'react';\r\nimport './VendorSignup.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { createHashHistory, createBrowserHistory } from 'history';\r\nconst history = createBrowserHistory();\r\n\r\n//vendor confirmation\r\n\r\n//insert email for verification\r\n//dropdown menu to select clubs\r\n//insert access code\r\n\r\nclass VendorSignup extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      code: '',\r\n      vendor: 'Select Club Name',\r\n      open: false,\r\n      value: '',\r\n      vendorID: '',\r\n      vendors: []\r\n    };\r\n    this.sendSignup = this.sendSignup.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.handleOpen = this.handleOpen.bind(this);\r\n    this.handleSelect = this.handleSelect.bind(this);\r\n  }\r\n\r\n  //store list of active vendors from database\r\n  componentDidMount(){\r\n    const apiURL = \"/api/getVendorInfo\";\r\n    axios.get(apiURL)\r\n      .then(res => {\r\n        this.setState({\r\n          vendors: res.data.vendors\r\n        })\r\n      })\r\n  }\r\n\r\n  //close select\r\n  handleClose(){\r\n    this.setState({\r\n      open: false\r\n    })\r\n  }\r\n\r\n  //open select\r\n  handleOpen(){\r\n    this.setState({\r\n      open: true\r\n    })\r\n  }\r\n\r\n  //update value selected\r\n  handleSelect(event){\r\n    var currentVendorID = event.target.value;\r\n    var currentVendorName = '';\r\n    //search through list of available vendors\r\n    //save state of selected vendor\r\n    //save vendor id and name of selected vendor\r\n    for(let i = 0; i < this.state.vendors.length; i++){\r\n      if(this.state.vendors[i].vid === currentVendorID){\r\n        currentVendorName = this.state.vendors[i].vendorName;\r\n        this.setState({\r\n          vendorID: currentVendorID,\r\n          vendor: currentVendorName     \r\n        });\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  //send signup to verify admin process\r\n  sendSignup(){\r\n    //add current user to be admin of selected vendor\r\n    const apiURL = \"/api/adminUser/addAdminUser\";\r\n\r\n    axios.post(apiURL, {\r\n      params:{\r\n        user: this.state.email,\r\n        vid: this.state.vendorID,\r\n        adminCode: this.state.code\r\n      }\r\n    })\r\n    .then(res => {\r\n      //if successful, set isAdmin = true\r\n      //login in user\r\n      //redirect back to homepage with admin version of navbar\r\n      if(res.data.success === true){\r\n        //get list of vendors user is an admin of\r\n        //get the vids of vendors in which user is an admin of\r\n        const adminsURL = \"/api/adminUser\";\r\n        axios.get(adminsURL, {\r\n          params:{\r\n            user: this.state.email\r\n          }\r\n        })\r\n        .then(res => {\r\n          if(res.data.success === true){\r\n            //update the user's email, update current admin of which vendor, and update which vendors user is an admin of\r\n            var currentVendor = '';\r\n\r\n            //find matching vendor id, extract vendor name from list of vendors\r\n            for(let i = 0; i < this.props.vendors.length; i++){\r\n              if(this.props.vendors[i].vid === this.state.vendorID){\r\n                currentVendor = this.props.vendors[i].vendorName;\r\n                break;\r\n              }\r\n            }\r\n\r\n            //update redux store\r\n            //update user's email, vendorID currently an admin of, list of vids of an admin of, and name of current\r\n            this.props.updateAdminLogin(this.state.email, this.state.vendorID, res.data.vendors,currentVendor);\r\n            alert(\"Admin verification succesful!\");\r\n\r\n            //redirect user back home\r\n            this.props.history.push('/');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          alert(err);\r\n        })\r\n      }\r\n\r\n      //print why verification didn't work\r\n      else{\r\n        alert(res.data.message);\r\n      }\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const vendorList = this.state.vendors.map(result => {\r\n      return <MenuItem key = {result.vid} value = {result.vid} name = {result.vendorName}> {result.vendorName} </MenuItem>\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <Grid container direction = \"column\" justify = \"center\" alignItems = \"center\">\r\n          <Paper id = \"signupPaperContainer\">\r\n            <h1> Admin Verification </h1>\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Email\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ email: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Access Code\"\r\n                type=\"password\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ code: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            <h5> Select Vendor </h5>\r\n            <div className = \"textForm\" id = \"row\">\r\n              <FormControl id = \"clubForm\">\r\n                <InputLabel> {this.state.vendor} </InputLabel>\r\n                <Select value = {this.state.value} open = {this.state.open} onClose = {this.handleClose} onOpen = {this.handleOpen} onChange = {this.handleSelect}>\r\n                  {vendorList}\r\n                </Select>\r\n              </FormControl>\r\n            </div>\r\n            <Button type = \"submit\" variant = \"contained\" color = \"primary\" onClick = {this.sendSignup}> Verify  </Button>\r\n          </Paper>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n    vendors: state.vendor.vendors\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart from store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    updateAdminLogin: (currentEmail, vendorID, adminsOf, vendor) => dispatch({\r\n      type: actions.ADMIN_LOGGED_IN,\r\n      user: currentEmail,\r\n      vid: vendorID,\r\n      admins: adminsOf,\r\n      currentVendor: vendor\r\n    })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VendorSignup);\r\n","import React, { Component } from \"react\";\r\nimport \"./EditClubInfo.css\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../../store/actions\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nclass EditClubInfo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bio: \"\",\r\n      lastUpdate: \"\",\r\n      lastUpdateUser: \"\",\r\n      vendorName: \"\",\r\n      emailSchedule: \"\"\r\n    };\r\n\r\n    this.getClubInfo = this.getClubInfo.bind(this);\r\n    this.sendEdit = this.sendEdit.bind(this);\r\n    this.handleSelect = this.handleSelect.bind(this);\r\n    this.updateEmailPreferences = this.updateEmailPreferences.bind(this);\r\n  }\r\n\r\n  //get club info\r\n  getClubInfo() {\r\n    const apiURL = \"/api/adminVendor\";\r\n    axios\r\n      .get(apiURL, {\r\n        params: {\r\n          user: this.props.user,\r\n          vid: this.props.vendorID\r\n        }\r\n      })\r\n      .then(res => {\r\n        if (res.data.success === true) {\r\n          this.setState({\r\n            bio: res.data.bio,\r\n            lastUpdate: res.data.lastUpdate,\r\n            lastUpdateUser: res.data.lastUpdateUser,\r\n            vendorName: res.data.vendorName\r\n          });\r\n        } else {\r\n          alert(\"Error getting club info\");\r\n        }\r\n      })\r\n      .catch(err => {\r\n        alert(err);\r\n      });\r\n  }\r\n\r\n  //handle select when user chooses email preference\r\n  handleSelect() {\r\n    //update email preference\r\n    this.setState({\r\n      emailSchedule: this.selectedPreference.value\r\n    });\r\n  }\r\n\r\n  //when component loads, get club info from server\r\n  componentDidMount() {\r\n    this.getClubInfo();\r\n  }\r\n\r\n  //update email preferences\r\n  updateEmailPreferences() {\r\n    const apiURL = \"/api/adminVendor/emailSchedule\";\r\n    axios\r\n      .patch(apiURL, {\r\n        params: {\r\n          user: this.props.user,\r\n          emailSchedule: this.state.emailSchedule,\r\n          vid: this.props.vendorID\r\n        }\r\n      })\r\n      .then(res => {\r\n        if (res.data.success === true) {\r\n          alert(res.data.message);\r\n        } else {\r\n          alert(res.data.message);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        alert(err);\r\n      });\r\n  }\r\n\r\n  //update club info on server\r\n  sendEdit() {\r\n    const apiURL = \"/api/adminVendor/editVendorInfo\";\r\n    axios\r\n      .patch(apiURL, {\r\n        params: {\r\n          user: this.props.user,\r\n          vid: this.props.vendorID,\r\n          vendorName: this.state.vendorName,\r\n          bio: this.state.bio\r\n        }\r\n      })\r\n      .then(res => {\r\n        //if edit was successful, get new info for edited club\r\n        if (res.data.success === true) {\r\n          alert(res.data.message);\r\n          this.getClubInfo();\r\n        }\r\n      })\r\n      .catch(err => {\r\n        alert(err);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"edit-club-info-container\">\r\n        <h1> Edit Club Info </h1>\r\n        <h6> Last Updated: {this.state.lastUpdate} </h6>\r\n        <h6> Last Edited By: {this.state.lastUpdateUser} </h6>\r\n\r\n        <form id=\"editClubForm\">\r\n          <TextField\r\n            className=\"inputWidth\"\r\n            label=\"Club Name\"\r\n            value={this.state.vendorName}\r\n            onChange={event =>\r\n              this.setState({ vendorName: event.target.value })\r\n            }\r\n          />\r\n\r\n          <TextField\r\n            className=\"inputWidth\"\r\n            label=\"Biography\"\r\n            value={this.state.bio}\r\n            id=\"standard-full-width\"\r\n            onChange={event => this.setState({ bio: event.target.value })}\r\n            multiline={true}\r\n            rows={4}\r\n          />\r\n        </form>\r\n        \r\n        <div className=\"btn-update-info\">\r\n          <Button variant=\"contained\" color=\"primary\" onClick={this.sendEdit}>\r\n            Update Club Info\r\n          </Button>\r\n        </div>\r\n\r\n        <div id=\"updateEmailsContainer\">\r\n          <select\r\n            id=\"emailSelect\"\r\n            onChange={this.handleSelect}\r\n            ref={select => {\r\n              this.selectedPreference = select;\r\n            }}\r\n          >\r\n            <option value=\"select\"> Select </option>\r\n            <option value=\"0 */1 * * *\"> Every 1 Hour </option>\r\n            <option value=\"0 */2 * * *\"> Every 2 Hours </option>\r\n            <option value=\"0 */4 * * *\"> Every 4 Hours </option>\r\n            <option value=\"0 */8 * * *\"> Every 8 Hours</option>\r\n            <option value=\"0 */24 * * *\"> Every 24 Hours </option>\r\n          </select>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={this.updateEmailPreferences}\r\n          >\r\n            {\" \"}\r\n            Update Email Preferences{\" \"}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return {\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n    vendorID: state.auth.vendorID\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(EditClubInfo);\r\n","import React, { Component } from 'react';\r\nimport './AddProduct.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport firebase from 'firebase';\r\nimport FileUploader from 'react-firebase-file-uploader';\r\nimport firebaseConfig from '../../config/ecs193-ecommerce-firebase-adminsdk-7iy3n-f581d24562.json';\r\n\r\n//config file for firebase\r\nconst config = {\r\n  apiKey: firebaseConfig.private_key,\r\n  authDomain: \"ecs193-ecommerce.firebaseapp.com\",\r\n  databaseURL: \"https://ecs193-ecommerce.firebaseio.com\",\r\n  storageBucket: \"ecs193-ecommerce.appspot.com\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\n//image location for firestore upload\r\nconst imageLocation = \"images/vendors\";\r\n\r\nconst style = {\r\n  field: { width: \"500px\" }\r\n};\r\n\r\nclass AddProduct extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      productName: '',\r\n      productInfo: '',\r\n      productPrice: '',\r\n      pickupLocation: '',\r\n      stock: '',\r\n      productID: '',\r\n      isApparel: false,\r\n      small: 0,\r\n      medium: 0,\r\n      large: 0,\r\n      xsmall: 0,\r\n      xlarge: 0,\r\n      apparelCSS: \"hideApparelSizes\",\r\n      itemShowStock: \"showItemStock\",\r\n      images: [],\r\n      imageNames:[]\r\n    }\r\n    this.addProduct = this.addProduct.bind(this);\r\n    this.handleUploadSuccess = this.handleUploadSuccess.bind(this);\r\n    this.uploadFiles = this.uploadFiles.bind(this);\r\n  }\r\n\r\n  //upload success\r\n  handleUploadSuccess = filename => {\r\n    firebase\r\n      .storage()\r\n      .ref(\"images\")\r\n      .child(filename)\r\n      // .getDownloadURL()\r\n      // .then(url => this.setState({ avatarURL: url }));\r\n  };\r\n\r\n  //handle stock change, update total stock values when user changes input\r\n  handleStockChangeApparel = name => stock => {\r\n\r\n    //if the user is setting the stock to a negative value, set default to 0\r\n    if(Number(stock.target.value) < 0){\r\n      this.setState({\r\n        [name]: 0\r\n      })\r\n    }\r\n\r\n    //if the user presses delete or backspace, handle empty field\r\n    else if(stock.target.value === ''){\r\n      this.setState({\r\n        [name]: ''\r\n      })\r\n    }\r\n\r\n    //update stock of current item and update running total of stock items\r\n    else{\r\n      //update stock value for current size\r\n      //after updating current stock, update running total of stock for all sizes\r\n      //callback function called after setState\r\n      this.setState({\r\n        [name]: Number(stock.target.value)\r\n      }, () => {\r\n        //add running total of stocks when value is changed, callback function after state was updated\r\n        var runningStockTotal = 0;\r\n        runningStockTotal = Number(this.state.small) + Number(this.state.medium) + Number(this.state.large) + Number(this.state.xsmall) + Number(this.state.xlarge);\r\n        //update stock with running total\r\n        this.setState({\r\n          stock: String(runningStockTotal)\r\n        })\r\n      })\r\n    }\r\n  };\r\n\r\n  //detects when an image is uploaded from user\r\n  //change number of files to upload\r\n  handleFileChange = (event) => {\r\n    //extract file from upload component\r\n    const { target: { files } } = event;\r\n\r\n    //store image names\r\n    // const filesToStore = [];\r\n    const filesToStore = this.state.imageNames;\r\n\r\n    //store actual image files\r\n    // const actualImages = [];\r\n    const actualImages = this.state.images;\r\n    console.log(files);\r\n    console.log(files[0]);\r\n\r\n    //store image name as an object\r\n    let imageName = {};\r\n    imageName.name = files[0].name;\r\n\r\n    //push values to arrays\r\n    filesToStore.push(imageName);\r\n    actualImages.push(files[0]);\r\n    \r\n    //generate vid to match product with image\r\n    let randomText = '';\r\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    for (let i = 0; i < 20; i++) {\r\n      randomText += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n\r\n    //set state of component\r\n    this.setState({\r\n      images: actualImages,\r\n      productID: randomText,\r\n      imageNames: filesToStore\r\n    });\r\n  };\r\n\r\n  //upload images to database\r\n  uploadFiles(){\r\n    //for each file in images array, upload to database\r\n    const files = this.state.images;\r\n    files.forEach(file => {\r\n      this.fileUploader.startUpload(file);\r\n    });\r\n  }\r\n  \r\n  //add product that is an apparel type\r\n  //add product to vendor's collection in database\r\n  addProduct(){ \r\n    //handle if item being added is an apparel\r\n    if(this.state.isApparel === true){\r\n      const apiURL = \"/api/adminProducts/addNewProduct\";\r\n      axios.post(apiURL, {\r\n        params:{\r\n          vid: this.props.vid,\r\n          user: this.props.user,\r\n          productInfo: this.state.productInfo,\r\n          productName: this.state.productName,\r\n          productPrice: this.state.productPrice,\r\n          pid: this.state.productID,\r\n          stock: this.state.stock,\r\n          isApparel: this.state.isApparel,\r\n          s_stock: this.state.small,\r\n          m_stock: this.state.medium,\r\n          l_stock: this.state.large,\r\n          xs_stock: this.state.xsmall,\r\n          xl_stock: this.state.xlarge,\r\n          productPicture: this.state.imageNames\r\n        }\r\n      })\r\n      .then(res => {\r\n        //upload image only on success\r\n        if(res.data.success === true){\r\n          this.uploadFiles();\r\n          alert(res.data.message);\r\n        }\r\n        \r\n      })\r\n      .catch(err => {\r\n        alert(err);\r\n      })\r\n    }\r\n\r\n    //if the item is not an apparel\r\n    else{\r\n      const apiURL = \"/api/adminProducts/addNewProduct\";\r\n      axios.post(apiURL, {\r\n        params:{\r\n          vid: this.props.vid,\r\n          user: this.props.user,\r\n          productInfo: this.state.productInfo,\r\n          productName: this.state.productName,\r\n          productPrice: this.state.productPrice,\r\n          stock: this.state.stock,\r\n          pid: this.state.productID,\r\n          isApparel: this.state.isApparel,\r\n          productPicture: this.state.imageNames\r\n        }\r\n      })\r\n      .then(res => {\r\n        //upload image only on success\r\n        if(res.data.success === true){\r\n          this.uploadFiles();\r\n          alert(res.data.message);\r\n        }  \r\n      })\r\n      .catch(err => {\r\n        alert(err);\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Grid container direction = \"column\" justify = \"center\" alignItems = \"center\">\r\n            <h1> Add Product </h1>\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Product Name\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ productName: event.target.value })}\r\n                style={style.field}\r\n              />\r\n            </div>\r\n\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Product Info\"\r\n                required=\"true\"\r\n                multiline={true}\r\n                rows={2}\r\n                onChange={(event) => this.setState({ productInfo: event.target.value })}\r\n                style={style.field}\r\n              />\r\n            </div>\r\n\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Pickup Location (Enter location and date/time)\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ pickupLocation: event.target.value })}\r\n                style={style.field}\r\n              />\r\n            </div>\r\n\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Product Price\"\r\n                required=\"true\"\r\n                type=\"number\"\r\n                onChange={(event) => this.setState({ productPrice: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            {/* toggle visibility of product stock\r\n            if user is adding regular item, allow user to enter input\r\n            calculate running total if item is an apparel */}\r\n            <div className = {this.state.itemShowStock} id=\"row\">\r\n              <TextField\r\n                label=\"Product Stock\"\r\n                required=\"true\"\r\n                type=\"number\"\r\n                value = {this.state.stock}\r\n                onChange={(event) => this.setState({ stock: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            <FormControl component=\"fieldset\">\r\n              <FormLabel component=\"legend\">Select Product Type </FormLabel>\r\n              <RadioGroup\r\n                aria-label=\"gender\"\r\n                name=\"gender2\"\r\n                value={this.state.value}\r\n                onChange={this.handleChange}\r\n              >\r\n                {/* if user selects item, hide apparel selections, toggle css */}\r\n                <FormControlLabel\r\n                  control={<Radio color=\"primary\" />}\r\n                  value = \"item\"\r\n                  label=\"Item\"\r\n                  labelPlacement=\"start\"\r\n                  onChange={() => this.setState({ isApparel: false, apparelCSS: 'hideApparelSizes', itemShowStock: 'showItemStock'})}\r\n                />\r\n\r\n                {/* if user selects apparel, display apparel options, hide product stock for item, display apparel version instead */}\r\n                <FormControlLabel\r\n                    control={<Radio color=\"primary\" />}\r\n                    value = \"apparel\"\r\n                    label=\"Apparel\"\r\n                    labelPlacement=\"start\"\r\n                    onChange={() => this.setState({ isApparel: true, apparelCSS: 'showApparelSizes', itemShowStock: 'hideItemStock'})}\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n\r\n            {/* add quantity for apparel sizes, toggel visibility if selected */}\r\n            <div className = {this.state.apparelCSS}>\r\n              <div className = \"textForm\" id=\"row\">\r\n                <TextField\r\n                  label=\"Product Stock\"\r\n                  type=\"number\"\r\n                  value = {this.state.stock}\r\n                  disabled\r\n                />\r\n              </div>\r\n              \r\n              <div className = \"textForm\" id=\"row\">\r\n                <TextField\r\n                  label=\"Small Stock\"\r\n                  required=\"false\"\r\n                  type=\"number\"\r\n                  value={this.state.small}\r\n                  onChange={\r\n                    this.handleStockChangeApparel(\"small\")\r\n                  }\r\n                />\r\n              </div>\r\n\r\n              <div className = \"textForm\" id=\"row\">\r\n                <TextField\r\n                  label=\"Medium Stock\"\r\n                  required=\"false\"\r\n                  type=\"number\"\r\n                  value={this.state.medium}\r\n                  onChange={\r\n                    this.handleStockChangeApparel(\"medium\")\r\n                  }\r\n                />\r\n              </div>\r\n\r\n              <div className = \"textForm\" id=\"row\">\r\n                <TextField\r\n                  label=\"Large Stock\"\r\n                  required=\"false\"\r\n                  type=\"number\"\r\n                  value={this.state.large}\r\n                  onChange={\r\n                    this.handleStockChangeApparel(\"large\")\r\n                  }\r\n                />\r\n              </div>\r\n\r\n              <div className = \"textForm\" id=\"row\">\r\n                <TextField\r\n                  label=\"X-Small Stock\"\r\n                  required=\"false\"\r\n                  type=\"number\"\r\n                  value={this.state.xsmall}\r\n                  onChange={                    \r\n                    this.handleStockChangeApparel(\"xsmall\")\r\n                  }\r\n                />\r\n              </div>\r\n\r\n              <div className = \"textForm\" id=\"row\">\r\n                <TextField\r\n                  label=\"X-Large Stock\"\r\n                  required=\"false\"\r\n                  value={this.state.xlarge}\r\n                  type=\"number\"\r\n                  onChange={\r\n                    this.handleStockChangeApparel(\"xlarge\")\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className = \"textForm\" id = \"row\">\r\n              <h5 className = \"uploadImageText\"> Upload Images </h5>\r\n              <h6 className = \"uploadImageText\"> *(First image uploaded on the left is default image displayed on shop. Remaining images used in detailed view) </h6>\r\n\r\n              <FileUploader accept=\"image/*\" onChange = {this.handleFileChange}\r\n                storageRef =  {firebase.storage().ref('/images' + '/' + this.props.vid + '/' + this.state.productID)} ref = {instance => { this.fileUploader = instance; } }\r\n                multiple\r\n                onUploadError={(error) => {console.log(error)}} \r\n              />\r\n\r\n              <FileUploader accept=\"image/*\" onChange = {this.handleFileChange}\r\n                storageRef =  {firebase.storage().ref('/images' + '/' + this.props.vid + '/' + this.state.productID)} ref = {instance => { this.fileUploader = instance; } }\r\n                multiple\r\n                onUploadError={(error) => {console.log(error)}} \r\n              />\r\n\r\n              <FileUploader accept=\"image/*\" onChange = {this.handleFileChange}\r\n                storageRef =  {firebase.storage().ref('/images' + '/' + this.props.vid + '/' + this.state.productID)} ref = {instance => { this.fileUploader = instance; } }\r\n                multiple\r\n                onUploadError={(error) => {console.log(error)}} \r\n              />\r\n\r\n              <FileUploader accept=\"image/*\" onChange = {this.handleFileChange}\r\n                storageRef =  {firebase.storage().ref('/images' + '/' + this.props.vid + '/' + this.state.productID)} ref = {instance => { this.fileUploader = instance; } }\r\n                multiple\r\n                onUploadError={(error) => {console.log(error)}} \r\n              />\r\n            </div>\r\n\r\n            <Button variant = \"contained\" color = \"primary\" onClick = {this.addProduct}> Add Product  </Button>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//redux\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n    vid: state.auth.vendorID\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(AddProduct);\r\n","import React, { Component } from 'react';\r\nimport './OrderHistoryItem.css';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\n//import Card from '@material-ui/core/Card';\r\n//import CardActionArea from '@material-ui/core/CardActionArea';\r\n//import CardActions from '@material-ui/core/CardActions';\r\n//import CardContent from '@material-ui/core/CardContent';\r\n//import CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  dividerFullWidth: {\r\n    margin: '5px 0 0 ${theme.spacing.unit * 2}px',\r\n  },\r\n  dividerInset: {\r\n    margin: '5px 0 0 ${theme.spacing.unit * 9}px',\r\n  },\r\n});\r\n\r\n\r\nclass OrderHistoryItem extends Component {\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <List className={classes.root}>\r\n  \r\n        <ListItem>\r\n          <ListItemText primary=\"Date\" secondary= {this.props.orderDate} />\r\n        </ListItem>\r\n  \r\n        <Divider component=\"li\" />\r\n  \r\n        <li>\r\n          <Typography className={classes.dividerFullWidth} color=\"textSecondary\">\r\n          </Typography>\r\n        </li>\r\n  \r\n        <ListItem>\r\n          <ListItemText primary= \"Name\" secondary= {this.props.firstName + ' ' + this.props.lastName} />\r\n        </ListItem>\r\n  \r\n        <Divider component=\"li\" />\r\n  \r\n        <li>\r\n          <Typography className={classes.dividerInset} color=\"textSecondary\">\r\n          </Typography>\r\n        </li>\r\n  \r\n        <ListItem>\r\n          <ListItemText primary=\"Order ID\" secondary= {this.props.oid} />\r\n        </ListItem>\r\n  \r\n        <Divider component=\"li\" />\r\n  \r\n        <li>\r\n          <Typography className={classes.dividerInset} color=\"textSecondary\">\r\n          </Typography>\r\n        </li>\r\n  \r\n        <ListItem>\r\n          <ListItemText primary=\"Paid\" secondary= {this.props.paid} />\r\n        </ListItem>\r\n  \r\n        <Divider component=\"li\" />\r\n  \r\n        <li>\r\n          <Typography className={classes.dividerInset} color=\"textSecondary\">\r\n          </Typography>\r\n        </li>\r\n  \r\n        <ListItem>\r\n          <ListItemText primary=\"Picked Up\" secondary= {this.props.pickedUp} />\r\n        </ListItem>\r\n  \r\n        <Divider component=\"li\" />\r\n  \r\n        <li>\r\n          <Typography className={classes.dividerInset} color=\"textSecondary\">\r\n          </Typography>\r\n        </li>\r\n  \r\n        <ListItem>\r\n          <ListItemText primary=\"Total Price\" secondary= {this.props.totalPrice} />\r\n        </ListItem>\r\n  \r\n  \r\n  \r\n  \t\t</List>\r\n/*      <div>\r\n        <Card className= \"card orderHistoryCard\">\r\n            <CardActionArea>\r\n              <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Date: {this.props.orderDate}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  First Name: {this.props.firstName}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Last Name: {this.props.lastName}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Order ID: {this.props.oid}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Paid: {this.props.paid}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Picked Up: {this.props.pickedUp}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Total Price: ${this.props.totalPrice}\r\n                </Typography>\r\n                \r\n              </CardContent>\r\n            </CardActionArea>\r\n          </Card>\r\n      </div>*/\r\n    )\r\n  }\r\n}\r\n\r\nOrderHistoryItem.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(OrderHistoryItem);\r\n","import React, { Component } from 'react';\r\nimport './OrderHistory.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport OrderHistoryItem from '../OrderHistoryItem/OrderHistoryItem.js';\r\n\r\nclass OrderHistory extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      orders: []\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n    const apiURL = \"/api/orders/getUserOrders\";\r\n\r\n    axios.get(apiURL, {\r\n      params:{\r\n        user: this.props.user\r\n      }\r\n    })\r\n    .then(res => {\r\n      if(res.data.success === true){\r\n        this.setState({\r\n          orders: res.data.orders\r\n        });\r\n      }\r\n\r\n      else{\r\n        alert(res.data.message);\r\n      }\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const orders = this.state.orders.map(order => {\r\n      console.log(order.date);\r\n\r\n\r\n      let convertDate = new Date(order.date);\r\n      let hours = convertDate.getHours();\r\n      let timeOfDay = \"AM\";\r\n\r\n      console.log(\"hours \", hours);\r\n\r\n      if(hours > 12){\r\n        hours = hours -12;\r\n        timeOfDay = \"PM\";\r\n      }\r\n\r\n      hours = String(hours);\r\n\r\n      let minutes = String(convertDate.getMinutes());\r\n\r\n      if(minutes.length === 1){\r\n        minutes = '0' + minutes;\r\n      }\r\n\r\n      let seconds = String(convertDate.getSeconds());\r\n\r\n      let actualDate = convertDate.toDateString() + ' ' + hours + ':' + minutes + ' ' + timeOfDay;\r\n            \r\n      return <OrderHistoryItem orderDate = {actualDate} email = {order.email} firstName = {order.firstName} \r\n            lastName = {order.lastName} oid = {order.oid} paid = {String(order.paid)} pickedUp = {String(order.pickedUp)}\r\n            totalPrice = {order.totalPrice} \r\n            />\r\n    });\r\n\r\n\r\n    if(this.state.orders.length === 0){\r\n      return(\r\n        <div>\r\n          <h1> No orders were made! </h1>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    else{\r\n      return (\r\n        <div>\r\n          <h1> Orders: </h1>\r\n          <Grid container direction = \"column\">\r\n            {orders}\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n    total: state.cart.total,\r\n    cart: state.cart.items\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart from store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    updateItems: (response) => dispatch({\r\n      type: actions.GET_CART,\r\n      cart: response\r\n    })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderHistory);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport actions from \"../../store/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./ShopItemDetailed.css\";\r\nimport ReactImageMagnify from \"react-image-magnify\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {Link, withRouter} from 'react-router-dom';\r\n\r\n\r\nclass CarouselImage extends Component {\r\n  handleClick = () => {\r\n    this.props.onClick(this.props.index);\r\n  };\r\n\r\n  render() {\r\n    const { src, index, isActive } = this.props;\r\n\r\n    return (\r\n      <img\r\n        key={index}\r\n        data-index={index}\r\n        className={\r\n          isActive ? \"selected-carousel-img\" : \"carousel-img\"\r\n        }\r\n        src={src}\r\n        alt={`Product Img${index}`}\r\n        onClick={this.handleClick}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass ItemImageViewer extends Component {\r\n  static propTypes = {\r\n    imageLink: PropTypes.array.isRequired\r\n  };\r\n\r\n  state = {\r\n    currentImage: 0\r\n  };\r\n\r\n  // view next image, increment index in image array\r\n  nextImage = () => {\r\n    if (this.state.currentImage < this.props.imageLink.length - 1) {\r\n      this.setState({\r\n        currentImage: this.state.currentImage + 1\r\n      });\r\n    }\r\n  };\r\n\r\n  // previous image, decrement index in image array\r\n  prevImage = () => {\r\n    if (this.state.currentImage > 0) {\r\n      this.setState({\r\n        currentImage: this.state.currentImage - 1\r\n      });\r\n    }\r\n  };\r\n\r\n  changeImage = index => {\r\n    // console.log('click event');\r\n    // console.log(e.target.getAttribute('data-index'));\r\n    this.setState({\r\n      // currentImage: e.target.getAttribute(\"data-index\")\r\n      currentImage: index\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { imageLink } = this.props;\r\n    return (\r\n      <section className=\"item-image\">\r\n        <div className=\"magnify-container\">\r\n          <ReactImageMagnify\r\n            {...{\r\n              smallImage: {\r\n                alt: \"Test Image\",\r\n                isFluidWidth: true,\r\n                src: imageLink[this.state.currentImage]\r\n              },\r\n              largeImage: {\r\n                src: imageLink[this.state.currentImage],\r\n                width: 1200,\r\n                height: 1800,\r\n                enlargedImagePosition: \"over\"\r\n              },\r\n              enlargedImageContainerStyle: {\r\n                zIndex: 10000 // set so enlarged image always display above\r\n              }\r\n            }}\r\n          />\r\n\r\n          {/* <div className=\"imageButtons\">\r\n            <button onClick={this.prevImage} id=\"prevImage\">\r\n              {\" \"}\r\n              Previous{\" \"}\r\n            </button>\r\n            <button onClick={this.nextImage} id=\"nextImage\">\r\n              {\" \"}\r\n              Next{\" \"}\r\n            </button>\r\n          </div> */}\r\n        </div>\r\n\r\n        <div className=\"carousel-container\">\r\n          {imageLink.map((src, index) => (\r\n            <CarouselImage\r\n              key={index}\r\n              index={index}\r\n              src={src}\r\n              isActive={this.state.currentImage === index}\r\n              onClick={this.changeImage}\r\n            />\r\n          ))}\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nclass ApparelItemInfo extends Component {\r\n  static propTypes = {\r\n    productName: PropTypes.string.isRequired,\r\n    productPrice: PropTypes.number.isRequired,\r\n    productInfo: PropTypes.string.isRequired,\r\n    amtPurchased: PropTypes.number.isRequired,\r\n    handleQuantityChange: PropTypes.func.isRequired,\r\n    handleChange: PropTypes.func.isRequired,\r\n    addItem: PropTypes.func.isRequired,\r\n    displayApparelStock: PropTypes.func.isRequired,\r\n    size: PropTypes.string.isRequired,\r\n    clubName: PropTypes.func.isRequired\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      productName,\r\n      productPrice,\r\n      productInfo,\r\n      amtPurchased,\r\n      handleQuantityChange,\r\n      addItem,\r\n      handleChange,\r\n      size,\r\n      displayApparelStock,\r\n      clubName\r\n    } = this.props;\r\n\r\n    return (\r\n      <section className=\"item-info\">\r\n        <h2> {productName} </h2>\r\n        <div className=\"price\">${Number(productPrice).toFixed(2)}</div>\r\n        <div>\r\n          <b>Availability</b>: {displayApparelStock()}\r\n          <p>\r\n            <b>Club</b>: <Link to = {`/vendorProducts/${this.props.vendorID}`}> {clubName} </Link>\r\n          </p>\r\n        </div>\r\n        <p className=\"description\">{productInfo}</p>\r\n\r\n        <div className=\"select-container\">\r\n          {/* TODO fix selector */}\r\n          <form autoComplete=\"off\">\r\n            <FormControl className=\"select-size\">\r\n              <InputLabel htmlFor=\"select-size\">Select Size</InputLabel>\r\n              <Select value={size} onChange={handleChange(\"size\")} name=\"size\">\r\n                <MenuItem value=\"None\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"X-Small\"> X-Small </MenuItem>\r\n                <MenuItem value=\"Small\"> Small </MenuItem>\r\n                <MenuItem value=\"Medium\"> Medium </MenuItem>\r\n                <MenuItem value=\"Large\"> Large </MenuItem>\r\n                <MenuItem value=\"X-Large\"> X-Large </MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n\r\n          <TextField\r\n            className=\"quantity\"\r\n            label=\"Quantity\"\r\n            value={amtPurchased}\r\n            onChange={handleQuantityChange}\r\n            type=\"number\"\r\n            InputLabelProps={{\r\n              shrink: true\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"btn-cart\">\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            onClick={addItem}\r\n          >\r\n            Add To Cart\r\n          </Button>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nclass ItemInfo extends Component {\r\n\r\n  //props for ItemInfo\r\n  static propTypes = {\r\n    productName: PropTypes.string.isRequired,\r\n    productPrice: PropTypes.number.isRequired,\r\n    productInfo: PropTypes.string.isRequired,\r\n    amtPurchased: PropTypes.number.isRequired,\r\n    handleQuantityChange: PropTypes.func.isRequired,\r\n    addItem: PropTypes.func.isRequired,\r\n    displayStock: PropTypes.func.isRequired,\r\n    clubName: PropTypes.func.isRequired\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      productName,\r\n      productPrice,\r\n      productInfo,\r\n      amtPurchased,\r\n      handleQuantityChange,\r\n      addItem,\r\n      displayStock,\r\n      clubName\r\n    } = this.props;\r\n\r\n    return (\r\n      <section className=\"item-info\">\r\n        <h2> {productName} </h2>\r\n        <div className=\"price\">${Number(productPrice).toFixed(2)}</div>\r\n        <div>\r\n          <b>Availability</b>: {displayStock()}\r\n          <p>\r\n            <b>Club</b>: <Link to = {`/vendorProducts/${this.props.vendorID}`}> {clubName} </Link>\r\n          </p>\r\n        </div>\r\n        <p className=\"description\">{productInfo}</p>\r\n\r\n        <div className=\"select-container\">\r\n          <TextField\r\n            className=\"quantity\"\r\n            label=\"Quantity\"\r\n            value={amtPurchased}\r\n            onChange={handleQuantityChange}\r\n            type=\"number\"\r\n            InputLabelProps={{\r\n              shrink: true\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"btn-cart\">\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            onClick={addItem}\r\n          >\r\n            Add To Cart\r\n          </Button>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nclass ShopItemDetailed extends Component {\r\n  // TODO update add item behavior for apparel; either frontend or backend or\r\n  // both\r\n  state = {\r\n    imageLink: [],\r\n    productInfo: \"\",\r\n    productName: \"\",\r\n    productPrice: \"\",\r\n    amtPurchased: 1,\r\n    vendor: \"\",\r\n    productStock: \"\",\r\n    isApparel: false,\r\n    s_stock: 0,\r\n    m_stock: 0,\r\n    l_stock: 0,\r\n    xs_stock: 0,\r\n    xl_stock: 0,\r\n    size: \"None\",\r\n    currentImage: 0,\r\n    vendorNames: [],\r\n    vid: '',\r\n    pid: ''\r\n  };\r\n\r\n  // TODO make this smarter\r\n  displayApparelStock = () => {\r\n    const { xs_stock, s_stock, m_stock, l_stock, xl_stock } = this.state;\r\n    const totalStock = xs_stock + s_stock + m_stock + l_stock + xl_stock;\r\n\r\n    let text = \"\";\r\n\r\n    // available stock\r\n    if (totalStock > 10) {\r\n      text = \"In Stock\";\r\n    }\r\n    // less than 10, greater than 0, display alert\r\n    else if (totalStock > 0) {\r\n      text = `Only ${totalStock} items left!`;\r\n    } else if (totalStock === 0) {\r\n      text = \"Item out of stock.\";\r\n    }\r\n\r\n    return <span className=\"stock\">{text}</span>;\r\n  };\r\n\r\n  displayStock = () => {\r\n    const { productStock } = this.state;\r\n\r\n    let text = \"\";\r\n\r\n    if (productStock > 10) {\r\n      text = \"In Stock\";\r\n    } else if (productStock > 0) {\r\n      text = `Only ${productStock} items left!`;\r\n    } else if (productStock === 0) {\r\n      text = \"Item out of stock.\";\r\n    }\r\n    return <span className=\"stock\">{text}</span>;\r\n  };\r\n\r\n  //add item to user's cart\r\n  addItem = () => {\r\n    //check if user is logged in\r\n    if (this.state.login === false) {\r\n      alert(\"please login to add to cart\");\r\n    } \r\n    \r\n    else if (this.state.amtPurchased <= 0) {\r\n      alert(\"Sorry, cannot add a quantity of 0.\");\r\n    }\r\n\r\n    else if (this.state.amtPurchased > Number(this.state.productStock) && this.state.isApparel === false){\r\n      alert(\"Quantity selected exceeds stock\");\r\n    }\r\n\r\n    //add to user's cart\r\n    else {\r\n        //update user's cart on server\r\n        var apiURL = \"/api/getUserCart/addItems\";\r\n        //item added to user's cart is not an apparel\r\n        if (this.state.isApparel === false) {\r\n          console.log(\"adding item\");\r\n          axios\r\n            .post(apiURL, {\r\n              params: {\r\n                user: this.props.user,\r\n                pid: this.props.pid,\r\n                amtPurchased: this.state.amtPurchased,\r\n                vendorID: this.state.vid,\r\n                imageLink: this.state.imageLink,\r\n                isApparel: this.state.isApparel\r\n              }\r\n            })\r\n            .then(res => {\r\n              if (res.data.success === true) {\r\n                //after adding to item, get updated cart\r\n                const getCartURL = \"/api/getUserCart\";\r\n                axios\r\n                  .get(getCartURL, {\r\n                    params: {\r\n                      user: this.props.user\r\n                    }\r\n                  })\r\n                  .then(res => {\r\n                    //after getting cart info, update redux store container\r\n                    this.props.updateItems(res.data.data);\r\n                      alert(\"Item added to cart!\");\r\n                    })\r\n                    .catch(err => {\r\n                      alert(err);\r\n                    });\r\n                }\r\n              })\r\n              .catch(err => {\r\n                alert(err);\r\n              });\r\n          }\r\n\r\n          //item added to user's cart is an apparel\r\n          else {\r\n            console.log(\"checking shirt size\", this.state.size);\r\n            axios\r\n              .post(apiURL, {\r\n                params: {\r\n                  user: this.props.user,\r\n                  pid: this.props.pid,\r\n                  amtPurchased: this.state.amtPurchased,\r\n                  vendorID: this.state.vid,\r\n                  imageLink: this.state.imageLink,\r\n                  isApparel: this.state.isApparel,\r\n                  s_stock: this.state.s_stock,\r\n                  m_stock: this.state.m_stock,\r\n                  l_stock: this.state.l_stock,\r\n                  xs_stock: this.state.xs_stock,\r\n                  xl_stock: this.state.xl_stock,\r\n                  size: this.state.size\r\n                }\r\n              })\r\n              .then(res => {\r\n                if (res.data.success === true) {\r\n                  //after adding to item, get updated cart\r\n                  const getCartURL = \"/api/getUserCart\";\r\n                  axios\r\n                    .get(getCartURL, {\r\n                      params: {\r\n                        user: this.props.user\r\n                      }\r\n                    })\r\n                  .then(res => {\r\n                    //after getting cart info, update redux store container\r\n                    this.props.updateItems(res.data.data);\r\n                    alert(\"Item added to cart!\");\r\n                  })\r\n                  .catch(err => {\r\n                    alert(err);\r\n                  });\r\n              }\r\n            })\r\n            .catch(err => {\r\n              alert(err);\r\n            });\r\n        } //end of else statement for isApparel\r\n      }//end of adding item to cart\r\n  }; //end of addItem function\r\n\r\n  //increase number of quantity to add to user's cart\r\n  addQuantity = () => {\r\n    var currentQuantity = this.state.amtPurchased;\r\n    currentQuantity += 1;\r\n    this.setState({\r\n      amtPurchased: currentQuantity\r\n    });\r\n  };\r\n\r\n  //remove number of quantity to add to user's cart\r\n  removeQuantity = () => {\r\n    var currentQuantity = this.state.amtPurchased;\r\n    //can't have negative amount of items selected\r\n    if (currentQuantity <= 1) {\r\n      alert(\"Must have at least one item\");\r\n    } else {\r\n      currentQuantity -= 1;\r\n      this.setState({\r\n        amtPurchased: currentQuantity\r\n      });\r\n    }\r\n  };\r\n\r\n  //handle select when user selects shirt size\r\n  handleSelect = () => {\r\n    this.setState({\r\n      size: this.selectedSize.value\r\n    });\r\n  };\r\n\r\n  handleChange = name => event => {\r\n    this.setState({ [name]: event.target.value });\r\n  };\r\n\r\n  handleQuantityChange = event => {\r\n    if (event.target.value < 0) {\r\n      this.setState({ amtPurchased: 0 });\r\n    } else {\r\n      this.setState({ amtPurchased: event.target.value });\r\n    }\r\n  };\r\n\r\n  //load item info by calling getProductInfo api and render to screen\r\n  componentDidMount() {\r\n\r\n    //get list of vendor names\r\n    const vendorAPI = \"/api/getVendorInfo\";\r\n\r\n    //update state of vendors\r\n    axios.get(vendorAPI)\r\n      .then(res => {\r\n        if(res.data.success === true){\r\n          //update list of vendors\r\n          this.setState({\r\n            vendorNames: res.data.vendors\r\n          });\r\n\r\n          //after getting list of vendors, make request to get product info\r\n\r\n          //extract param values from URL\r\n          //match object contains parameter values\r\n          const handle = this.props.match.params;\r\n\r\n          console.log(handle);\r\n\r\n          //update vid for redux, link to about page\r\n          this.props.updateVendor(handle.vid);\r\n          this.setState({\r\n            vid: handle.vid,\r\n            pid: handle.pid\r\n          })\r\n\r\n          //obtain item info from server based on matching pid\r\n          //pid extracted from handle match object params\r\n          const apiURL = \"/api/getProductInfo\";\r\n          axios\r\n            .get(apiURL, {\r\n              params: {\r\n                pid: handle.pid\r\n              }\r\n            })\r\n            .then(res => {\r\n              //if successfully got product info, update component\r\n              if (res.data.success === true) {\r\n                \r\n                //get club name for this product\r\n                var vendorName = \"\";\r\n\r\n                //go through each vendor and check if vid matches item vid\r\n                for(let i = 0; i < this.state.vendorNames.length; i++){\r\n                  //extract matching vid\r\n                  if(this.state.vendorNames[i].vid === res.data.product.vid){\r\n                    vendorName = this.state.vendorNames[i].vendorName;\r\n                  }\r\n                }\r\n\r\n                //if the product is an apparel\r\n                if (res.data.product.isApparel === true) {\r\n                  this.setState({\r\n                    productInfo: res.data.product.productInfo,\r\n                    productName: res.data.product.productName,\r\n                    productPrice: res.data.product.productPrice,\r\n                    imageLink: res.data.product.productPicture,\r\n                    productStock: res.data.product.stock,\r\n                    vendor: vendorName,\r\n                    isApparel: true,\r\n                    s_stock: res.data.product.s_stock,\r\n                    m_stock: res.data.product.m_stock,\r\n                    l_stock: res.data.product.l_stock,\r\n                    xs_stock: res.data.product.xs_stock,\r\n                    xl_stock: res.data.product.xl_stock\r\n                  });\r\n                } else {\r\n                  this.setState({\r\n                    productInfo: res.data.product.productInfo,\r\n                    productName: res.data.product.productName,\r\n                    productPrice: res.data.product.productPrice,\r\n                    imageLink: res.data.product.productPicture,\r\n                    productStock: res.data.product.stock,\r\n                    vendor: vendorName\r\n                  });\r\n                }\r\n              } else {\r\n                alert(res.data.message);\r\n              }\r\n            })\r\n            .catch(err => {\r\n              alert(err);\r\n            });\r\n              }\r\n            })\r\n            //catch error for getting vendors\r\n            .catch(err => {\r\n              alert(err);\r\n            })    \r\n  }\r\n\r\n  render() {\r\n    if (this.state.isApparel === false) {\r\n      return (\r\n        <section className=\"item-detailed-container\">\r\n          <ItemImageViewer imageLink={this.state.imageLink} />\r\n          <ItemInfo\r\n            productName={this.state.productName}\r\n            productPrice={this.state.productPrice}\r\n            productInfo={this.state.productInfo}\r\n            handleQuantityChange={this.handleQuantityChange}\r\n            addItem={this.addItem}\r\n            displayStock={this.displayStock}\r\n            amtPurchased={this.state.amtPurchased}\r\n            clubName = {this.state.vendor}\r\n            vendorID = {this.props.vendorID}\r\n          />\r\n        </section>\r\n      );\r\n    } else {\r\n      return (\r\n        <section className=\"item-detailed-container\">\r\n          <ItemImageViewer imageLink={this.state.imageLink} />\r\n          <ApparelItemInfo\r\n            productName={this.state.productName}\r\n            productPrice={this.state.productPrice}\r\n            productInfo={this.state.productInfo}\r\n            handleQuantityChange={this.handleQuantityChange}\r\n            handleChange={this.handleChange}\r\n            addItem={this.addItem}\r\n            displayApparelStock={this.displayApparelStock}\r\n            amtPurchased={this.state.amtPurchased}\r\n            size={this.state.size}\r\n            clubName={this.state.vendor}\r\n            vendorID = {this.props.vendorID}\r\n          />\r\n        </section>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get login value and user email\r\nconst mapStateToProps = state => {\r\n  return {\r\n    pid: state.selectedItem.selectedItemID,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n    vendorID: state.vendor.vendor\r\n  };\r\n};\r\n\r\n//dispatch action to reducer\r\n//update which item was selected for detailed view of item\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    //get user's cart from state after logging in\r\n    updateItems: response =>\r\n      dispatch({\r\n        type: actions.GET_CART,\r\n        cart: response\r\n      }),\r\n\r\n    updateVendor: newVendor => \r\n      dispatch({\r\n        type: actions.GET_VENDOR_PRODUCTS,\r\n        vendor: newVendor\r\n      }),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ShopItemDetailed);\r\n","import React, { Component } from 'react';\r\nimport './EditItem.css';\r\nimport axios from 'axios';\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../../store/actions\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass EditItem extends Component {\r\n  static propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    clickFunction: PropTypes.func.isRequired,\r\n  }\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      name: this.props.name\r\n    }\r\n  }\r\n\r\n  //onclick function, call function that was passed as a prop to EditItemView component\r\n  //pass name after being clicked to parent component to fill in form data\r\n  updateFormAferClicked = () =>{\r\n    this.props.clickFunction(this.state.name);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className = \"editItem\">\r\n        <h2 id = \"selectEditItem\" onClick = {this.updateFormAferClicked}> {this.props.name} </h2>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  null  \r\n)(EditItem);\r\n","import React, { Component } from 'react';\r\nimport './EditItemView.css';\r\nimport EditItem from '../EditItem/EditItem';\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../../store/actions\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst style = {\r\n  field: { width: \"500px\" }\r\n};\r\n\r\nclass EditItemView extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      name: '',\r\n      info: '',\r\n      pickupLocation: '',\r\n      stock: '',\r\n      price: '',\r\n      isApparel: false,\r\n      vid: this.props.vendorID,\r\n      pid: '',\r\n      lastUpdate: '',\r\n      lastUser: '',\r\n      user: this.props.user,\r\n      productPicture: [],\r\n      pickupTime: '',\r\n      small: 0,\r\n      medium: 0,\r\n      large: 0,\r\n      xsmall: 0,\r\n      xlarge: 0,\r\n      apparelCSS: \"hideApparelSizes\",\r\n      itemStockCSS: 'showItemStock'\r\n    };\r\n  }\r\n\r\n  //get items of vendor from database\r\n  //allow admin to view and select which item to edit\r\n  componentDidMount() {\r\n    const apiURL = '/api/getVendorProducts';\r\n\r\n    //get all products of current vendor based on vendor id\r\n    axios.get(apiURL, {\r\n      params:{\r\n        vid: this.props.vendorID\r\n      }\r\n    })\r\n    .then(res => {\r\n      if(res.data.success === true){\r\n        //update list of items\r\n        this.setState({\r\n          items: res.data.data\r\n        })\r\n      }\r\n      else{\r\n        console.log(\"error\");\r\n      }\r\n    })\r\n    .catch(err =>{\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  //populate edit forms based on which item was selected\r\n  //name parameter finds matching product info in state array of items\r\n  populateEditForm = (name) => {    \r\n    //go through each item in array and determine which item matches\r\n    for(let i = 0; i < this.state.items.length; i++){\r\n      //if matching product, populate form data and state of component\r\n      if (this.state.items[i].productName === name){\r\n        var currentItem = this.state.items[i];\r\n        //if the item selected is not an apparel, do not display apparel sizes\r\n        if(currentItem.isApparel === false){\r\n          this.setState({\r\n            name: name,\r\n            info: currentItem.productInfo,\r\n            price: currentItem.productPrice,\r\n            stock: currentItem.stock,\r\n            pid: currentItem.pid,\r\n            productPicture: currentItem.productPicture,\r\n            isApparel: currentItem.isApparel,\r\n            apparelCSS: 'hideApparelSizes',\r\n            itemStockCSS: 'showItemStock'\r\n          })\r\n        }\r\n\r\n        //if the item is an apparel, display and update size stock\r\n        else{\r\n          this.setState({\r\n            name: name,\r\n            info: currentItem.productInfo,\r\n            price: currentItem.productPrice,\r\n            stock: currentItem.stock,\r\n            pid: currentItem.pid,\r\n            productPicture: currentItem.productPicture,\r\n            isApparel: currentItem.isApparel,\r\n            small: currentItem.s_stock,\r\n            medium: currentItem.m_stock,\r\n            large: currentItem.l_stock,\r\n            xsmall: currentItem.xs_stock,\r\n            xlarge: currentItem.xl_stock,\r\n            apparelCSS: 'showApparelSizes',\r\n            itemStockCSS: 'hideItemStock'\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  //handle stock change, update total stock values when user changes input\r\n  handleStockChangeApparel = name => stock => {\r\n\r\n    //if the user is setting the stock to a negative value, set default to 0\r\n    if(Number(stock.target.value) < 0){\r\n      this.setState({\r\n        [name]: 0\r\n      })\r\n    }\r\n\r\n    //if the user presses delete or backspace, handle empty field\r\n    else if(stock.target.value === ''){\r\n      this.setState({\r\n        [name]: ''\r\n      })\r\n    }\r\n\r\n    //update stock of current item and update running total of stock items\r\n    else{\r\n      //update stock value for current size\r\n      //after updating current stock, update running total of stock for all sizes\r\n      //callback function called after setState\r\n      this.setState({\r\n        [name]: Number(stock.target.value)\r\n      }, () => {\r\n        //add running total of stocks when value is changed, callback function after state was updated\r\n        var runningStockTotal = 0;\r\n        runningStockTotal = Number(this.state.small) + Number(this.state.medium) + Number(this.state.large) + Number(this.state.xsmall) + Number(this.state.xlarge);\r\n        //update stock with running total\r\n        this.setState({\r\n          stock: String(runningStockTotal)\r\n        })\r\n      })\r\n    }\r\n  };\r\n\r\n  //update item info, update information about item in database\r\n  updateItemInfo = () => {\r\n    const apiURL = '/api/adminProducts/editProduct';\r\n\r\n    //params for editing item\r\n    axios.patch(apiURL, {\r\n      params:{\r\n        vid: this.state.vid,\r\n        user: this.state.user,\r\n        pid: this.state.pid,\r\n        productInfo: this.state.info,\r\n        productName: this.state.name,\r\n        productPrice: this.state.price,\r\n        stock: this.state.stock,\r\n        productPicture: this.state.productPicture,\r\n        isApparel: this.state.isApparel,\r\n        pickupLocation: this.state.pickupLocation,\r\n        pickupTime: this.state.pickupTime,\r\n        s_stock: Number(this.state.small),\r\n        m_stock: Number(this.state.medium),\r\n        l_stock: Number(this.state.large),\r\n        xs_stock: Number(this.state.xsmall),\r\n        xl_stock: Number(this.state.xlarge)\r\n      }\r\n    })\r\n    .then(res => {\r\n      if(res.data.success === true){\r\n        alert(res.data.message);\r\n      }\r\n\r\n      else{\r\n        alert(\"Error updating item\");\r\n      }\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }// end of updating item\r\n  \r\n  render() {\r\n    //render items to select for editing\r\n    const products = this.state.items.map(result => {\r\n      return <EditItem name = {result.productName} clickFunction = {this.populateEditForm}/>\r\n    });\r\n    \r\n    return (\r\n      <div>\r\n        <Grid container direction = \"column\" display = \"flex\" justifyContent = \"center\" alignItems = \"center\" >\r\n          <h1> Select Item To Edit </h1>\r\n          <Grid container direction = \"row\" display = \"flex\" alignItems = \"center\" spacing = {24} justify = \"space-evenly\">\r\n            {products}\r\n          </Grid>\r\n\r\n          <Grid container direction = \"column\" display = \"flex\" alignItems = \"center\">\r\n            <div>\r\n              <div className = \"textForm\" id=\"row\">\r\n                <TextField\r\n                    label=\"Product Name\"\r\n                    required=\"true\"\r\n                    value = {this.state.name}\r\n                    onChange={(event) => this.setState({ name: event.target.value })}\r\n                    style={style.field}\r\n                  />\r\n                </div>\r\n\r\n                <div className = \"textFormEdit\" id=\"row\">\r\n                  <TextField\r\n                    label=\"Product Info\"\r\n                    required=\"true\"\r\n                    multiline={true}\r\n                    rows={2}\r\n                    value = {this.state.info}\r\n                    onChange={(event) => this.setState({ info: event.target.value })}\r\n                    style={style.field}\r\n                  />\r\n                </div>\r\n\r\n                <div className = \"textFormEdit\" id=\"row\">\r\n                  <TextField\r\n                    label=\"Pickup Location (Enter location and date/time)\"\r\n                    required=\"true\"\r\n                    value = {this.state.pickupLocation}\r\n                    onChange={(event) => this.setState({ pickupLocation: event.target.value })}\r\n                    style={style.field}\r\n                  />\r\n                </div>\r\n\r\n                <div className = \"textFormEdit\" id=\"row\">\r\n                  <TextField\r\n                    label=\"Product Price\"\r\n                    required=\"true\"\r\n                    type=\"number\"\r\n                    value = {this.state.price}\r\n                    onChange={(event) => this.setState({ price: event.target.value })}\r\n                  />\r\n                </div>\r\n\r\n                <div className = {this.state.itemStockCSS} id=\"row\">\r\n                  <TextField\r\n                    label=\"Stock\"\r\n                    required=\"true\"\r\n                    type=\"number\"\r\n                    value = {this.state.stock}\r\n                    onChange={(event) => this.setState({ stock: event.target.value })}\r\n                  />\r\n                </div>\r\n\r\n                {/* add quantity for apparel sizes, toggel visibility if selected */}\r\n                <div className = {this.state.apparelCSS}>\r\n                  <div className = \"textForm\" id=\"row\">\r\n                    <TextField\r\n                      label=\"Product Stock\"\r\n                      type=\"number\"\r\n                      value = {this.state.stock}\r\n                      disabled\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className = \"textForm\" id=\"row\">\r\n                    <TextField\r\n                      label=\"Small Stock\"\r\n                      required=\"false\"\r\n                      type=\"number\"\r\n                      value={this.state.small}\r\n                      onChange={\r\n                        this.handleStockChangeApparel(\"small\")\r\n                      }\r\n                    />\r\n                  </div>\r\n\r\n                  <div className = \"textForm\" id=\"row\">\r\n                    <TextField\r\n                      label=\"Medium Stock\"\r\n                      required=\"false\"\r\n                      type=\"number\"\r\n                      value={this.state.medium}\r\n                      onChange={\r\n                        this.handleStockChangeApparel(\"medium\")\r\n                      }\r\n                    />\r\n                  </div>\r\n\r\n                  <div className = \"textForm\" id=\"row\">\r\n                    <TextField\r\n                      label=\"Large Stock\"\r\n                      required=\"false\"\r\n                      type=\"number\"\r\n                      value={this.state.large}\r\n                      onChange={\r\n                        this.handleStockChangeApparel(\"large\")\r\n                      }\r\n                    />\r\n                  </div>\r\n\r\n                  <div className = \"textForm\" id=\"row\">\r\n                    <TextField\r\n                      label=\"X-Small Stock\"\r\n                      required=\"false\"\r\n                      type=\"number\"\r\n                      value={this.state.xsmall}\r\n                      onChange={                    \r\n                        this.handleStockChangeApparel(\"xsmall\")\r\n                      }\r\n                    />\r\n                  </div>\r\n\r\n                  <div className = \"textForm\" id=\"row\">\r\n                    <TextField\r\n                      label=\"X-Large Stock\"\r\n                      required=\"false\"\r\n                      value={this.state.xlarge}\r\n                      type=\"number\"\r\n                      onChange={\r\n                        this.handleStockChangeApparel(\"xlarge\")\r\n                      }\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <Button \r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  color=\"primary\"\r\n                  onClick = {this.updateItemInfo}> \r\n                  Update Item \r\n                </Button>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//redux, pass as vid and username from redux store to use in component\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.auth.user,\r\n    vendorID: state.auth.vendorID\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(EditItemView);\r\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport \"./AboutClub.css\";\nimport axios from \"axios\";\n\nclass ClubInfo extends Component {\n  static propTypes = {\n    vendorName: PropTypes.string.isRequired,\n    bio: PropTypes.string.isRequired,\n  }\n\n  render() {\n    const { vendorName, bio } = this.props;\n    return (\n      <div id=\"about-club-info-container\">\n        <div className=\"club-header\">\n          <b>{vendorName}</b>\n        </div>\n        <div className=\"club-info\">\n          {bio}\n        </div>\n        <div className=\"club-links\">\n          TODO\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default class AboutClub extends Component {\n  static propTypes = {\n    vid: PropTypes.string.isRequired,\n  }\n\n  state = {\n    vendorName: '',\n    bio: '',\n    // bioImages ?\n    // TODO more stuff\n    // TODO also change backend\n  }\n\n  componentDidMount() {\n    //extract param values from URL\n    //match object contains parameter values\n    const handle = this.props.match.params;\n    const route = `/api/getVendorInfo/aboutClub`;\n\n    axios.get(route, {\n      // params: { vid: this.props.vid }\n\n      //extract vid from URL\n      params: { vid: handle.vid }\n    })\n      .then(res => {\n        if (res.data.success) {\n          const { vendorName, bio } = res.data;\n          this.setState({\n            vendorName,\n            bio,\n          });\n        }\n        else {\n          alert(res.data.message);\n        }\n      })\n      .catch(err => {\n        alert(err);\n      });\n  }\n  \n  // TODO style about us page\n  render() {\n    const { vendorName, bio } = this.state;\n\n    return (\n      <div id=\"about-club-container\">\n        <img src=\"#\" alt=\"Club Img\"/>\n\n        <ClubInfo \n          vendorName={vendorName}\n          bio={bio}\n        />\n\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\nimport './App.css';\nimport About from './components/About/About';\nimport Signup from './components/Signup/Signup';\nimport Home from './components/Home/Home';\nimport Login from './components/Login/Login';\nimport ButtonAppBar from './components/ButtonAppBar/ButtonAppBar';\nimport Shop from './components/Shop/Shop';\nimport Cart from './components/Cart/Cart';\nimport VendorView from './components/VendorView/VendorView';\nimport VendorSignup from './components/VendorSignup/VendorSignup';\nimport EditClubInfo from './components/EditClubInfo/EditClubInfo';\nimport AddProduct from './components/AddProduct/AddProduct';\nimport OrderHistory from './components/OrderHistory/OrderHistory';\nimport ShopItemDetailed from './components/ShopItemDetailed/ShopItemDetailed';\nimport EditItemView from './components/EditItemView/EditItemView';\n\n\nimport { createBrowserHistory } from 'history';\nimport AboutClub from './components/AboutClub/AboutClub';\nconst history = createBrowserHistory();\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <ButtonAppBar />\n          <Route exact path = \"/\" component = {Home} />\n          <Route exact path = \"/about\" component = {About} />\n          <Route exact path = \"/shop\" component = {Shop}/>\n          <Route exact path = \"/signup\" component = {Signup} />\n          <Route exact path = \"/login\" component = {Login} /> \n          <Route exact path = \"/cart\" component = {Cart}/>\n          <Route path = \"/vendorProducts/:vid\" component = {VendorView}/>\n          <Route exact path = \"/abcdefg/vendorSignup\" component = {VendorSignup}/>\n          <Route exact path = \"/editClubInfo\" component = {EditClubInfo}/>\n          <Route exact path = \"/addProduct\" component = {AddProduct}/>\n          <Route exact path = \"/orderHistory\" component = {OrderHistory}/>\n          <Route path = \"/itemDetails/:vid/:pid\" component = {ShopItemDetailed}/>\n          <Route path=\"/aboutClub/:vid\" component = {AboutClub}/>\n          <Route exact path=\"/editItem\" component = {EditItemView}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import actions from './actions';\r\n\r\n//initial state of login reducer\r\n\r\n//check whether login is true or false\r\n//if logged in, set navbar text to Logout, if logged out set navbar text to Login\r\n//store user email to use with other components\r\nconst initialState = {\r\n    login: false,\r\n    text: \"Login\",\r\n    user: '',\r\n    isAdmin: false,\r\n    vendorID: '',\r\n    adminsOf: [],\r\n    currentVendor: ''\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        //if user is logged in, change state to true\r\n        case actions.LOGGED_IN:\r\n            return{\r\n                //updating state immutably\r\n                //disperse contents of original state object\r\n                ...state,\r\n                //assign login value to true based on payload action name\r\n                //assign email to user's email after logging in\r\n                //return new state object with updated \r\n                login: true,\r\n                text: \"Logout\",\r\n                user: action.user\r\n            }\r\n        //when an admin is logged in\r\n        case actions.ADMIN_LOGGED_IN:\r\n            return{\r\n                ...state,\r\n                login: true,\r\n                text: \"Logout\",\r\n                user:action.user,\r\n                isAdmin: true,\r\n                vendorID: action.vid,\r\n                adminsOf: action.admins,\r\n                currentVendor: action.currentVendor\r\n            }\r\n        //if user logs out, update state\r\n        case actions.LOGGED_OUT:\r\n        return initialState\r\n            // return{\r\n            //     ...state,\r\n            //     login: false,\r\n            //     text: \"Login\",\r\n            //     email: '',\r\n            //     isAdmin: false,\r\n            //     vendorID: '',\r\n            //     adminsOf: state.adminsOf.length = 0,\r\n            //     currentVendor: ''\r\n            // }\r\n        //update vendor id of user if admin\r\n        case actions.UPDATE_VENDOR_ID:\r\n            return{\r\n              ...state,\r\n              vendorID: action.vid,\r\n              currentVendor: action.vendor\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import actions from './actions';\r\n\r\n//initial state of shop view\r\nconst initialState = {\r\n  products: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case actions.GET_PRODUCTS:\r\n      //copy initial state\r\n      //update products array to be array retrieved from GET request to server\r\n      //action.items is payload to update state\r\n      return{\r\n        ...state,\r\n        products: action.items\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import actions from './actions';\r\n//reducer for managing state of cart for a logged in user\r\n\r\n//initial state of cart reducer\r\nconst initialState = {\r\n  items: [],\r\n  total: 0\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  //action to get cart items stored on server\r\n  switch(action.type){\r\n    case actions.GET_CART:\r\n      return{\r\n        ...state,\r\n        //get cart items from server, assign to state\r\n        items: action.cart\r\n      }\r\n\r\n    //add item to cart, update state\r\n    case actions.ADD_CART:\r\n      return{\r\n        ...state,\r\n        items: state.items.concat(action.item)\r\n      }\r\n\r\n    //remove item from cart, update state\r\n    case actions.REMOVE_CART:\r\n      return{\r\n\r\n      }\r\n\r\n    //empty cart, either on logout or checkout\r\n    case actions.EMPTY_CART:\r\n      return{\r\n        ...state,\r\n        items: state.items.length = 0\r\n      }\r\n\r\n    case actions.UPDATE_TOTAL:\r\n      return{\r\n        ...state,\r\n        total: action.total\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import actions from './actions';\r\n\r\nconst initialState = {\r\n  vendor: '',\r\n  vendors: []\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case actions.GET_VENDOR_PRODUCTS:\r\n      return{\r\n        ...state,\r\n        vendor: action.vendor\r\n      }\r\n\r\n    case actions.GET_VENDORS:\r\n      return{\r\n        ...state,\r\n        vendors: action.vendors\r\n      }\r\n\r\n  \r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default reducer;\r\n","import actions from './actions';\r\n\r\n//initial state\r\nconst initialState = {\r\n  selectedItemID: ''\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case actions.UPDATE_SELECTED_ITEM:\r\n      return{\r\n        ...state,\r\n        selectedItemID: action.itemID\r\n      }\r\n    \r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import redux\nimport {createStore, combineReducers} from 'redux';\nimport {Provider} from 'react-redux';\n//store redux state\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\n//redux reducers\nimport loginReducer from './store/loginReducer';\nimport getProductsReducer from './store/getProductsReducer';\nimport cartReducer from './store/cartReducer';\nimport vendorReducer from './store/vendorReducer';\nimport shopItemReducer from './store/shopItemReducer';\n\nimport 'typeface-roboto';\n\n//create store for redux state management\n//store stores state of application\nconst rootReducer = combineReducers({\n  auth: loginReducer,\n  getAllItems: getProductsReducer,\n  cart: cartReducer,\n  vendor: vendorReducer,\n  selectedItem: shopItemReducer\n});\n\n//redux persistConfig\nconst persistConfig = {\n  key: 'root',\n  storage: storage,\n  stateReconciler: autoMergeLevel2\n};\n\nconst pReducer = persistReducer(persistConfig, rootReducer);\nconst store = createStore(pReducer);\nconst persistor = persistStore(store);\n\n//Provider tag allows all components to have access to store\nReactDOM.render(<Provider store = {store}> \n                  <PersistGate loading ={null} persistor = {persistor}>\n                    <App/> \n                  </PersistGate>\n                </Provider>, document.getElementById('root'));\n\n// hot module reloading used to reload app in browser w/out performing a page\n// refresh. Useful when wanting to test w/out losing console.log() s\nif (module.hot) {\n  module.hot.accept()\n}\n\nserviceWorker.unregister();\n"],"sourceRoot":""}