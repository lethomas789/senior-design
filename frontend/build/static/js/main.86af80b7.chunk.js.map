{"version":3,"sources":["images/test_shirt1.png","images/dog1.jpg","images/dog2.jpg","images/dog3.jpg","components/About/About.js","components/Signup/Signup.js","components/Home/Home.js","store/actions.js","components/Login/Login.js","components/ButtonAppBar/ButtonAppBar.js","components/ShopItem/ShopItem.js","components/ShopView/ShopView.js","components/Shop/Shop.js","components/CartItem/CartItem.js","components/Checkout/Checkout.js","components/Cart/Cart.js","components/EmptyItem/EmptyItem.js","components/VendorView/VendorView.js","components/VendorSignup/VendorSignup.js","components/EditClubInfo/EditClubInfo.js","components/AddProduct/AddProduct.js","components/OrderHistoryItem/OrderHistoryItem.js","components/OrderHistory/OrderHistory.js","App.js","serviceWorker.js","store/loginReducer.js","store/getProductsReducer.js","store/cartReducer.js","store/vendorReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","Grid_default","container","direction","justify","alignContent","alignItems","id","Component","Signup","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","firstName","lastName","email","password","confirmPassword","open","progressValue","progressVariant","responseMessage","success","sendSignup","bind","assertThisInitialized","handleClose","handleEnter","setState","history","push","_this2","axios","post","params","then","res","data","message","catch","err","alert","e","keyCode","_this3","classes","Paper_default","className","TextField_default","label","required","onChange","event","target","value","onKeyDown","type","Button_default","variant","color","onClick","CircularProgress_default","defineProperty","size","progress","Dialog_default","onClose","aria-describedby","DialogContent_default","DialogContentText_default","index_es","withStyles","theme","margin","spacing","unit","react_alice_carousel_default","autoPlay","autoPlayInterval","buttonsDisabled","src","image1","image2","image3","actions","LOGGED_IN","LOGGED_OUT","GET_PRODUCTS","ADMIN_LOGGED_IN","GET_CART","ADD_CART","REMOVE_CART","EMPTY_CART","UPDATE_TOTAL","GET_VENDOR_PRODUCTS","GET_VENDORS","UPDATE_VENDOR_ID","Login","getCart","sendLogin","get","user","updateItems","vendors","length","updateLogin","console","log","currentVendorID","vid","currentVendors","currentVendorName","vendorName","updateAdminLogin","login","_this4","propsTypes","PropTypes","object","isRequired","connect","items","cart","auth","vendor","dispatch","currentEmail","response","vendorID","adminsOf","admins","currentVendor","ButtonAppBar","alertMessage","currentAdminOf","openSelect","logoutUser","viewCartCheck","handleSelect","handleCloseSelect","handleOpenSelect","updateVendors","loginText","updateLogout","emptyCart","i","updateCurrentVendor","loginValue","isAdmin","AppBar_default","position","Toolbar_default","IconButton_default","aria-label","Menu_default","Typography_default","component","Link","to","Badge_default","badgeContent","cartLength","badge","ShoppingCart_default","vendorList","map","result","MenuItem_default","key","InputLabel_default","Select_default","onOpen","text","top","right","border","concat","palette","grey","ShopItem","name","productName","price","productPrice","pid","amtPurchased","addItem","addQuantity","removeQuantity","updateVendor","viewVendor","currentQuantity","item","xs","require","width","height","newVendor","ShopView","updateProducts","products","components_ShopItem_ShopItem","stock","productInfo","justify-xs-space-evenly","getAllItems","Shop","components_ShopView_ShopView","CartItem","removeItem","currentCart","priceTotal","updateTotal","Number","totalPrice","Card_default","CardActionArea_default","CardMedia_default","CardContent_default","gutterBottom","CardActions_default","sum","total","Checkout","onSuccess","payment","updateSelectedVendor","paymentOptions","transactions","item_list","String","paymentID","payerID","delete","emptyCartOnPayment","clearTotalOnPayment","onCancel","onError","env","currency","client","sandbox","production","intent","redirect_urls","return_url","cancel_url","note_to_payer","cartTotal","paypalTransactionsArray","paypalTransactions","paypalItems","paypalItem","toFixed","quantity","amount","react_paypal_express_checkout_default","shipping","extendedIcon","marginRight","Cart","components_CartItem_CartItem","components_Checkout_Checkout","VendorView","bio","VendorSignup","createBrowserHistory","code","handleOpen","adminCode","FormControl_default","EditClubInfo","lastUpdate","lastUpdateUser","getClubInfo","sendEdit","patch","AddProduct","addProduct","OrderHistoryItem","List_default","root","ListItem_default","ListItemText_default","primary","secondary","orderDate","Divider_default","dividerFullWidth","dividerInset","oid","paid","pickedUp","maxWidth","backgroundColor","background","paper","OrderHistory","orders","order","date","convertDate","Date","hours","getHours","timeOfDay","minutes","getMinutes","getSeconds","actualDate","toDateString","components_OrderHistoryItem_OrderHistoryItem","App","BrowserRouter","components_ButtonAppBar_ButtonAppBar","Route","exact","path","About","Boolean","window","location","hostname","match","initialState","reducer","arguments","undefined","action","objectSpread","rootReducer","combineReducers","loginReducer","getProductsReducer","cartReducer","vendorReducer","persistConfig","storage","stateReconciler","autoMergeLevel2","pReducer","persistReducer","store","createStore","persistor","persistStore","ReactDOM","render","es","integration_react","loading","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.86af80b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/test_shirt1.04c9ebc8.png\";","module.exports = __webpack_public_path__ + \"static/media/dog1.aa9094e4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog2.303269b8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog3.751aa161.jpg\";","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './About.css';\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Grid container direction=\"column\" justify=\"center\"alignContent = \"center\" alignItems=\"center\">\r\n          <h1 id = \"aboutHeader\"> About Us </h1>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport './Signup.css';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { DialogActions } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles'; \nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\n\nconst styles = theme => ({\n  progress: {\n    margin: theme.spacing.unit * 2\n  }\n});\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props)\n    //store user input\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      open: false,\n      progressValue: 0,\n      progressVariant: 'determinate',\n      responseMessage: '',\n      success: false\n    }\n    this.sendSignup = this.sendSignup.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleEnter = this.handleEnter.bind(this);\n  }\n\n  //handle dialog closing\n  handleClose(){\n    this.setState({\n        open: false\n    });\n\n    if(this.state.success === true){\n      this.props.history.push('/shop');\n    }\n  }\n\n  //send signup request\n  sendSignup(){\n      //load progress circle to wait for signup check\n      this.setState({\n        progressValue: 50,\n        progressVariant: \"indeterminate\"\n      });\n\n      if(this.state.password != this.state.confirmPassword){\n        this.setState({\n          open: true,\n          progressValue: 0,\n          progressVariant: \"determinate\",\n          responseMessage: \"Passwords do not match!\"\n        });\n      }\n\n      else{\n        const apiURL = \"/api/signup\";\n        //send signup request\n        axios.post(apiURL, {\n          params: {\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            email: this.state.email,\n            password: this.state.password\n          }\n        })\n        .then(res => {\n          //if signup is successful, display success message\n          if(res.data.success === true){\n            this.setState({\n              open: true,\n              progressValue: 0,\n              progressVariant: \"determinate\",\n              responseMessage: \"Signup successful! Please login!\",\n              success: true\n            })\n          }\n\n          //display error message\n          else{\n            this.setState({\n              open: true,\n              progressValue: 0,\n              progressVariant: \"determinate\",\n              responseMessage: res.data.message\n            })\n          }\n        })\n        .catch(err => {\n          alert(err);\n        })\n      }    \n    }\n\n    //handle enter key being pressed\n    handleEnter(e){\n      var key = e.keyCode;\n      if(key === 13){\n          this.sendSignup();\n      }\n    }\n  \n  render() {\n    const { classes } = this.props;\n    return (\n      <div id = \"signupContainer\">\n        <div id = \"signupForms\">\n          <Paper className = \"signupPaperContainer\">\n            <h1> Sign Up </h1>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                label=\"First Name\"\n                required=\"true\"\n                onChange={(event) => this.setState({ firstName: event.target.value })}\n                onKeyDown = {this.handleEnter}\n              />\n            </div>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                label=\"Last Name\"\n                required=\"true\"\n                onChange={(event) => this.setState({ lastName: event.target.value })}\n                onKeyDown = {this.handleEnter}\n              />\n            </div>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                label=\"Email\"\n                required=\"true\"\n                onChange={(event) => this.setState({ email: event.target.value })}\n                onKeyDown = {this.handleEnter}\n              />\n            </div>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                required=\"true\"\n                onChange={(event) => this.setState({ password: event.target.value })}\n                onKeyDown = {this.handleEnter}\n              />\n            </div>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                type=\"password\"\n                label=\"Confirm Password\"\n                required=\"true\"\n                onChange={(event) => this.setState({ confirmPassword: event.target.value })}\n                onKeyDown = {this.handleEnter}\n              />\n            </div>\n            <div className = \"pushDown\">\n              <Button variant = \"contained\" color = \"primary\" onClick = {this.sendSignup}> Sign Up  </Button>\n            </div>\n          </Paper>\n\n          <div className = \"progressContainer\">\n            <div className = \"circle\">\n              <CircularProgress className = \"loadingCircle\" size = {80} variant = {this.state.progressVariant} value = {this.state.progressValue} className = {classes.progress}/>\n            </div>\n          </div>\n          \n          <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\n            <DialogContent>\n              <DialogContentText id = \"alert-dialog-description\">\n                {this.state.responseMessage}\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick = {this.handleClose} color = \"primary\">\n                Ok\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </div>\n      </div>\n    )\n  }\n}\n\nSignup.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Signup);\n","import React, { Component } from 'react';\nimport './Home.css';\nimport Grid from '@material-ui/core/Grid';\nimport { Slide } from 'react-slideshow-image';\nimport AliceCarousel from 'react-alice-carousel';\nimport \"react-alice-carousel/lib/alice-carousel.css\";\nimport image1 from '../../images/dog1.jpg';\nimport image2 from '../../images/dog2.jpg';\nimport image3 from '../../images/dog3.jpg';\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div id = \"homeContainer\">\n        <Grid container direction=\"column\" justify=\"center\"alignContent = \"center\" alignItems=\"center\">\n          <h1> Welcome to ECS193 ECommerce! </h1>\n          <p>This is a ecommerce website for UC Davis's clubs. \n          Here we make merchandise available from all different clubs of Davis.</p>\n\n          <div id = \"carouselContainer\">\n            <AliceCarousel autoPlay = {true} autoPlayInterval = {2000} buttonsDisabled = {true}>\n                <img className = \"slideImage\" src = {image1} />\n                <img className = \"slideImage\" src = {image2} />\n                <img className = \"slideImage\" src = {image3} />\n            </AliceCarousel>\n          </div>\n  \n        </Grid>\n      </div>\n    );\n  }\n}\n\n \n","//actions to trigger reducer to handle state changes\nconst actions =  {\n    //auth actions\n    LOGGED_IN: \"LOGGED_IN\",\n    LOGGED_OUT: \"LOGGED_OUT\",\n    GET_PRODUCTS: \"GET_PRODUCTS\",\n    ADMIN_LOGGED_IN: \"ADMIN_LOGGED_IN\",\n    //cart actions\n    GET_CART: \"GET_CART\",\n    ADD_CART:\"ADD_CART\",\n    REMOVE_CART:\"REMOVE_CART\",\n    EMPTY_CART: \"EMPTY_CART\",\n    UPDATE_TOTAL: \"UPDATE_TOTAL\",\n    //vendor actions\n    GET_VENDOR_PRODUCTS: \"GET_VENDOR_PRODUCTS\",\n    GET_VENDORS: \"GET_VENDORS\",\n    UPDATE_VENDOR_ID: \"UPDATE_VENDOR_ID\"\n}\n\nexport default actions;\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport './Login.css';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport { DialogActions } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles'; \r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport PropTypes from 'prop-types';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\n\r\nconst styles = theme => ({\r\n    progress: {\r\n      margin: theme.spacing.unit * 2\r\n    }\r\n});\r\n\r\n//Login component, allows user to login with email and password credentials\r\nclass Login extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        //store user input\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            open: false,\r\n            progressValue: 0,\r\n            progressVariant: 'determinate',\r\n            responseMessage: ''        \r\n        }\r\n        this.getCart = this.getCart.bind(this);\r\n        this.sendLogin = this.sendLogin.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleEnter = this.handleEnter.bind(this);\r\n    }\r\n\r\n    //get logged in user's cart info\r\n    getCart(){\r\n   //   const apiURL = \"http://localhost:4000/api/getUserCart\"\r\n      const apiURL = \"/api/getUserCart\";\r\n      axios.get(apiURL, {\r\n        params:{\r\n          user: this.state.email\r\n        }\r\n      }).then(res => {\r\n          //after getting cart info, update redux store container\r\n          this.props.updateItems(res.data.data);\r\n        })\r\n        .catch(err => {\r\n          alert(err);\r\n        })\r\n    }\r\n\r\n    //send login request, display if login was successful\r\n    sendLogin(){\r\n        //load progress circle to wait for login check\r\n        this.setState({\r\n            progressValue: 50,\r\n            progressVariant: \"indeterminate\"\r\n        });\r\n        //const apiURL = \"http://localhost:4000/api/login\";\r\n        const apiURL = \"/api/login\";\r\n\taxios.post(apiURL, {\r\n            params:{\r\n              email: this.state.email,\r\n              password: this.state.password\r\n            }\r\n        })\r\n        //successful login, display message\r\n        .then(res => {\r\n            //login for regular user, non-admin\r\n            if(res.data.success === true && res.data.vendors.length === 0){\r\n                //dispatch update login action to update login state\r\n                let email = this.state.email;\r\n                this.props.updateLogin(email);\r\n\r\n                //after updating login, get cart info\r\n                this.getCart();\r\n\r\n                //display dialog for login successful\r\n                this.setState({\r\n                    open: true,\r\n                    progressValue: 0,\r\n                    progressVariant: \"determinate\",\r\n                    responseMessage: \"Login Succesful!\"\r\n                });\r\n            }\r\n\r\n            else if (res.data.success === true && res.data.vendors.length > 0){\r\n\r\n                //after determining user is an admin, get object list of user's active vendors\r\n                console.log(\"admin login\", res.data);\r\n\r\n                const vendorURL = \"/api/adminUser\";\r\n                axios.get(vendorURL, {\r\n                    params:{\r\n                        user: this.state.email\r\n                    }\r\n                })\r\n                .then(res => {\r\n                    console.log(res.data);\r\n                    let currentVendorID = res.data.vendors[0].vid;\r\n                    let email = this.state.email;\r\n                    let currentVendors = res.data.vendors;\r\n                    let currentVendorName = res.data.vendors[0].vendorName;\r\n\r\n                    //update redux store state\r\n                    this.props.updateAdminLogin(email, currentVendorID, currentVendors, currentVendorName);\r\n\r\n                    //after updating login, get cart info\r\n                    this.getCart();\r\n                \r\n                    //display dialog for login successful\r\n                    this.setState({\r\n                        open: true,\r\n                        progressValue: 0,\r\n                        progressVariant: \"determinate\",\r\n                        responseMessage: \"Login Succesful!\"\r\n                    });\r\n\r\n                })\r\n                .catch(err => {\r\n                    alert(err);\r\n                })\r\n            }\r\n            //display error message with logging in\r\n            else{\r\n                this.setState({\r\n                    open: true,\r\n                    progressValue: 0,\r\n                    progressVariant: \"determinate\",\r\n                    responseMessage: res.data.message\r\n                });\r\n            }\r\n        })\r\n        .catch(err => {\r\n            alert(err);\r\n        })\r\n    }\r\n\r\n    //handle dialog closing\r\n    handleClose(){\r\n        this.setState({\r\n            open: false\r\n        });\r\n\r\n        if(this.props.login === true){\r\n            this.props.history.push('/shop');\r\n        }\r\n    }\r\n\r\n    //handle enter key being pressed\r\n    handleEnter(e){\r\n        var key = e.keyCode;\r\n        if(key === 13){\r\n            this.sendLogin();\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { classes } = this.props;\r\n        return(\r\n            <div id = \"loginContainer\">\r\n                <div id = \"loginForms\">\r\n                    <Paper className = \"paperContainer\">\r\n                        <h1> Login </h1>\r\n                        <div className = \"textForm\" id=\"row\">\r\n                            <TextField\r\n                            id = \"outline-simple-start-adornment\"\r\n                            label=\"Email\"\r\n                            required=\"true\"\r\n                            onChange={(event) => this.setState({ email: event.target.value })}\r\n                            onKeyDown = {this.handleEnter}\r\n                            />\r\n                        </div>\r\n                        <div className = \"textForm\" id=\"row\">\r\n                            <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            required=\"true\"\r\n                            onChange={(event) => this.setState({ password: event.target.value })}\r\n                            onKeyDown = {this.handleEnter}\r\n                            />\r\n                        </div>\r\n                        <div className = \"pushDown\">\r\n                        <Button variant = \"contained\" color = \"primary\" onClick = {this.sendLogin}> Login  </Button>\r\n                        </div>\r\n                    </Paper>\r\n                    \r\n                    <div className = \"progressContainer\">\r\n                        <div className = \"circle\">\r\n                            <CircularProgress className = \"loadingCircle\" size = {80} variant = {this.state.progressVariant} value = {this.state.progressValue} className = {classes.progress}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\r\n                        <DialogContent>\r\n                            <DialogContentText id = \"alert-dialog-description\">\r\n                                {this.state.responseMessage}\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick = {this.handleClose} color = \"primary\">\r\n                                Ok\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n    return{\r\n      items: state.cart.items,\r\n      login: state.auth.login,\r\n      user: state.auth.user,\r\n      vendors: state.vendor.vendors\r\n    }\r\n  }\r\n\r\n//redux, dispatch action to reducer to update state\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        //update logged in values\r\n        updateLogin: (currentEmail) => dispatch({\r\n            type: actions.LOGGED_IN,\r\n            user: currentEmail\r\n        }),\r\n\r\n        //get user's cart from state after logging in\r\n        updateItems: (response) => dispatch({\r\n          type: actions.GET_CART,\r\n          cart: response\r\n        }),\r\n\r\n        //update admin login\r\n        updateAdminLogin: (currentEmail, vendorID, adminsOf, vendor) => dispatch({\r\n            type: actions.ADMIN_LOGGED_IN,\r\n            user: currentEmail,\r\n            vid: vendorID,\r\n            admins: adminsOf,\r\n            currentVendor: vendor\r\n        })\r\n    }\r\n}\r\n\r\nLogin.propsTypes = {\r\n    classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withStyles(styles)(Login));\r\n","import React, { Component } from 'react';\nimport './ButtonAppBar.css';\nimport {connect} from 'react-redux';\nimport actions from '../../store/actions';\nimport {Route, Link, Redirect} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CartIcon from '@material-ui/icons/ShoppingCart';\nimport Badge from '@material-ui/core/Badge';\nimport axios from 'axios';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { DialogActions } from '@material-ui/core';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n//variables to store routes to redirect to with Link component\nconst homeRoute = \"/\";\nconst aboutRoute = \"/about\";\nconst signupRoute = \"/signup\";\nconst loginRoute = \"/login\";\nconst shopRoute = \"/shop\";\nconst cartRoute = \"/cart\";\nconst editClubRoute = \"/editClubInfo\";\nconst addProductRoute = \"/addProduct\";\n\n//style for cart to display number of items\nconst styles = theme => ({\n  badge: {\n    top: '50%',\n    right: -3,\n    // The border color match the background color.\n    border: `2px solid ${\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[900]\n    }`,\n  },\n});\n\n//navbar component\nclass ButtonAppBar extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        open: false,\n        alertMessage: '',\n        currentAdminOf: this.props.vendorID,\n        adminsOf: this.props.adminsOf,\n        openSelect: false,\n        currentVendor: ''        \n      }\n      this.logoutUser = this.logoutUser.bind(this);\n      this.viewCartCheck = this.viewCartCheck.bind(this);\n      this.handleClose = this.handleClose.bind(this);\n      this.handleSelect = this.handleSelect.bind(this);\n      this.handleCloseSelect = this.handleCloseSelect.bind(this);\n      this.handleOpenSelect = this.handleOpenSelect.bind(this);\n    }\n\n    //when navbar loads, get list of all vendors in database\n    //trying to get club names\n    componentDidMount(){\n      const apiURL = \"/api/getVendorInfo\";\n      axios.get(apiURL)\n        .then(res => {\n          //update vendors of redux store\n          this.props.updateVendors(res.data.vendors);\n        })\n        .catch(err => {\n          alert(err);\n        })\n    }\n\n    //handle dialog closing\n    handleClose(){\n      this.setState({\n          open: false\n      })\n    }\n\n    //handle closing select\n    handleCloseSelect(){\n      this.setState({\n          openSelect: false\n      })\n    }\n\n    //handle open select\n    handleOpenSelect(){\n      this.setState({\n        openSelect: true\n      })\n    }\n\n    //logout user when clicking \"Logout\" on navbar\n    //empty shopping cart\n    logoutUser(){\n      if (this.props.loginText === \"Logout\"){\n        this.props.updateLogout();\n        this.props.emptyCart();\n        //display dialog\n        this.setState({\n          open: true,\n          alertMessage: \"Logout successful!\"\n        });\n      }\n    }\n\n    //update value selected from dropdown menu\n    //if user is an admin of multiple clubs, will change what is being updated\n    handleSelect(event){\n      var currentVendorName = event.target.value;\n      var currentVendorID = '';\n\n      //search through list of vendors, check if name selected equals vendor\n      //update vendor name selected and vid\n      for(let i = 0; i < this.props.vendors.length; i++){\n        if(this.props.vendors[i].vendorName === currentVendorName){\n          currentVendorID = this.props.vendors[i].vid;\n          this.props.updateCurrentVendor(currentVendorID, currentVendorName);\n          break;\n        }\n      }\n    }\n\n    //check if user is logged in to view cart\n    viewCartCheck(){\n      //prevent user from using cart until logged in\n      if(this.props.loginValue === false){\n        this.setState({\n          open: true,\n          alertMessage: \"Please login to view cart\"\n        })\n      }\n      \n      //if logged in, get cart and calculate cart's total\n      else{\n        const apiURL = \"/api/getUserCart\";\n        //if user is logged in, get cart info\n        if (this.props.login === true){\n          axios.get(apiURL,{\n            params:{\n              user: this.props.user\n            }\n          })\n          .then(res => {\n            //after getting cart from server, update user's items in redux state\n            alert(\"updating store with new items\");\n            this.props.updateItems(res.data.data);\n          })\n          .catch(err => {\n            alert(err);\n          })\n        }\n      }\n    }\n    \n    render(){\n      const { classes } = this.props;\n      //conditonal rendering\n      //render navbar based on whether user is logged in or not\n      //if user is logged in, hide parts of navbar such as signup and display \"Logout\"\n      if(this.props.loginValue === true && this.props.isAdmin === false){\n        return(\n          <div className= \"root\">\n            <AppBar position=\"static\">\n              <Toolbar>\n                <IconButton className = \"menuButton\" color=\"inherit\" aria-label=\"Menu\">\n                  <MenuIcon />\n                </IconButton>\n                <Typography component = {Link} to = {homeRoute} variant=\"h6\" color=\"inherit\" className = \"grow\">\n                  ECS193 ECommerce\n                </Typography>\n                <div id = \"navLink\">\n                  <Button component = {Link} to = {aboutRoute} color = \"inherit\"> About </Button> \n                  <Button component = {Link} to = {loginRoute} color=\"inherit\" onClick = {this.logoutUser}> {this.props.loginText} </Button> \n                  <Button component = {Link} to = {shopRoute} color = \"inherit\"> Shop </Button>\n                  <Button component = {Link} to = {cartRoute} color = \"inherit\" onClick = {this.viewCartCheck}> \n                    <Badge badgeContent = {this.props.cartLength} color = \"primary\" classes={{ badge: classes.badge }}>\n                      <CartIcon/> \n                    </Badge>\n                  </Button>\n                </div>\n              </Toolbar>\n            </AppBar>\n        </div>\n        );\n      }\n\n      //admin version of navbar after logging in\n      else if (this.props.loginValue === true && this.props.isAdmin === true){\n\n        const vendorList = this.props.adminsOf.map(result => {\n          return <MenuItem key = {result.vid} value = {result.vendorName}> {result.vendorName} </MenuItem>\n        })\n\n        return(\n          <div className= \"root\">\n            <AppBar position=\"static\">\n              <Toolbar>\n                <IconButton className = \"menuButton\" color=\"inherit\" aria-label=\"Menu\">\n                  <MenuIcon />\n                </IconButton>\n                <Typography component = {Link} to = {homeRoute} variant=\"h6\" color=\"inherit\" className = \"grow\">\n                  ECS193 ECommerce\n                </Typography>\n                  <div id = \"navLink\">\n                    <Button color = \"inherit\"> Change Club: </Button> \n                    <Button color = \"inherit\">\n                      <InputLabel className = \"navLabel\" color = \"inherit\"> {this.props.currentVendor} </InputLabel>\n                      <Select color = \"inherit\" value = {this.props.vendorID} open = {this.state.openSelect} onClose = {this.handleCloseSelect} onOpen = {this.handleOpenSelect} onChange = {this.handleSelect}>\n                        {vendorList}\n                      </Select>\n                    </Button>\n                    <Button component = {Link} to = {editClubRoute} color = \"inherit\"> Edit Club Info </Button> \n                    <Button component = {Link} to = {addProductRoute} color = \"inherit\"> Add Items </Button> \n                    <Button component = {Link} to = {aboutRoute} color = \"inherit\"> Edit Items </Button>\n                    <Button component = {Link} to = {aboutRoute} color = \"inherit\"> About </Button> \n                    <Button component = {Link} to = {loginRoute} color=\"inherit\" onClick = {this.logoutUser}> {this.props.loginText} </Button> \n                    <Button component = {Link} to = {shopRoute} color = \"inherit\"> Shop </Button>\n                    <Button component = {Link} to = {cartRoute} color = \"inherit\" onClick = {this.viewCartCheck}>\n                      <Badge badgeContent = {this.props.cartLength} color = \"primary\" classes={{ badge: classes.badge }}>\n                        <CartIcon/> \n                      </Badge>\n                    </Button>\n                  </div>\n                  <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\n                        <DialogContent>\n                            <DialogContentText id = \"alert-dialog-description\">\n                              {this.state.alertMessage}\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick = {this.handleClose} color = \"primary\">\n                                Ok\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n              </Toolbar>\n            </AppBar>\n          </div>\n        );\n      }\n\n      else{\n        return(\n          <div className= \"root\">\n            <AppBar position=\"static\">\n              <Toolbar>\n                <IconButton className = \"menuButton\" color=\"inherit\" aria-label=\"Menu\">\n                  <MenuIcon />\n                </IconButton>\n                <Typography component = {Link} to = {homeRoute} variant=\"h6\" color=\"inherit\" className = \"grow\">\n                  ECS193 ECommerce\n                </Typography>\n                  <div id = \"navLink\">\n                    <Button component = {Link} to = {aboutRoute} color = \"inherit\"> About </Button> \n                    <Button component = {Link} to = {signupRoute} color = \"inherit\"> Sign Up </Button> \n                    <Button component = {Link} to = {loginRoute} color=\"inherit\" onClick = {this.logoutUser}> {this.props.loginText} </Button> \n                    <Button component = {Link} to = {shopRoute} color = \"inherit\"> Shop </Button>\n                    <Button color = \"inherit\" onClick = {this.viewCartCheck}> <CartIcon/> </Button>\n                  </div>\n                  <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\n                        <DialogContent>\n                            <DialogContentText id = \"alert-dialog-description\">\n                              {this.state.alertMessage}\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick = {this.handleClose} color = \"primary\">\n                                Ok\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n              </Toolbar>\n            </AppBar>\n        </div>\n        );\n      }\n    }\n  }\n\n  //redux\n\n  //dispatch action to reducer\n  const mapDispatchToProps = dispatch => {\n    return{\n        //update store that user logged out\n        updateLogout: () => dispatch({\n          type: actions.LOGGED_OUT\n        }),\n\n        //update store cart is empty\n        emptyCart: () => dispatch({\n          type: actions.EMPTY_CART\n        }),\n\n        //update vendors\n        updateVendors: (response) => dispatch({\n          type: actions.GET_VENDORS,\n          vendors: response\n        }),\n\n        //update vendor id\n        updateCurrentVendor: (vendorID ,vendorName) => dispatch({\n          type: actions.UPDATE_VENDOR_ID,\n          vid: vendorID,\n          vendor: vendorName\n        })\n    }\n  }\n\n  //obtain state from store as props for component\n  //get login value, login text, and cart length\n  const mapStateToProps = state => {\n    return{\n        loginValue: state.auth.login,\n        loginText: state.auth.text,\n        user: state.auth.user,\n        isAdmin: state.auth.isAdmin,\n        cartLength: state.cart.items.length,\n        items: state.cart.items,\n        adminsOf: state.auth.adminsOf,\n        vendorID: state.auth.vendorID,\n        vendors: state.vendor.vendors,\n        currentVendor: state.auth.currentVendor\n    }\n  }\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withStyles(styles)(ButtonAppBar));\n","import React, { Component } from 'react';\nimport './ShopItem.css';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport actions from '../../store/actions';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport AddCircle from '@material-ui/icons/Add';\nimport RemoveCircle from '@material-ui/icons/Remove';\nimport Fab from '@material-ui/core/Fab';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { DialogActions } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport {Link} from 'react-router-dom';\nimport { test } from '../../images/test_shirt1.png';\n\n//component to display product info\nclass ShopItem extends Component {\n  constructor(props){\n    super(props);\n\n    //initial state of products\n    this.state = {\n      name: this.props.productName,\n      price: this.props.productPrice,\n      pid: this.props.pid,\n      amtPurchased: 1,\n      vendorID: this.props.vendorID,\n      open: false,\n      alertMessage: ''\n    }\n\n    //bind functions to component\n    this.addItem = this.addItem.bind(this);\n    this.addQuantity = this.addQuantity.bind(this);\n    this.removeQuantity = this.removeQuantity.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.updateVendor = this.updateVendor.bind(this);\n  }\n\n  componentDidMount(){\n    console.log(this.props.vendorID);\n  }\n\n  //handle dialog closing\n  handleClose(){\n    this.setState({\n        open: false\n    })\n  }\n\n  //update vendor in redux store\n  updateVendor(){\n    var viewVendor = this.state.vendorID;\n    console.log(\"trying to update vendor \", viewVendor);\n    this.props.updateVendor(viewVendor);\n  }\n\n  //function to update cart of user\n  //add item to user's cart\n  addItem(){\n    //check if user is logged in\n    //only allow user to add to cart if logged in\n    if(this.props.login === false){\n      this.setState({\n        open: true,\n        alertMessage: \"Please login to add to cart!\"\n      })\n    }\n\n    else{\n      //update user's cart on server\n      var apiURL = \"http://localhost:4000/api/getUserCart/addItems\";\n      axios.post(apiURL, {\n        params:{\n          user: this.props.user,\n          pid: this.state.pid,\n          amtPurchased: this.state.amtPurchased,\n          vendorID: this.state.vendorID\n        }\n      })\n      .then(res => {\n        if(res.data.success === true){\n          //after adding to item, get updated cart\n          const getCartURL = \"http://localhost:4000/api/getUserCart\";\n          axios.get(getCartURL, {\n            params:{\n              user: this.props.user\n            }\n          })\n          .then(res => {\n            //after getting cart info, update redux store container\n            this.props.updateItems(res.data.data);\n            this.setState({\n              open: true,\n              alertMessage: \"Item added to cart!\"\n            });\n          })\n          .catch(err => {\n            alert(err);\n          })\n        }\n      })\n      .catch(err => {\n        alert(err);\n      })\n    }\n  } //end of add item\n\n  //add quantity purchased\n  addQuantity(){\n    var currentQuantity = this.state.amtPurchased;\n    currentQuantity += 1;\n    this.setState({\n      amtPurchased: currentQuantity\n    });\n  }\n\n  //remove quantity purchased\n  removeQuantity(){\n    var currentQuantity = this.state.amtPurchased;\n    //can't have negative amount of items selected\n    if(currentQuantity <= 1){\n      alert(\"Must have at least one item\");\n    }\n\n    else{\n      currentQuantity -= 1;\n      this.setState({\n        amtPurchased: currentQuantity\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Grid item xs = {4} spacing = {2}>\n      <div className = \"centerPage\">\n     \n              <div className = \"box\">\n              <div className = \"center\">\n        <img src={require('../../images/test_shirt1.png')} width=\"80%\" height=\"80%\"/>\n        \n        </div>\n        </div>\n      {/* <Card id = \"background\" className = \"smallCard\">\n      <CardContent> */}\n                {/* <Typography gutterBottom variant=\"h5\" component=\"h2\"> */}\n                <div className = \"resizing\">\n               <h5>\n                  {this.props.productName}\n                  </h5>\n                {/* </Typography> */}\n                \n                <p>\n               \n                ${this.props.productPrice}\n                \n                {/* Stock: {this.props.stock} */}\n                \n                {/* Info: {this.props.productInfo} */}\n\n                {/* <Button id = \"test\" onClick = {this.removeQuantity}>\n                 -\n                </Button>\n                \n               {this.state.amtPurchased}\n                \n                 <Button id = \"test\" onClick = {this.addQuantity}>\n                  +\n                 </Button> */}\n              \n\n          <Button size=\"small\" color=\"primary\" onClick = {this.addItem}>\n              Add To Cart\n             </Button>\n\n             <Button size=\"small\" color=\"primary\" onClick = {this.updateVendor}>\n             <Link to = \"/vendorProducts\"> More From Vendor </Link>\n               </Button>\n               \n               </p>\n               </div>\n              {/* </CardContent>\n      </Card> */}\n      </div>\n      </Grid>\n\n        // <Grid item xs = {4} spacing = {2}> \n        // {/* <Grid container item xs={12} spacing={24}></Grid> */}\n        //   <Card className= \"card\">\n        //     <CardActionArea>\n        //       <CardMedia className = \"media\" />\n        //       <div className=\"resize\">\n        //       <img src={require('../../images/test_shirt1.png')} width=\"60%\" height=\"60%\"/>\n        //       </div>\n        //       {/* <img src = {test}/> */}\n        //       <CardContent>\n        //         {/* <Typography gutterBottom variant=\"h5\" component=\"h2\"> */}\n        //        <h5>\n        //           {this.props.productName}\n        //           </h5>\n        //         {/* </Typography> */}\n        //         <Typography component=\"p\">\n        //           Price: ${this.props.productPrice}\n        //         </Typography>\n        //         <Typography component=\"p\">\n        //           Stock: {this.props.stock}\n        //         </Typography>\n        //         <Typography component=\"p\">\n        //           Info: {this.props.productInfo}\n        //         </Typography>\n        //       </CardContent>\n        //     </CardActionArea>\n        //     <CardActions>\n        //         <Button id = \"test\" onClick = {this.removeQuantity}>\n        //          -\n        //         </Button>\n        //         <div className= \"quantity\">\n        //         {this.state.amtPurchased}\n        //         </div>\n        //         <Button id = \"test\" onClick = {this.addQuantity}>\n        //          +\n        //         </Button>\n              \n\n        //       <Button size=\"small\" color=\"primary\" onClick = {this.addItem}>\n        //         Add To Cart\n        //       </Button>\n\n        //       <Button size=\"small\" color=\"primary\" onClick = {this.updateVendor}>\n        //         <Link to = \"/vendorProducts\"> More From Vendor </Link>\n        //       </Button>\n\n        //       <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\n        //         <DialogContent>\n        //           <DialogContentText id = \"alert-dialog-description\">\n        //             {this.state.alertMessage}\n        //           </DialogContentText>\n        //         </DialogContent>\n        //         <DialogActions>\n        //           <Button onClick = {this.handleClose} color = \"primary\">\n        //             Ok\n        //           </Button>\n        //         </DialogActions>\n        //       </Dialog>\n        //     </CardActions>\n        //   </Card>\n        // </Grid>\n    \n    )\n  }\n}\n\n//obtain state from store as props for component\n//get login value and user email\nconst mapStateToProps = state => {\n  return{\n      user: state.auth.user,\n      login: state.auth.login\n  }\n}\n\n//dispatch action to reducer\n//update redux state of current cart\nconst mapDispatchToProps = dispatch => {\n  return{\n      //get user's cart from state after logging in\n      updateItems: (response) => dispatch({\n        type: actions.GET_CART,\n        cart: response\n      }),\n\n      updateVendor: (newVendor) => dispatch({\n        type: actions.GET_VENDOR_PRODUCTS,\n        vendor: newVendor\n      })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopItem);\n","import React, { Component } from 'react';\r\nimport './ShopView.css';\r\nimport ShopItem from '../ShopItem/ShopItem';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\n\r\nclass ShopView extends Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  //get products from server after mounting to screen\r\n  componentDidMount(){\r\n    //const apiURL = \"http://localhost:4000/api/getAllProducts\";\r\n    const apiURL = \"/api/getAllProducts\";\r\n    //get all products from server\r\n    //update state of view to obtain items\r\n    axios.get(apiURL)\r\n      .then(res => {\r\n        //update product state in redux store\r\n        console.log(res.data);\r\n        this.props.updateProducts(res.data.data);\r\n\r\n        //after getting products, get list of vendors\r\n        const vendorsURL = \"/api/getVendorInfo\";\r\n        axios.get(vendorsURL)\r\n          .then(res => {\r\n            console.log(res.data);\r\n            this.props.updateVendors(res.data.vendors);\r\n          })\r\n          .catch(err => {\r\n            alert(\"error getting vendors\");\r\n          })\r\n      })\r\n      .catch(err => {\r\n        alert(\"Server error retrieving items\");\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const items = this.props.products.map(result => {\r\n      return <ShopItem key = {result.pid} vendorID = {result.vid} pid = {result.pid} productName = {result.productName} productPrice = {result.productPrice} stock = {result.stock} productInfo = {result.productInfo} />\r\n    });\r\n\r\n    return (\r\n      <div className = \"grow\">\r\n        <Grid container direction=\"column\" justify=\"center\"alignContent = \"center\" alignItems=\"center\">\r\n          <h1> Shop </h1>\r\n        </Grid>\r\n\r\n        <Grid container spacing={24} direction=\"row\" justify=\"flex-start\" alignItems=\"center\" justify-xs-space-evenly>\r\n          {items}\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//redux\r\n\r\n//dispatch action to reducer\r\n//update items from server to become state of store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n      updateProducts: (products) => dispatch({\r\n          type: actions.GET_PRODUCTS,\r\n          items: products\r\n      }),\r\n\r\n      updateVendors: (currentVendors) => dispatch({\r\n        type: actions.GET_VENDORS,\r\n        vendors: currentVendors\r\n      })\r\n  }\r\n}\r\n\r\n//get items from products state of store\r\n//obtain state from store as props for component\r\nconst mapStateToProps = state => {\r\n  return{\r\n      products: state.getAllItems.products\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopView);\r\n","import React, { Component } from 'react';\r\nimport './Shop.css';\r\nimport ShopView from '../ShopView/ShopView';\r\n\r\nexport default class Shop extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <ShopView/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './CartItem.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\n\r\n//component to display cart objects\r\nclass CartItem extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    //store product id PID to reference for item removal\r\n    this.state = {\r\n      pid: this.props.pid,\r\n      vid: this.props.vendorID\r\n    }\r\n    this.removeItem = this.removeItem.bind(this);\r\n  }\r\n\r\n  //remove item from user's cart\r\n  removeItem(){\r\n    const apiURL = \"/api/getUserCart/deleteItems\";\r\n    axios.post(apiURL, {\r\n      params:{\r\n        user: this.props.user,\r\n        pid: this.state.pid\r\n      }\r\n    })\r\n    .then(res => {\r\n      const getCart = \"/api/getUserCart\";\r\n      //after successful deletion, get updated user's cart\r\n      axios.get(getCart, {\r\n        params:{\r\n          user: this.props.user\r\n        }\r\n      })\r\n      .then(res => {\r\n        //after removing item from cart, update cart on server\r\n        this.props.updateItems(res.data.data);\r\n        //get total from items\r\n        var currentCart = res.data.data;\r\n        var priceTotal = 0;\r\n        \r\n        //if cart is empty, total price is $0\r\n        if(currentCart.length === 0){\r\n          console.log(\"cart is empty\");\r\n          this.props.updateTotal(priceTotal);\r\n        }\r\n\r\n        //if there are items, calculate total price\r\n        else{\r\n          console.log(\"cart is not empty\");\r\n          for(let i = 0; i < currentCart.length; i++){\r\n            priceTotal += Number(currentCart[i].totalPrice);\r\n          }\r\n          console.log(priceTotal);\r\n          this.props.updateTotal(priceTotal);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        alert(err);\r\n      })\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid item xs>\r\n        <Card className= \"card\">\r\n          <CardActionArea>\r\n            <CardMedia className = \"media\"/>\r\n            <CardContent>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                {this.props.productName}\r\n              </Typography>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                Amount: {this.props.amtPurchased}\r\n              </Typography>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                Price: ${this.props.productPrice}\r\n              </Typography>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                Total Price: ${this.props.totalPrice}\r\n              </Typography>\r\n            </CardContent>\r\n          </CardActionArea>\r\n          <CardActions>\r\n            <Button size=\"small\" color=\"primary\" onClick = {this.removeItem}>\r\n              Remove Item\r\n            </Button>\r\n            <Button size=\"small\" color=\"primary\">\r\n              Add Item\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart from store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    updateItems: (response) => dispatch({\r\n      type: actions.GET_CART,\r\n      cart: response\r\n    }),\r\n\r\n    //update store of cart total\r\n    updateTotal: (sum) => dispatch({\r\n      type: actions.UPDATE_TOTAL,\r\n      total: sum\r\n    })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CartItem);\r\n","import React, { Component } from 'react';\r\nimport './Checkout.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport PaypalExpressBtn from 'react-paypal-express-checkout';\r\nimport axios from 'axios';\r\n\r\n//styles for checkout button\r\nconst styles = theme => ({\r\n  margin: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing.unit,\r\n  },\r\n});\r\n\r\n//calculate total price of user's cart and allow user to checkout\r\n//get user's cart info from state\r\n//state consists of information needed for paypal checkout\r\nclass Checkout extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      total: this.props.total,\r\n      env: \"sandbox\",\r\n      currency: \"USD\",\r\n      client: {\r\n        sandbox: 'AQRbJx9R02PGD4hvGRQlGL48Ri1mvf4c7qd6LzuNHqmbtothVDp-vI6K7qatzi3dgYcg4tkp5lpXHBye',\r\n        production: 'YOUR-PRODUCTION-APP-ID',\r\n      },\r\n      paymentOptions: {\r\n        \"intent\": \"sale\",\r\n        // \"payer\": {\r\n        //   \"payer_info\": {  // payer_info not saved to paypal transaction, will need to send email to vendor with transaction ID for cross reference\r\n        //     \"email\": \"tst@gmail.com\",\r\n        //     \"first_name\": \"a\",\r\n        //     \"last_name\": \"d\"\r\n        //   },\r\n        //   \"payment_method\": \"paypal\"\r\n        // },\r\n        \"redirect_urls\": {\r\n          \"return_url\": \"www.google.com\", \r\n          \"cancel_url\": \"www.reddit.com\",\r\n        },\r\n        \"transactions\": [],\r\n        \"note_to_payer\": \"Pickup the sale at this location:\"  // does a popup, not incuded in transaction on paypal\r\n      },\r\n      cartTotal: this.props.total\r\n    }\r\n  }\r\n\r\n  //convert items in cart to array of paypal objects for payment option\r\n  componentDidMount(){\r\n    //array to store as payment option\r\n    var paypalTransactionsArray= [];\r\n    var paypalTransactions = {};\r\n    paypalTransactions.item_list = {};\r\n    paypalTransactions.amount = {};\r\n    paypalTransactions.description = \"Sale\";\r\n\r\n    var paypalItems = [];\r\n\r\n    //go through each item in redux store\r\n    for(let i = 0; i < this.props.cart.length; i++){\r\n      let paypalItem = {};\r\n\r\n      //construct new paypal object based on each item in Redux store container\r\n      paypalItem.name = this.props.cart[i].productName;\r\n      paypalItem.price = String(this.props.cart[i].productPrice.toFixed(2));\r\n      paypalItem.currency = this.state.currency;\r\n      paypalItem.quantity = String(this.props.cart[i].amtPurchased);\r\n\r\n      //store \r\n      paypalItems.push(paypalItem);\r\n    }\r\n\r\n    paypalTransactions.item_list.items = paypalItems;\r\n    paypalTransactions.amount.currency = this.state.currency;\r\n    paypalTransactions.amount.total = String(this.props.total);\r\n\r\n    //update payment options to be list of paypal items\r\n    paypalTransactionsArray.push(paypalTransactions);\r\n    this.state.paymentOptions.transactions = paypalTransactionsArray;\r\n  }\r\n\r\n  //update payment option on update\r\n  componentDidUpdate(){\r\n    this.state.paymentOptions.transactions[0].amount.total = this.props.total;\r\n    this.state.paymentOptions.transactions[0].amount.total = String(this.props.total);\r\n  }\r\n\r\n  onSuccess = (payment) => {\r\n    console.log(\"Payment successful!\", payment);\r\n    this.props.updateSelectedVendor(this.props.cart[0].vid);\r\n\r\n    const apiURL = \"/api/orders\";\r\n\r\n    //make post request to orders\r\n    axios.post(apiURL, {\r\n      params:{\r\n        items: this.state.paymentOptions.transactions[0].item_list.items,\r\n        totalPrice: String(this.props.total),\r\n        vid: this.props.cart[0].vid,\r\n        user: this.props.user,\r\n        paymentID: payment.paymentID,\r\n        payerID: payment.payerID\r\n      }\r\n    })\r\n    .then(res => {\r\n      //on successful payment\r\n      if(res.data.success === true){\r\n        alert(res.data.message);\r\n\r\n        //clear cart on server\r\n        const clearcartURL = \"/api/getUserCart/clearCart\";\r\n        axios.delete(clearcartURL, {\r\n          params:{\r\n            user: this.props.user\r\n          }\r\n        })\r\n        .then(res => {\r\n          if(res.data.success === true){\r\n            //when payment is successfully processed, clear cart and set total to 0\r\n            this.props.emptyCartOnPayment();\r\n            this.props.clearTotalOnPayment(0);\r\n          }\r\n          else{\r\n            alert(\"error with server\");\r\n          }\r\n        })\r\n        .catch(err => {\r\n          alert(err);\r\n        })\r\n      }\r\n      else{\r\n        alert(\"Error with sending order\");\r\n      }\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n\r\n    // You can bind the \"payment\" object's value to your state or props or whatever here, please see below for sample returned data\r\n    // alert('Transaction completed by ' + payment.email);\r\n    \r\n    // TODO, payment contains info, send it to backend\r\n    // payment.payerID\r\n    // payment.paymentID\r\n\r\n    // payment.returnUrl can be used to route back to somewhere\r\n    // or route ourselves\r\n  }\r\n\r\n  onCancel = (data) => {\r\n    // The user pressed \"cancel\" or closed the PayPal popup\r\n    console.log('Payment cancelled!', data);\r\n    // You can bind the \"data\" object's value to your state or props or whatever here, please see below for sample returned data\r\n  }\r\n\r\n  onError = (err) => {\r\n    // The main Paypal script could not be loaded or something blocked the script from loading\r\n    console.log(\"Error!\", err);\r\n    alert(err);\r\n    // Because the Paypal's main script is loaded asynchronously from \"https://www.paypalobjects.com/api/checkout.js\"\r\n    // => sometimes it may take about 0.5 second for everything to get set, or for the button to appear\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return(\r\n      <div>\r\n        <Grid container direction=\"row\">\r\n          <h1> Total: ${this.props.total} </h1>\r\n          <PaypalExpressBtn env={this.state.env} client={this.state.client} currency={this.state.currency}\r\n            total={Number(this.props.total)} onError={this.onError} onSuccess={this.onSuccess}\r\n            onCancel={this.onCancel} shipping={1} paymentOptions={this.state.paymentOptions} />\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n    total: state.cart.total,\r\n    cart: state.cart.items\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart from store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    updateItems: (response) => dispatch({\r\n      type: actions.GET_CART,\r\n      cart: response\r\n    }),\r\n\r\n    updateSelectedVendor: (currentVendor) => dispatch({\r\n      type: actions.GET_VENDOR_PRODUCTS,\r\n      vendor: currentVendor\r\n    }),\r\n\r\n    emptyCartOnPayment: () => dispatch({\r\n      type: actions.EMPTY_CART\r\n    }),\r\n\r\n    clearTotalOnPayment: (value) => dispatch({\r\n      type: actions.UPDATE_TOTAL,\r\n      total: value\r\n    })\r\n  }\r\n}\r\n\r\nCheckout.PropTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Checkout));\r\n","import React, { Component } from 'react';\r\nimport './Cart.css';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CartItem from '../CartItem/CartItem';\r\nimport Checkout from '../Checkout/Checkout';\r\nimport { Link } from 'react-router-dom';\r\nimport EmptyItem from '../EmptyItem/EmptyItem';\r\n\r\n\r\n//component to display user's cart\r\nclass Cart extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      total: 0\r\n    }\r\n  }\r\n\r\n  //get cart from server for user\r\n  componentDidMount(){\r\n    //get total from items\r\n    var currentCart = this.props.items;\r\n    var priceTotal = 0;\r\n\r\n    //if cart is empty, total price is $0\r\n    if(currentCart.length === 0){\r\n      this.props.updateTotal(priceTotal);\r\n    }\r\n\r\n    //if there are items, calculate total price\r\n    else{\r\n      //go through each item in cart and sum up price\r\n      for(let i = 0; i < currentCart.length; i++){\r\n        priceTotal += Number(currentCart[i].totalPrice);\r\n      }\r\n      priceTotal = priceTotal.toFixed(2);\r\n      this.setState({\r\n        total: priceTotal\r\n      });\r\n      this.props.updateTotal(priceTotal);\r\n    }\r\n  }\r\n\r\n  //render cart items to cart view\r\n  render() {\r\n  \r\n    //render items in cart\r\n    if (this.props.items.length > 0){\r\n\r\n      //map each entry in item array to render a component\r\n      const cart = this.props.items.map(result => {\r\n        return <CartItem key = {result.productName} pid = {result.pid} vendorID = {result.vid} productName = {result.productName} amtPurchased = {result.amtPurchased} productPrice = {result.productPrice}  totalPrice = {result.totalPrice} />\r\n      });\r\n\r\n      return(\r\n        <div>\r\n          <Grid container direction=\"column\">\r\n            <h1> <Link to = \"/orderHistory\"> Order History </Link> </h1>\r\n            <h1> Current Cart: </h1>\r\n          </Grid>\r\n  \r\n          <Grid container direction=\"column\" justify-xs-space-evenly>\r\n            <Checkout total = {this.state.total}/>\r\n            {cart}\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    //empty cart case\r\n    else{\r\n      return(\r\n        <div>\r\n          <Grid container direction=\"column\">\r\n            <h1> <Link to = \"/orderHistory\"> Order History </Link> </h1>\r\n            <h1> Current Cart: </h1>\r\n          </Grid>\r\n  \r\n          <Grid container direction=\"column\" justify-xs-space-evenly>\r\n            <Checkout total = {this.state.total}/>\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    updateItems: (response) => dispatch({\r\n      type: actions.GET_CART,\r\n      cart: response\r\n    }),\r\n\r\n    //update store of cart total\r\n    updateTotal: (sum) => dispatch({\r\n      type: actions.UPDATE_TOTAL,\r\n      total: sum\r\n    })\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Cart);\r\n","import React, { Component } from 'react'\r\n\r\nexport default class EmptyItem extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './VendorView.css';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport ShopItem from '../ShopItem/ShopItem';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass VendorView extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      products: [],\r\n      vendorName: '',\r\n      bio: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    const apiURL = \"/api/getVendorProducts\";\r\n    axios.get(apiURL, {\r\n      params:{\r\n        vendor: this.props.vendor\r\n      }\r\n    })\r\n    .then(res => {\r\n      console.log(\"getting vendor products \", res.data);\r\n\r\n      var currentVendorName = '';\r\n      var currentVendorBio = '';\r\n\r\n      //search for matching vendor id in array of vendors of redux store\r\n      for(let i = 0; i < this.props.vendors.length; i++){\r\n        if(this.props.vendors[i].vid === this.props.vendor){\r\n          //update component state, list of products from vendor\r\n          this.setState({\r\n            products: res.data.data,\r\n            vendorName: this.props.vendors[i].vendorName,\r\n            bio: this.props.vendors[i].bio\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const items = this.state.products.map(result => {\r\n      return <ShopItem key = {result.pid} vendorID = {result.vid} pid = {result.pid} productName = {result.productName} productPrice = {result.productPrice} stock = {result.stock} productInfo = {result.productInfo} />\r\n    });\r\n\r\n    return (\r\n      <div className = \"grow\">\r\n        <Grid container direction=\"column\" justify=\"center\"alignContent = \"center\" alignItems=\"center\">\r\n          <h1> {this.state.vendorName} </h1>\r\n          <h3> Bio: {this.state.bio} </h3>\r\n        </Grid>\r\n\r\n        <Grid container spacing={24} direction=\"row\" justify=\"center\" alignItems=\"center\" justify-xs-space-evenly>\r\n          {items}\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//redux\r\n\r\n//dispatch action to reducer\r\n//update items from server to become state of store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n      updateProducts: (products) => dispatch({\r\n          type: actions.GET_PRODUCTS,\r\n          items: products\r\n      })\r\n  }\r\n}\r\n\r\n//get items from products state of store\r\n//obtain state from store as props for component\r\nconst mapStateToProps = state => {\r\n  return{\r\n    vendor: state.vendor.vendor,\r\n    vendors: state.vendor.vendors\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VendorView);\r\n","import React, { Component } from 'react';\r\nimport './VendorSignup.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { createHashHistory, createBrowserHistory } from 'history';\r\nconst history = createBrowserHistory();\r\n\r\n//vendor confirmation\r\n\r\n//insert email for verification\r\n//dropdown menu to select clubs\r\n//insert access code\r\n\r\nclass VendorSignup extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      code: '',\r\n      vendor: 'Select Club Name',\r\n      open: false,\r\n      value: '',\r\n      vendorID: '',\r\n      vendors: []\r\n    };\r\n    this.sendSignup = this.sendSignup.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.handleOpen = this.handleOpen.bind(this);\r\n    this.handleSelect = this.handleSelect.bind(this);\r\n  }\r\n\r\n  //store list of active vendors from database\r\n  componentDidMount(){\r\n    const apiURL = \"/api/getVendorInfo\";\r\n    axios.get(apiURL)\r\n      .then(res => {\r\n        this.setState({\r\n          vendors: res.data.vendors\r\n        })\r\n      })\r\n  }\r\n\r\n  //close select\r\n  handleClose(){\r\n    this.setState({\r\n      open: false\r\n    })\r\n  }\r\n\r\n  //open select\r\n  handleOpen(){\r\n    this.setState({\r\n      open: true\r\n    })\r\n  }\r\n\r\n  //update value selected\r\n  handleSelect(event){\r\n    var currentVendorID = event.target.value;\r\n    var currentVendorName = '';\r\n    //search through list of available vendors\r\n    //save state of selected vendor\r\n    //save vendor id and name of selected vendor\r\n    for(let i = 0; i < this.state.vendors.length; i++){\r\n      if(this.state.vendors[i].vid === currentVendorID){\r\n        currentVendorName = this.state.vendors[i].vendorName;\r\n        this.setState({\r\n          vendorID: currentVendorID,\r\n          vendor: currentVendorName     \r\n        });\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  //send signup to verify admin process\r\n  sendSignup(){\r\n    //add current user to be admin of selected vendor\r\n    const apiURL = \"/api/adminUser/addAdminUser\";\r\n\r\n    axios.post(apiURL, {\r\n      params:{\r\n        user: this.state.email,\r\n        vid: this.state.vendorID,\r\n        adminCode: this.state.code\r\n      }\r\n    })\r\n    .then(res => {\r\n      //if successful, set isAdmin = true\r\n      //login in user\r\n      //redirect back to homepage with admin version of navbar\r\n      if(res.data.success === true){\r\n        //get list of vendors user is an admin of\r\n        //get the vids of vendors in which user is an admin of\r\n        const adminsURL = \"/api/adminUser\";\r\n        axios.get(adminsURL, {\r\n          params:{\r\n            user: this.state.email\r\n          }\r\n        })\r\n        .then(res => {\r\n          if(res.data.success === true){\r\n            //update the user's email, update current admin of which vendor, and update which vendors user is an admin of\r\n            var currentVendor = '';\r\n\r\n            //find matching vendor id, extract vendor name from list of vendors\r\n            for(let i = 0; i < this.props.vendors.length; i++){\r\n              if(this.props.vendors[i].vid === this.state.vendorID){\r\n                currentVendor = this.props.vendors[i].vendorName;\r\n                break;\r\n              }\r\n            }\r\n\r\n            //update redux store\r\n            //update user's email, vendorID currently an admin of, list of vids of an admin of, and name of current\r\n            this.props.updateAdminLogin(this.state.email, this.state.vendorID, res.data.vendors,currentVendor);\r\n            alert(\"Admin verification succesful!\");\r\n\r\n            //redirect user back home\r\n            this.props.history.push('/');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          alert(err);\r\n        })\r\n      }\r\n\r\n      //print why verification didn't work\r\n      else{\r\n        alert(res.data.message);\r\n      }\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const vendorList = this.state.vendors.map(result => {\r\n      return <MenuItem key = {result.vid} value = {result.vid} name = {result.vendorName}> {result.vendorName} </MenuItem>\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <Grid container direction = \"column\" justify = \"center\" alignItems = \"center\">\r\n          <Paper id = \"signupPaperContainer\">\r\n            <h1> Admin Verification </h1>\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Email\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ email: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Access Code\"\r\n                type=\"password\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ code: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            <h5> Select Vendor </h5>\r\n            <div className = \"textForm\" id = \"row\">\r\n              <FormControl id = \"clubForm\">\r\n                <InputLabel> {this.state.vendor} </InputLabel>\r\n                <Select value = {this.state.value} open = {this.state.open} onClose = {this.handleClose} onOpen = {this.handleOpen} onChange = {this.handleSelect}>\r\n                  {vendorList}\r\n                </Select>\r\n              </FormControl>\r\n            </div>\r\n            <Button type = \"submit\" variant = \"contained\" color = \"primary\" onClick = {this.sendSignup}> Verify  </Button>\r\n          </Paper>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n    vendors: state.vendor.vendors\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart from store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    updateAdminLogin: (currentEmail, vendorID, adminsOf, vendor) => dispatch({\r\n      type: actions.ADMIN_LOGGED_IN,\r\n      user: currentEmail,\r\n      vid: vendorID,\r\n      admins: adminsOf,\r\n      currentVendor: vendor\r\n    })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VendorSignup);\r\n","import React, { Component } from 'react';\r\nimport './EditClubInfo.css';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass EditClubInfo extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      bio: '',\r\n      lastUpdate: '',\r\n      lastUpdateUser: '',\r\n      vendorName: ''\r\n    };\r\n\r\n    this.getClubInfo = this.getClubInfo.bind(this);\r\n    this.sendEdit = this.sendEdit.bind(this);\r\n  }\r\n\r\n  //get club info\r\n  getClubInfo(){\r\n    const apiURL = \"/api/adminVendor\";\r\n    axios.get(apiURL, {\r\n      params:{\r\n        user: this.props.user,\r\n        vid: this.props.vendorID\r\n      }\r\n    })\r\n    .then(res => {\r\n      if(res.data.success === true){\r\n        this.setState({\r\n          bio: res.data.bio,\r\n          lastUpdate: res.data.lastUpdate,\r\n          lastUpdateUser: res.data.lastUpdateUser,\r\n          vendorName: res.data.vendorName\r\n        })\r\n      }\r\n      else{\r\n        alert(\"Error getting club info\");\r\n      }\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  //when component loads, get club info from server\r\n  componentDidMount(){\r\n    this.getClubInfo();\r\n  }\r\n\r\n  //update club info on server\r\n  sendEdit(){\r\n    const apiURL = \"/api/adminVendor/editVendorInfo\";\r\n    axios.patch(apiURL, {\r\n      params:{\r\n        user: this.props.user,\r\n        vid: this.props.vendorID,\r\n        vendorName: this.state.vendorName,\r\n        bio: this.state.bio\r\n      }\r\n    })\r\n    .then(res => {\r\n      //if edit was successful, get new info for edited club\r\n      if(res.data.success === true){\r\n        alert(res.data.message);\r\n        this.getClubInfo();\r\n      }\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Grid container direction = \"column\" justify = \"center\" alignItems = \"center\">\r\n          <h1> Edit Club Info </h1>\r\n          <h6> Last Updated: {this.state.lastUpdate} </h6>\r\n          <h6> Last Edited By: {this.state.lastUpdateUser} </h6>\r\n          <form id = \"editClubForm\">\r\n            <TextField\r\n              className = \"inputWidth\"\r\n              label=\"Club Name\"\r\n              value={this.state.vendorName}\r\n              onChange={(event) => this.setState({ vendorName: event.target.value })}          \r\n            />\r\n\r\n            <TextField\r\n              className = \"inputWidth\"\r\n              label=\"Biography\"\r\n              value={this.state.bio}\r\n              id = \"standard-full-width\"\r\n              onChange={(event) => this.setState({ bio: event.target.value })}          \r\n            />\r\n\r\n            <Button variant = \"contained\" color = \"primary\" onClick = {this.sendEdit}> Update Club  </Button>\r\n\r\n          </form>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n    vendorID: state.auth.vendorID\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(EditClubInfo);\r\n","import React, { Component } from 'react';\r\nimport './AddProduct.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nclass AddProduct extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      productName: '',\r\n      productInfo: '',\r\n      productPrice: '',\r\n      stock: ''\r\n    }\r\n    this.addProduct = this.addProduct.bind(this);\r\n  }\r\n\r\n  //add product to vendor's collection in database\r\n  addProduct(){\r\n    const apiURL = \"/api/adminProducts/addNewProduct\";\r\n    axios.post(apiURL, {\r\n      params:{\r\n        vid: this.props.vid,\r\n        user: this.props.user,\r\n        productInfo: this.state.productInfo,\r\n        productName: this.state.productName,\r\n        productPrice: this.state.productPrice,\r\n        stock: this.state.stock\r\n      }\r\n    })\r\n    .then(res => {\r\n      alert(res.data.message);\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Grid container direction = \"column\" justify = \"center\" alignItems = \"center\">\r\n            <h1> Add Product </h1>\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Product Name\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ productName: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Product Info\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ productInfo: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Product Price\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ productPrice: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Product Stock\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ stock: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            <Button variant = \"contained\" color = \"primary\" onClick = {this.addProduct}> Add Product  </Button>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//redux\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n    vid: state.auth.vendorID\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(AddProduct);\r\n","import React, { Component } from 'react';\r\nimport './OrderHistoryItem.css';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\n//import Card from '@material-ui/core/Card';\r\n//import CardActionArea from '@material-ui/core/CardActionArea';\r\n//import CardActions from '@material-ui/core/CardActions';\r\n//import CardContent from '@material-ui/core/CardContent';\r\n//import CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  dividerFullWidth: {\r\n    margin: '5px 0 0 ${theme.spacing.unit * 2}px',\r\n  },\r\n  dividerInset: {\r\n    margin: '5px 0 0 ${theme.spacing.unit * 9}px',\r\n  },\r\n});\r\n\r\n\r\nclass OrderHistoryItem extends Component {\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <List className={classes.root}>\r\n  \r\n        <ListItem>\r\n          <ListItemText primary=\"Date\" secondary= {this.props.orderDate} />\r\n        </ListItem>\r\n  \r\n        <Divider component=\"li\" />\r\n  \r\n        <li>\r\n          <Typography className={classes.dividerFullWidth} color=\"textSecondary\">\r\n          </Typography>\r\n        </li>\r\n  \r\n        <ListItem>\r\n          <ListItemText primary= \"Name\" secondary= {this.props.firstName + ' ' + this.props.lastName} />\r\n        </ListItem>\r\n  \r\n        <Divider component=\"li\" />\r\n  \r\n        <li>\r\n          <Typography className={classes.dividerInset} color=\"textSecondary\">\r\n          </Typography>\r\n        </li>\r\n  \r\n        <ListItem>\r\n          <ListItemText primary=\"Order ID\" secondary= {this.props.oid} />\r\n        </ListItem>\r\n  \r\n        <Divider component=\"li\" />\r\n  \r\n        <li>\r\n          <Typography className={classes.dividerInset} color=\"textSecondary\">\r\n          </Typography>\r\n        </li>\r\n  \r\n        <ListItem>\r\n          <ListItemText primary=\"Paid\" secondary= {this.props.paid} />\r\n        </ListItem>\r\n  \r\n        <Divider component=\"li\" />\r\n  \r\n        <li>\r\n          <Typography className={classes.dividerInset} color=\"textSecondary\">\r\n          </Typography>\r\n        </li>\r\n  \r\n        <ListItem>\r\n          <ListItemText primary=\"Picked Up\" secondary= {this.props.pickedUp} />\r\n        </ListItem>\r\n  \r\n        <Divider component=\"li\" />\r\n  \r\n        <li>\r\n          <Typography className={classes.dividerInset} color=\"textSecondary\">\r\n          </Typography>\r\n        </li>\r\n  \r\n        <ListItem>\r\n          <ListItemText primary=\"Total Price\" secondary= {this.props.totalPrice} />\r\n        </ListItem>\r\n  \r\n  \r\n  \r\n  \t\t</List>\r\n/*      <div>\r\n        <Card className= \"card orderHistoryCard\">\r\n            <CardActionArea>\r\n              <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Date: {this.props.orderDate}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  First Name: {this.props.firstName}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Last Name: {this.props.lastName}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Order ID: {this.props.oid}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Paid: {this.props.paid}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Picked Up: {this.props.pickedUp}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Total Price: ${this.props.totalPrice}\r\n                </Typography>\r\n                \r\n              </CardContent>\r\n            </CardActionArea>\r\n          </Card>\r\n      </div>*/\r\n    )\r\n  }\r\n}\r\n\r\nOrderHistoryItem.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(OrderHistoryItem);\r\n","import React, { Component } from 'react';\r\nimport './OrderHistory.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport OrderHistoryItem from '../OrderHistoryItem/OrderHistoryItem.js';\r\n\r\nclass OrderHistory extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      orders: []\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n    const apiURL = \"/api/orders/getUserOrders\";\r\n\r\n    axios.get(apiURL, {\r\n      params:{\r\n        user: this.props.user\r\n      }\r\n    })\r\n    .then(res => {\r\n      if(res.data.success === true){\r\n        this.setState({\r\n          orders: res.data.orders\r\n        });\r\n      }\r\n\r\n      else{\r\n        alert(res.data.message);\r\n      }\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const orders = this.state.orders.map(order => {\r\n      console.log(order.date);\r\n\r\n\r\n      let convertDate = new Date(order.date);\r\n      let hours = convertDate.getHours();\r\n      let timeOfDay = \"AM\";\r\n\r\n      console.log(\"hours \", hours);\r\n\r\n      if(hours > 12){\r\n        hours = hours -12;\r\n        timeOfDay = \"PM\";\r\n      }\r\n\r\n      hours = String(hours);\r\n\r\n      let minutes = String(convertDate.getMinutes());\r\n\r\n      if(minutes.length === 1){\r\n        minutes = '0' + minutes;\r\n      }\r\n\r\n      let seconds = String(convertDate.getSeconds());\r\n\r\n      let actualDate = convertDate.toDateString() + ' ' + hours + ':' + minutes + ' ' + timeOfDay;\r\n            \r\n      return <OrderHistoryItem orderDate = {actualDate} email = {order.email} firstName = {order.firstName} \r\n            lastName = {order.lastName} oid = {order.oid} paid = {String(order.paid)} pickedUp = {String(order.pickedUp)}\r\n            totalPrice = {order.totalPrice} \r\n            />\r\n    });\r\n\r\n\r\n    if(this.state.orders.length === 0){\r\n      return(\r\n        <div>\r\n          <h1> No orders were made! </h1>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    else{\r\n      return (\r\n        <div>\r\n          <h1> Orders: </h1>\r\n          <Grid container direction = \"column\">\r\n            {orders}\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n    total: state.cart.total,\r\n    cart: state.cart.items\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart from store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    updateItems: (response) => dispatch({\r\n      type: actions.GET_CART,\r\n      cart: response\r\n    })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderHistory);\r\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\nimport About from './components/About/About';\nimport Signup from './components/Signup/Signup';\nimport Home from './components/Home/Home';\nimport Login from './components/Login/Login';\nimport ButtonAppBar from './components/ButtonAppBar/ButtonAppBar';\nimport Shop from './components/Shop/Shop';\nimport Cart from './components/Cart/Cart';\nimport VendorView from './components/VendorView/VendorView';\nimport VendorSignup from './components/VendorSignup/VendorSignup';\nimport EditClubInfo from './components/EditClubInfo/EditClubInfo';\nimport AddProduct from './components/AddProduct/AddProduct';\nimport OrderHistory from './components/OrderHistory/OrderHistory';\n\nimport { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <ButtonAppBar />\n          <Route exact path = \"/\" component = {Home} />\n          <Route exact path = \"/about\" component = {About} />\n          <Route exact path = \"/shop\" component = {Shop}/>\n          <Route exact path = \"/signup\" component = {Signup} />\n          <Route exact path = \"/login\" component = {Login} /> \n          <Route exact path = \"/cart\" component = {Cart}/>\n          <Route exact path = \"/vendorProducts\" component = {VendorView}/>\n          <Route exact path = \"/abcdefg/vendorSignup\" component = {VendorSignup}/>\n          <Route exact path = \"/editClubInfo\" component = {EditClubInfo}/>\n          <Route exact path = \"/addProduct\" component = {AddProduct}/>\n          <Route exact path = \"/orderHistory\" component = {OrderHistory}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import actions from './actions';\r\n\r\n//initial state of login reducer\r\n\r\n//check whether login is true or false\r\n//if logged in, set navbar text to Logout, if logged out set navbar text to Login\r\n//store user email to use with other components\r\nconst initialState = {\r\n    login: false,\r\n    text: \"Login\",\r\n    user: '',\r\n    isAdmin: false,\r\n    vendorID: '',\r\n    adminsOf: [],\r\n    currentVendor: ''\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        //if user is logged in, change state to true\r\n        case actions.LOGGED_IN:\r\n            return{\r\n                //updating state immutably\r\n                //disperse contents of original state object\r\n                ...state,\r\n                //assign login value to true based on payload action name\r\n                //assign email to user's email after logging in\r\n                //return new state object with updated \r\n                login: true,\r\n                text: \"Logout\",\r\n                user: action.user\r\n            }\r\n        //when an admin is logged in\r\n        case actions.ADMIN_LOGGED_IN:\r\n            return{\r\n                ...state,\r\n                login: true,\r\n                text: \"Logout\",\r\n                user:action.user,\r\n                isAdmin: true,\r\n                vendorID: action.vid,\r\n                adminsOf: action.admins,\r\n                currentVendor: action.currentVendor\r\n            }\r\n        //if user logs out, update state\r\n        case actions.LOGGED_OUT:\r\n        return initialState\r\n            // return{\r\n            //     ...state,\r\n            //     login: false,\r\n            //     text: \"Login\",\r\n            //     email: '',\r\n            //     isAdmin: false,\r\n            //     vendorID: '',\r\n            //     adminsOf: state.adminsOf.length = 0,\r\n            //     currentVendor: ''\r\n            // }\r\n        //update vendor id of user if admin\r\n        case actions.UPDATE_VENDOR_ID:\r\n            return{\r\n              ...state,\r\n              vendorID: action.vid,\r\n              currentVendor: action.vendor\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import actions from './actions';\r\n\r\n//initial state of shop view\r\nconst initialState = {\r\n  products: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case actions.GET_PRODUCTS:\r\n      //copy initial state\r\n      //update products array to be array retrieved from GET request to server\r\n      //action.items is payload to update state\r\n      return{\r\n        ...state,\r\n        products: action.items\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import actions from './actions';\r\n//reducer for managing state of cart for a logged in user\r\n\r\n//initial state of cart reducer\r\nconst initialState = {\r\n  items: [],\r\n  total: 0\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  //action to get cart items stored on server\r\n  switch(action.type){\r\n    case actions.GET_CART:\r\n      return{\r\n        ...state,\r\n        //get cart items from server, assign to state\r\n        items: action.cart\r\n      }\r\n\r\n    //add item to cart, update state\r\n    case actions.ADD_CART:\r\n      return{\r\n        ...state,\r\n        items: state.items.concat(action.item)\r\n      }\r\n\r\n    //remove item from cart, update state\r\n    case actions.REMOVE_CART:\r\n      return{\r\n\r\n      }\r\n\r\n    //empty cart, either on logout or checkout\r\n    case actions.EMPTY_CART:\r\n      return{\r\n        ...state,\r\n        items: state.items.length = 0\r\n      }\r\n\r\n    case actions.UPDATE_TOTAL:\r\n      return{\r\n        ...state,\r\n        total: action.total\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import actions from './actions';\r\n\r\nconst initialState = {\r\n  vendor: '',\r\n  vendors: []\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case actions.GET_VENDOR_PRODUCTS:\r\n      return{\r\n        ...state,\r\n        vendor: action.vendor\r\n      }\r\n\r\n    case actions.GET_VENDORS:\r\n      return{\r\n        ...state,\r\n        vendors: action.vendors\r\n      }\r\n\r\n  \r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default reducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import redux\nimport {createStore, combineReducers} from 'redux';\nimport {Provider} from 'react-redux';\n//store redux state\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\n//redux reducers\nimport loginReducer from './store/loginReducer';\nimport getProductsReducer from './store/getProductsReducer';\nimport cartReducer from './store/cartReducer';\nimport vendorReducer from './store/vendorReducer';\n\n//create store for redux state management\n//store stores state of application\nconst rootReducer = combineReducers({\n  auth: loginReducer,\n  getAllItems: getProductsReducer,\n  cart: cartReducer,\n  vendor: vendorReducer\n});\n\n//redux persistConfig\nconst persistConfig = {\n  key: 'root',\n  storage: storage,\n  stateReconciler: autoMergeLevel2\n};\n\nconst pReducer = persistReducer(persistConfig, rootReducer);\nconst store = createStore(pReducer);\nconst persistor = persistStore(store);\n\n//Provider tag allows all components to have access to store\nReactDOM.render(<Provider store = {store}> \n                  <PersistGate loading ={null} persistor = {persistor}>\n                    <App/> \n                  </PersistGate>\n                </Provider>, document.getElementById('root'));\n\n// hot module reloading used to reload app in browser w/out performing a page\n// refresh. Useful when wanting to test w/out losing console.log() s\nif (module.hot) {\n  module.hot.accept()\n}\n\nserviceWorker.unregister();\n"],"sourceRoot":""}