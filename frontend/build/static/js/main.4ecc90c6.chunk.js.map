{"version":3,"sources":["images/test_shirt1.png","images/dog1.jpg","images/dog2.jpg","images/dog3.jpg","components/About/About.js","components/Signup/Signup.js","components/Home/Home.js","store/actions.js","components/Login/Login.js","components/ButtonAppBar/ButtonAppBar.js","components/ShopItem/ShopItem.js","components/ShopView/ShopView.js","components/Shop/Shop.js","components/CartItem/CartItem.js","components/Checkout/Checkout.js","components/Cart/Cart.js","components/VendorView/VendorView.js","components/VendorSignup/VendorSignup.js","components/EditClubInfo/EditClubInfo.js","components/AddProduct/AddProduct.js","components/OrderHistoryItem/OrderHistoryItem.js","components/OrderHistory/OrderHistory.js","App.js","serviceWorker.js","store/loginReducer.js","store/getProductsReducer.js","store/cartReducer.js","store/vendorReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","Grid_default","container","direction","justify","alignContent","alignItems","id","Component","Signup","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","firstName","lastName","email","password","confirmPassword","open","progressValue","progressVariant","responseMessage","success","sendSignup","bind","assertThisInitialized","handleClose","setState","history","push","_this2","axios","post","params","then","res","data","message","catch","err","alert","_this3","classes","Paper_default","className","TextField_default","label","required","onChange","event","target","value","type","Button_default","variant","color","onClick","CircularProgress_default","defineProperty","size","progress","Dialog_default","onClose","aria-describedby","DialogContent_default","DialogContentText_default","index_es","withStyles","theme","margin","spacing","unit","react_alice_carousel_default","autoPlay","autoPlayInterval","buttonsDisabled","src","image1","image2","image3","actions","LOGGED_IN","LOGGED_OUT","GET_PRODUCTS","ADMIN_LOGGED_IN","GET_CART","ADD_CART","REMOVE_CART","EMPTY_CART","UPDATE_TOTAL","GET_VENDOR_PRODUCTS","GET_VENDORS","UPDATE_VENDOR_ID","Login","getCart","sendLogin","get","user","updateItems","vendors","length","updateLogin","console","log","currentVendorID","vid","currentVendors","currentVendorName","vendorName","updateAdminLogin","login","_this4","propsTypes","PropTypes","object","isRequired","connect","items","cart","auth","vendor","dispatch","currentEmail","response","vendorID","adminsOf","admins","currentVendor","ButtonAppBar","alertMessage","currentAdminOf","openSelect","logoutUser","viewCartCheck","handleSelect","handleCloseSelect","handleOpenSelect","updateVendors","loginText","updateLogout","emptyCart","i","updateCurrentVendor","loginValue","isAdmin","AppBar_default","position","Toolbar_default","IconButton_default","aria-label","Menu_default","Typography_default","component","Link","to","Badge_default","badgeContent","cartLength","badge","ShoppingCart_default","vendorList","map","result","MenuItem_default","key","InputLabel_default","Select_default","onOpen","text","top","right","border","concat","palette","grey","ShopItem","name","productName","price","productPrice","pid","amtPurchased","addItem","addQuantity","removeQuantity","updateVendor","viewVendor","currentQuantity","item","xs","Card_default","CardActionArea_default","CardMedia_default","require","width","height","CardContent_default","stock","CardActions_default","newVendor","ShopView","updateProducts","products","components_ShopItem_ShopItem","productInfo","justify-xs-space-evenly","getAllItems","Shop","components_ShopView_ShopView","CartItem","removeItem","currentCart","priceTotal","updateTotal","Number","totalPrice","gutterBottom","sum","total","Checkout","onSuccess","payment","updateSelectedVendor","paymentOptions","transactions","item_list","String","paymentID","payerID","onCancel","onError","env","currency","client","sandbox","production","intent","redirect_urls","return_url","cancel_url","note_to_payer","cartTotal","paypalTransactionsArray","paypalTransactions","paypalItems","paypalItem","toFixed","quantity","amount","react_paypal_express_checkout_default","shipping","extendedIcon","marginRight","Cart","components_CartItem_CartItem","components_Checkout_Checkout","VendorView","bio","VendorSignup","createBrowserHistory","code","handleOpen","adminCode","FormControl_default","EditClubInfo","lastUpdate","lastUpdateUser","getClubInfo","sendEdit","patch","AddProduct","addProduct","OrderHistoryItem","orderDate","oid","paid","pickedUp","OrderHistory","orders","order","date","convertDate","Date","hours","getHours","timeOfDay","minutes","getMinutes","getSeconds","actualDate","toDateString","components_OrderHistoryItem_OrderHistoryItem","App","BrowserRouter","components_ButtonAppBar_ButtonAppBar","Route","exact","path","About","Boolean","window","location","hostname","match","initialState","reducer","arguments","undefined","action","objectSpread","rootReducer","combineReducers","loginReducer","getProductsReducer","cartReducer","vendorReducer","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ecc90c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/test_shirt1.04c9ebc8.png\";","module.exports = __webpack_public_path__ + \"static/media/dog1.aa9094e4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog2.303269b8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog3.751aa161.jpg\";","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './About.css';\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Grid container direction=\"column\" justify=\"center\"alignContent = \"center\" alignItems=\"center\">\r\n          <h1 id = \"aboutHeader\"> About Us </h1>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport './Signup.css';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { DialogActions } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles'; \nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\n\nconst styles = theme => ({\n  progress: {\n    margin: theme.spacing.unit * 2\n  }\n});\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props)\n    //store user input\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      open: false,\n      progressValue: 0,\n      progressVariant: 'determinate',\n      responseMessage: '',\n      success: false\n    }\n    this.sendSignup = this.sendSignup.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  //handle dialog closing\n  handleClose(){\n    this.setState({\n        open: false\n    });\n\n    if(this.state.success === true){\n      this.props.history.push('/shop');\n    }\n  }\n\n  //send signup request\n  sendSignup(){\n      //load progress circle to wait for signup check\n      this.setState({\n        progressValue: 50,\n        progressVariant: \"indeterminate\"\n      });\n\n      if(this.state.password != this.state.confirmPassword){\n        this.setState({\n          open: true,\n          progressValue: 0,\n          progressVariant: \"determinate\",\n          responseMessage: \"Passwords do not match!\"\n        });\n      }\n\n      else{\n        const apiURL = \"/api/signup\";\n        //send signup request\n        axios.post(apiURL, {\n          params: {\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            email: this.state.email,\n            password: this.state.password\n          }\n        })\n        .then(res => {\n          //if signup is successful, display success message\n          if(res.data.success === true){\n            this.setState({\n              open: true,\n              progressValue: 0,\n              progressVariant: \"determinate\",\n              responseMessage: \"Signup successful! Please login!\",\n              success: true\n            })\n          }\n\n          //display error message\n          else{\n            this.setState({\n              open: true,\n              progressValue: 0,\n              progressVariant: \"determinate\",\n              responseMessage: res.data.message\n            })\n          }\n        })\n        .catch(err => {\n          alert(err);\n        })\n      }    \n    }\n  \n  render() {\n    const { classes } = this.props;\n    return (\n      <div id = \"signupContainer\">\n        <div id = \"signupForms\">\n          <Paper className = \"signupPaperContainer\">\n            <h1> Sign Up </h1>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                label=\"First Name\"\n                required=\"true\"\n                onChange={(event) => this.setState({ firstName: event.target.value })}\n              />\n            </div>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                label=\"Last Name\"\n                required=\"true\"\n                onChange={(event) => this.setState({ lastName: event.target.value })}\n              />\n            </div>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                label=\"Email\"\n                required=\"true\"\n                onChange={(event) => this.setState({ email: event.target.value })}\n              />\n            </div>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                required=\"true\"\n                onChange={(event) => this.setState({ password: event.target.value })}\n              />\n            </div>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                type=\"password\"\n                label=\"Confirm Password\"\n                required=\"true\"\n                onChange={(event) => this.setState({ confirmPassword: event.target.value })}\n              />\n            </div>\n            <div className = \"pushDown\">\n            <Button variant = \"contained\" color = \"primary\" onClick = {this.sendSignup}> Sign Up  </Button>\n            </div>\n          </Paper>\n\n          <div className = \"progressContainer\">\n            <div className = \"circle\">\n              <CircularProgress className = \"loadingCircle\" size = {80} variant = {this.state.progressVariant} value = {this.state.progressValue} className = {classes.progress}/>\n            </div>\n          </div>\n          \n          <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\n            <DialogContent>\n              <DialogContentText id = \"alert-dialog-description\">\n                {this.state.responseMessage}\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick = {this.handleClose} color = \"primary\">\n                Ok\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </div>\n      </div>\n    )\n  }\n}\n\nSignup.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Signup);\n","import React, { Component } from 'react';\nimport './Home.css';\nimport Grid from '@material-ui/core/Grid';\nimport { Slide } from 'react-slideshow-image';\nimport AliceCarousel from 'react-alice-carousel';\nimport \"react-alice-carousel/lib/alice-carousel.css\";\nimport image1 from '../../images/dog1.jpg';\nimport image2 from '../../images/dog2.jpg';\nimport image3 from '../../images/dog3.jpg';\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div id = \"homeContainer\">\n        <Grid container direction=\"column\" justify=\"center\"alignContent = \"center\" alignItems=\"center\">\n          <h1> Welcome to ECS193 ECommerce! </h1>\n          <p>This is a ecommerce website for UC Davis's clubs. \n          Here we make merchandise available from all different clubs of Davis.</p>\n\n          <div id = \"carouselContainer\">\n            <AliceCarousel autoPlay = {true} autoPlayInterval = {2000} buttonsDisabled = {true}>\n                <img className = \"slideImage\" src = {image1} />\n                <img className = \"slideImage\" src = {image2} />\n                <img className = \"slideImage\" src = {image3} />\n            </AliceCarousel>\n          </div>\n  \n        </Grid>\n      </div>\n    );\n  }\n}\n\n \n","//actions to trigger reducer to handle state changes\nconst actions =  {\n    //auth actions\n    LOGGED_IN: \"LOGGED_IN\",\n    LOGGED_OUT: \"LOGGED_OUT\",\n    GET_PRODUCTS: \"GET_PRODUCTS\",\n    ADMIN_LOGGED_IN: \"ADMIN_LOGGED_IN\",\n    //cart actions\n    GET_CART: \"GET_CART\",\n    ADD_CART:\"ADD_CART\",\n    REMOVE_CART:\"REMOVE_CART\",\n    EMPTY_CART: \"EMPTY_CART\",\n    UPDATE_TOTAL: \"UPDATE_TOTAL\",\n    //vendor actions\n    GET_VENDOR_PRODUCTS: \"GET_VENDOR_PRODUCTS\",\n    GET_VENDORS: \"GET_VENDORS\",\n    UPDATE_VENDOR_ID: \"UPDATE_VENDOR_ID\"\n}\n\nexport default actions;\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport './Login.css';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport { DialogActions } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles'; \r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport PropTypes from 'prop-types';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\n\r\nconst styles = theme => ({\r\n    progress: {\r\n      margin: theme.spacing.unit * 2\r\n    }\r\n});\r\n\r\n//Login component, allows user to login with email and password credentials\r\nclass Login extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        //store user input\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            open: false,\r\n            progressValue: 0,\r\n            progressVariant: 'determinate',\r\n            responseMessage: ''        \r\n        }\r\n        this.getCart = this.getCart.bind(this);\r\n        this.sendLogin = this.sendLogin.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n    }\r\n\r\n    //get logged in user's cart info\r\n    getCart(){\r\n   //   const apiURL = \"http://localhost:4000/api/getUserCart\"\r\n      const apiURL = \"/api/getUserCart\";\r\n      axios.get(apiURL, {\r\n        params:{\r\n          user: this.state.email\r\n        }\r\n      }).then(res => {\r\n          //after getting cart info, update redux store container\r\n          this.props.updateItems(res.data.data);\r\n        })\r\n        .catch(err => {\r\n          alert(err);\r\n        })\r\n    }\r\n\r\n    //send login request, display if login was successful\r\n    sendLogin(){\r\n        //load progress circle to wait for login check\r\n        this.setState({\r\n            progressValue: 50,\r\n            progressVariant: \"indeterminate\"\r\n        });\r\n        //const apiURL = \"http://localhost:4000/api/login\";\r\n        const apiURL = \"/api/login\";\r\n\taxios.post(apiURL, {\r\n            params:{\r\n              email: this.state.email,\r\n              password: this.state.password\r\n            }\r\n        })\r\n        //successful login, display message\r\n        .then(res => {\r\n            //login for regular user, non-admin\r\n            if(res.data.success === true && res.data.vendors.length === 0){\r\n                //dispatch update login action to update login state\r\n                let email = this.state.email;\r\n                this.props.updateLogin(email);\r\n\r\n                //after updating login, get cart info\r\n                this.getCart();\r\n\r\n                //display dialog for login successful\r\n                this.setState({\r\n                    open: true,\r\n                    progressValue: 0,\r\n                    progressVariant: \"determinate\",\r\n                    responseMessage: \"Login Succesful!\"\r\n                });\r\n            }\r\n\r\n            else if (res.data.success === true && res.data.vendors.length > 0){\r\n\r\n                //after determining user is an admin, get object list of user's active vendors\r\n                console.log(\"admin login\", res.data);\r\n\r\n                const vendorURL = \"/api/adminUser\";\r\n                axios.get(vendorURL, {\r\n                    params:{\r\n                        user: this.state.email\r\n                    }\r\n                })\r\n                .then(res => {\r\n                    console.log(res.data);\r\n                    let currentVendorID = res.data.vendors[0].vid;\r\n                    let email = this.state.email;\r\n                    let currentVendors = res.data.vendors;\r\n                    let currentVendorName = res.data.vendors[0].vendorName;\r\n\r\n                    //update redux store state\r\n                    this.props.updateAdminLogin(email, currentVendorID, currentVendors, currentVendorName);\r\n\r\n                    //after updating login, get cart info\r\n                    this.getCart();\r\n                \r\n                    //display dialog for login successful\r\n                    this.setState({\r\n                        open: true,\r\n                        progressValue: 0,\r\n                        progressVariant: \"determinate\",\r\n                        responseMessage: \"Login Succesful!\"\r\n                    });\r\n\r\n                })\r\n                .catch(err => {\r\n                    alert(err);\r\n                })\r\n            }\r\n            //display error message with logging in\r\n            else{\r\n                this.setState({\r\n                    open: true,\r\n                    progressValue: 0,\r\n                    progressVariant: \"determinate\",\r\n                    responseMessage: res.data.message\r\n                });\r\n            }\r\n        })\r\n        .catch(err => {\r\n            alert(err);\r\n        })\r\n    }\r\n\r\n    //handle dialog closing\r\n    handleClose(){\r\n        this.setState({\r\n            open: false\r\n        });\r\n\r\n        if(this.props.login === true){\r\n            this.props.history.push('/shop');\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { classes } = this.props;\r\n        return(\r\n            <div id = \"loginContainer\">\r\n                <div id = \"loginForms\">\r\n                    <Paper className = \"paperContainer\">\r\n                        <h1> Login </h1>\r\n                        <div className = \"textForm\" id=\"row\">\r\n                            <TextField\r\n                            id = \"outline-simple-start-adornment\"\r\n                            label=\"Email\"\r\n                            required=\"true\"\r\n                            onChange={(event) => this.setState({ email: event.target.value })}\r\n                            />\r\n                        </div>\r\n                        <div className = \"textForm\" id=\"row\">\r\n                            <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            required=\"true\"\r\n                            onChange={(event) => this.setState({ password: event.target.value })}\r\n                            />\r\n                        </div>\r\n                        <div className = \"pushDown\">\r\n                        <Button type = \"submit\" variant = \"contained\" color = \"primary\" onClick = {this.sendLogin}> Login  </Button>\r\n                        </div>\r\n                    </Paper>\r\n                    \r\n                    <div className = \"progressContainer\">\r\n                        <div className = \"circle\">\r\n                            <CircularProgress className = \"loadingCircle\" size = {80} variant = {this.state.progressVariant} value = {this.state.progressValue} className = {classes.progress}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\r\n                        <DialogContent>\r\n                            <DialogContentText id = \"alert-dialog-description\">\r\n                                {this.state.responseMessage}\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick = {this.handleClose} color = \"primary\">\r\n                                Ok\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n    return{\r\n      items: state.cart.items,\r\n      login: state.auth.login,\r\n      user: state.auth.user,\r\n      vendors: state.vendor.vendors\r\n    }\r\n  }\r\n\r\n//redux, dispatch action to reducer to update state\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        //update logged in values\r\n        updateLogin: (currentEmail) => dispatch({\r\n            type: actions.LOGGED_IN,\r\n            user: currentEmail\r\n        }),\r\n\r\n        //get user's cart from state after logging in\r\n        updateItems: (response) => dispatch({\r\n          type: actions.GET_CART,\r\n          cart: response\r\n        }),\r\n\r\n        //update admin login\r\n        updateAdminLogin: (currentEmail, vendorID, adminsOf, vendor) => dispatch({\r\n            type: actions.ADMIN_LOGGED_IN,\r\n            user: currentEmail,\r\n            vid: vendorID,\r\n            admins: adminsOf,\r\n            currentVendor: vendor\r\n        })\r\n    }\r\n}\r\n\r\nLogin.propsTypes = {\r\n    classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withStyles(styles)(Login));\r\n","import React, { Component } from 'react';\nimport './ButtonAppBar.css';\nimport {connect} from 'react-redux';\nimport actions from '../../store/actions';\nimport {Route, Link, Redirect} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CartIcon from '@material-ui/icons/ShoppingCart';\nimport Badge from '@material-ui/core/Badge';\nimport axios from 'axios';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { DialogActions } from '@material-ui/core';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n//variables to store routes to redirect to with Link component\nconst homeRoute = \"/\";\nconst aboutRoute = \"/about\";\nconst signupRoute = \"/signup\";\nconst loginRoute = \"/login\";\nconst shopRoute = \"/shop\";\nconst cartRoute = \"/cart\";\nconst editClubRoute = \"/editClubInfo\";\nconst addProductRoute = \"/addProduct\";\n\n//style for cart to display number of items\nconst styles = theme => ({\n  badge: {\n    top: '50%',\n    right: -3,\n    // The border color match the background color.\n    border: `2px solid ${\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[900]\n    }`,\n  },\n});\n\n//navbar component\nclass ButtonAppBar extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        open: false,\n        alertMessage: '',\n        currentAdminOf: this.props.vendorID,\n        adminsOf: this.props.adminsOf,\n        openSelect: false,\n        currentVendor: ''        \n      }\n      this.logoutUser = this.logoutUser.bind(this);\n      this.viewCartCheck = this.viewCartCheck.bind(this);\n      this.handleClose = this.handleClose.bind(this);\n      this.handleSelect = this.handleSelect.bind(this);\n      this.handleCloseSelect = this.handleCloseSelect.bind(this);\n      this.handleOpenSelect = this.handleOpenSelect.bind(this);\n    }\n\n    //when navbar loads, get list of all vendors in database\n    //trying to get club names\n    componentDidMount(){\n      const apiURL = \"/api/getVendorInfo\";\n      axios.get(apiURL)\n        .then(res => {\n          //update vendors of redux store\n          this.props.updateVendors(res.data.vendors);\n        })\n        .catch(err => {\n          alert(err);\n        })\n    }\n\n    //handle dialog closing\n    handleClose(){\n      this.setState({\n          open: false\n      })\n    }\n\n    //handle closing select\n    handleCloseSelect(){\n      this.setState({\n          openSelect: false\n      })\n    }\n\n    //handle open select\n    handleOpenSelect(){\n      this.setState({\n        openSelect: true\n      })\n    }\n\n    //logout user when clicking \"Logout\" on navbar\n    //empty shopping cart\n    logoutUser(){\n      if (this.props.loginText === \"Logout\"){\n        this.props.updateLogout();\n        this.props.emptyCart();\n        //display dialog\n        this.setState({\n          open: true,\n          alertMessage: \"Logout successful!\"\n        });\n      }\n    }\n\n    //update value selected from dropdown menu\n    //if user is an admin of multiple clubs, will change what is being updated\n    handleSelect(event){\n      var currentVendorName = event.target.value;\n      var currentVendorID = '';\n\n      //search through list of vendors, check if name selected equals vendor\n      //update vendor name selected and vid\n      for(let i = 0; i < this.props.vendors.length; i++){\n        if(this.props.vendors[i].vendorName === currentVendorName){\n          currentVendorID = this.props.vendors[i].vid;\n          this.props.updateCurrentVendor(currentVendorID, currentVendorName);\n          break;\n        }\n      }\n    }\n\n    //check if user is logged in to view cart\n    viewCartCheck(){\n      //prevent user from using cart until logged in\n      if(this.props.loginValue === false){\n        this.setState({\n          open: true,\n          alertMessage: \"Please login to view cart\"\n        })\n      }\n      \n      //if logged in, get cart and calculate cart's total\n      else{\n        const apiURL = \"/api/getUserCart\";\n        //if user is logged in, get cart info\n        if (this.props.login === true){\n          axios.get(apiURL,{\n            params:{\n              user: this.props.user\n            }\n          })\n          .then(res => {\n            //after getting cart from server, update user's items in redux state\n            alert(\"updating store with new items\");\n            this.props.updateItems(res.data.data);\n          })\n          .catch(err => {\n            alert(err);\n          })\n        }\n      }\n    }\n    \n    render(){\n      const { classes } = this.props;\n      //conditonal rendering\n      //render navbar based on whether user is logged in or not\n      //if user is logged in, hide parts of navbar such as signup and display \"Logout\"\n      if(this.props.loginValue === true && this.props.isAdmin === false){\n        return(\n          <div className= \"root\">\n            <AppBar position=\"static\">\n              <Toolbar>\n                <IconButton className = \"menuButton\" color=\"inherit\" aria-label=\"Menu\">\n                  <MenuIcon />\n                </IconButton>\n                <Typography component = {Link} to = {homeRoute} variant=\"h6\" color=\"inherit\" className = \"grow\">\n                  ECS193 ECommerce\n                </Typography>\n                <div id = \"navLink\">\n                  <Button component = {Link} to = {aboutRoute} color = \"inherit\"> About </Button> \n                  <Button component = {Link} to = {loginRoute} color=\"inherit\" onClick = {this.logoutUser}> {this.props.loginText} </Button> \n                  <Button component = {Link} to = {shopRoute} color = \"inherit\"> Shop </Button>\n                  <Button component = {Link} to = {cartRoute} color = \"inherit\" onClick = {this.viewCartCheck}> \n                    <Badge badgeContent = {this.props.cartLength} color = \"primary\" classes={{ badge: classes.badge }}>\n                      <CartIcon/> \n                    </Badge>\n                  </Button>\n                </div>\n              </Toolbar>\n            </AppBar>\n        </div>\n        );\n      }\n\n      //admin version of navbar after logging in\n      else if (this.props.loginValue === true && this.props.isAdmin === true){\n\n        const vendorList = this.props.adminsOf.map(result => {\n          return <MenuItem key = {result.vid} value = {result.vendorName}> {result.vendorName} </MenuItem>\n        })\n\n        return(\n          <div className= \"root\">\n            <AppBar position=\"static\">\n              <Toolbar>\n                <IconButton className = \"menuButton\" color=\"inherit\" aria-label=\"Menu\">\n                  <MenuIcon />\n                </IconButton>\n                <Typography component = {Link} to = {homeRoute} variant=\"h6\" color=\"inherit\" className = \"grow\">\n                  ECS193 ECommerce\n                </Typography>\n                  <div id = \"navLink\">\n                    <Button color = \"inherit\"> Change Club: </Button> \n                    <Button color = \"inherit\">\n                      <InputLabel className = \"navLabel\" color = \"inherit\"> {this.props.currentVendor} </InputLabel>\n                      <Select color = \"inherit\" value = {this.props.vendorID} open = {this.state.openSelect} onClose = {this.handleCloseSelect} onOpen = {this.handleOpenSelect} onChange = {this.handleSelect}>\n                        {vendorList}\n                      </Select>\n                    </Button>\n                    <Button component = {Link} to = {editClubRoute} color = \"inherit\"> Edit Club Info </Button> \n                    <Button component = {Link} to = {addProductRoute} color = \"inherit\"> Add Items </Button> \n                    <Button component = {Link} to = {aboutRoute} color = \"inherit\"> Edit Items </Button>\n                    <Button component = {Link} to = {aboutRoute} color = \"inherit\"> About </Button> \n                    <Button component = {Link} to = {loginRoute} color=\"inherit\" onClick = {this.logoutUser}> {this.props.loginText} </Button> \n                    <Button component = {Link} to = {shopRoute} color = \"inherit\"> Shop </Button>\n                    <Button component = {Link} to = {cartRoute} color = \"inherit\" onClick = {this.viewCartCheck}>\n                      <Badge badgeContent = {this.props.cartLength} color = \"primary\" classes={{ badge: classes.badge }}>\n                        <CartIcon/> \n                      </Badge>\n                    </Button>\n                  </div>\n                  <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\n                        <DialogContent>\n                            <DialogContentText id = \"alert-dialog-description\">\n                              {this.state.alertMessage}\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick = {this.handleClose} color = \"primary\">\n                                Ok\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n              </Toolbar>\n            </AppBar>\n          </div>\n        );\n      }\n\n      else{\n        return(\n          <div className= \"root\">\n            <AppBar position=\"static\">\n              <Toolbar>\n                <IconButton className = \"menuButton\" color=\"inherit\" aria-label=\"Menu\">\n                  <MenuIcon />\n                </IconButton>\n                <Typography component = {Link} to = {homeRoute} variant=\"h6\" color=\"inherit\" className = \"grow\">\n                  ECS193 ECommerce\n                </Typography>\n                  <div id = \"navLink\">\n                    <Button component = {Link} to = {aboutRoute} color = \"inherit\"> About </Button> \n                    <Button component = {Link} to = {signupRoute} color = \"inherit\"> Sign Up </Button> \n                    <Button component = {Link} to = {loginRoute} color=\"inherit\" onClick = {this.logoutUser}> {this.props.loginText} </Button> \n                    <Button component = {Link} to = {shopRoute} color = \"inherit\"> Shop </Button>\n                    <Button color = \"inherit\" onClick = {this.viewCartCheck}> <CartIcon/> </Button>\n                  </div>\n                  <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\n                        <DialogContent>\n                            <DialogContentText id = \"alert-dialog-description\">\n                              {this.state.alertMessage}\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick = {this.handleClose} color = \"primary\">\n                                Ok\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n              </Toolbar>\n            </AppBar>\n        </div>\n        );\n      }\n    }\n  }\n\n  //redux\n\n  //dispatch action to reducer\n  const mapDispatchToProps = dispatch => {\n    return{\n        //update store that user logged out\n        updateLogout: () => dispatch({\n          type: actions.LOGGED_OUT\n        }),\n\n        //update store cart is empty\n        emptyCart: () => dispatch({\n          type: actions.EMPTY_CART\n        }),\n\n        //update vendors\n        updateVendors: (response) => dispatch({\n          type: actions.GET_VENDORS,\n          vendors: response\n        }),\n\n        //update vendor id\n        updateCurrentVendor: (vendorID ,vendorName) => dispatch({\n          type: actions.UPDATE_VENDOR_ID,\n          vid: vendorID,\n          vendor: vendorName\n        })\n    }\n  }\n\n  //obtain state from store as props for component\n  //get login value, login text, and cart length\n  const mapStateToProps = state => {\n    return{\n        loginValue: state.auth.login,\n        loginText: state.auth.text,\n        user: state.auth.user,\n        isAdmin: state.auth.isAdmin,\n        cartLength: state.cart.items.length,\n        items: state.cart.items,\n        adminsOf: state.auth.adminsOf,\n        vendorID: state.auth.vendorID,\n        vendors: state.vendor.vendors,\n        currentVendor: state.auth.currentVendor\n    }\n  }\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withStyles(styles)(ButtonAppBar));\n","import React, { Component } from 'react';\r\nimport './ShopItem.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport actions from '../../store/actions';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport AddCircle from '@material-ui/icons/Add';\r\nimport RemoveCircle from '@material-ui/icons/Remove';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport { DialogActions } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {Link} from 'react-router-dom';\r\nimport { test } from '../../images/test_shirt1.png';\r\n\r\n//component to display product info\r\nclass ShopItem extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    //initial state of products\r\n    this.state = {\r\n      name: this.props.productName,\r\n      price: this.props.productPrice,\r\n      pid: this.props.pid,\r\n      amtPurchased: 1,\r\n      vendorID: this.props.vendorID,\r\n      open: false,\r\n      alertMessage: ''\r\n    }\r\n\r\n    //bind functions to component\r\n    this.addItem = this.addItem.bind(this);\r\n    this.addQuantity = this.addQuantity.bind(this);\r\n    this.removeQuantity = this.removeQuantity.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.updateVendor = this.updateVendor.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    console.log(this.props.vendorID);\r\n  }\r\n\r\n  //handle dialog closing\r\n  handleClose(){\r\n    this.setState({\r\n        open: false\r\n    })\r\n  }\r\n\r\n  //update vendor in redux store\r\n  updateVendor(){\r\n    var viewVendor = this.state.vendorID;\r\n    console.log(\"trying to update vendor \", viewVendor);\r\n    this.props.updateVendor(viewVendor);\r\n  }\r\n\r\n  //function to update cart of user\r\n  //add item to user's cart\r\n  addItem(){\r\n    //check if user is logged in\r\n    //only allow user to add to cart if logged in\r\n    if(this.props.login === false){\r\n      this.setState({\r\n        open: true,\r\n        alertMessage: \"Please login to add to cart!\"\r\n      })\r\n    }\r\n\r\n    else{\r\n      //update user's cart on server\r\n      var apiURL = \"/api/getUserCart/addItems\";\r\n      axios.post(apiURL, {\r\n        params:{\r\n          user: this.props.user,\r\n          pid: this.state.pid,\r\n          amtPurchased: this.state.amtPurchased,\r\n          vendorID: this.state.vendorID\r\n        }\r\n      })\r\n      .then(res => {\r\n        if(res.data.success === true){\r\n          //after adding to item, get updated cart\r\n          const getCartURL = \"/api/getUserCart\";\r\n          axios.get(getCartURL, {\r\n            params:{\r\n              user: this.props.user\r\n            }\r\n          })\r\n          .then(res => {\r\n            //after getting cart info, update redux store container\r\n            this.props.updateItems(res.data.data);\r\n            this.setState({\r\n              open: true,\r\n              alertMessage: \"Item added to cart!\"\r\n            });\r\n          })\r\n          .catch(err => {\r\n            alert(err);\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        alert(err);\r\n      })\r\n    }\r\n  } //end of add item\r\n\r\n  //add quantity purchased\r\n  addQuantity(){\r\n    var currentQuantity = this.state.amtPurchased;\r\n    currentQuantity += 1;\r\n    this.setState({\r\n      amtPurchased: currentQuantity\r\n    });\r\n  }\r\n\r\n  //remove quantity purchased\r\n  removeQuantity(){\r\n    var currentQuantity = this.state.amtPurchased;\r\n    //can't have negative amount of items selected\r\n    if(currentQuantity <= 1){\r\n      alert(\"Must have at least one item\");\r\n    }\r\n\r\n    else{\r\n      currentQuantity -= 1;\r\n      this.setState({\r\n        amtPurchased: currentQuantity\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n        <Grid item xs = {4} spacing = {2}> \r\n        {/* <Grid container item xs={12} spacing={24}></Grid> */}\r\n          <Card className= \"card\">\r\n            <CardActionArea>\r\n              <CardMedia className = \"media\" />\r\n              <div className=\"resize\">\r\n              <img src={require('../../images/test_shirt1.png')} width=\"60%\" height=\"60%\"/>\r\n              </div>\r\n              {/* <img src = {test}/> */}\r\n              <CardContent>\r\n                <Typography component=\"p\">\r\n                  {this.props.productName}\r\n                </Typography>\r\n                <Typography component=\"p\">\r\n                  Price: ${this.props.productPrice}\r\n                </Typography>\r\n                <Typography component=\"p\">\r\n                  Stock: {this.props.stock}\r\n                </Typography>\r\n                {/* <Typography component=\"p\">\r\n                  Info: {this.props.productInfo}\r\n                </Typography> */}\r\n              </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Button id = \"test\" onClick = {this.removeQuantity}>\r\n                 -\r\n                </Button>\r\n                <div className= \"quantity\">\r\n                {this.state.amtPurchased}\r\n                </div>\r\n                <Button id = \"test\" onClick = {this.addQuantity}>\r\n                 +\r\n                </Button>\r\n              \r\n\r\n              <Button size=\"small\" color=\"primary\" onClick = {this.addItem}>\r\n                Add To Cart\r\n              </Button>\r\n\r\n              <Button size=\"small\" color=\"primary\" onClick = {this.updateVendor}>\r\n                <Link to = \"/vendorProducts\"> More From Vendor </Link>\r\n              </Button>\r\n\r\n              <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\r\n                <DialogContent>\r\n                  <DialogContentText id = \"alert-dialog-description\">\r\n                    {this.state.alertMessage}\r\n                  </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                  <Button onClick = {this.handleClose} color = \"primary\">\r\n                    Ok\r\n                  </Button>\r\n                </DialogActions>\r\n              </Dialog>\r\n            </CardActions>\r\n          </Card>\r\n        </Grid>\r\n    \r\n    )\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get login value and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n      user: state.auth.user,\r\n      login: state.auth.login\r\n  }\r\n}\r\n\r\n//dispatch action to reducer\r\n//update redux state of current cart\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n      //get user's cart from state after logging in\r\n      updateItems: (response) => dispatch({\r\n        type: actions.GET_CART,\r\n        cart: response\r\n      }),\r\n\r\n      updateVendor: (newVendor) => dispatch({\r\n        type: actions.GET_VENDOR_PRODUCTS,\r\n        vendor: newVendor\r\n      })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopItem);\r\n","import React, { Component } from 'react';\r\nimport './ShopView.css';\r\nimport ShopItem from '../ShopItem/ShopItem';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\n\r\nclass ShopView extends Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  //get products from server after mounting to screen\r\n  componentDidMount(){\r\n    //const apiURL = \"http://localhost:4000/api/getAllProducts\";\r\n    const apiURL = \"/api/getAllProducts\";\r\n    //get all products from server\r\n    //update state of view to obtain items\r\n    axios.get(apiURL)\r\n      .then(res => {\r\n        //update product state in redux store\r\n        console.log(res.data);\r\n        this.props.updateProducts(res.data.data);\r\n\r\n        //after getting products, get list of vendors\r\n        const vendorsURL = \"/api/getVendorInfo\";\r\n        axios.get(vendorsURL)\r\n          .then(res => {\r\n            console.log(res.data);\r\n            this.props.updateVendors(res.data.vendors);\r\n          })\r\n          .catch(err => {\r\n            alert(\"error getting vendors\");\r\n          })\r\n      })\r\n      .catch(err => {\r\n        alert(\"Server error retrieving items\");\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const items = this.props.products.map(result => {\r\n      return <ShopItem key = {result.pid} vendorID = {result.vid} pid = {result.pid} productName = {result.productName} productPrice = {result.productPrice} stock = {result.stock} productInfo = {result.productInfo} />\r\n    });\r\n\r\n    return (\r\n      <div className = \"grow\">\r\n        <Grid container direction=\"column\" justify=\"center\"alignContent = \"center\" alignItems=\"center\">\r\n          <h1> Shop </h1>\r\n        </Grid>\r\n\r\n        <Grid container spacing={24} direction=\"row\" justify=\"flex-start\" alignItems=\"center\" justify-xs-space-evenly>\r\n          {items}\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//redux\r\n\r\n//dispatch action to reducer\r\n//update items from server to become state of store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n      updateProducts: (products) => dispatch({\r\n          type: actions.GET_PRODUCTS,\r\n          items: products\r\n      }),\r\n\r\n      updateVendors: (currentVendors) => dispatch({\r\n        type: actions.GET_VENDORS,\r\n        vendors: currentVendors\r\n      })\r\n  }\r\n}\r\n\r\n//get items from products state of store\r\n//obtain state from store as props for component\r\nconst mapStateToProps = state => {\r\n  return{\r\n      products: state.getAllItems.products\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopView);\r\n","import React, { Component } from 'react';\r\nimport './Shop.css';\r\nimport ShopView from '../ShopView/ShopView';\r\n\r\nexport default class Shop extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <ShopView/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './CartItem.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\n\r\n//component to display cart objects\r\nclass CartItem extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    //store product id PID to reference for item removal\r\n    this.state = {\r\n      pid: this.props.pid,\r\n      vid: this.props.vendorID\r\n    }\r\n    this.removeItem = this.removeItem.bind(this);\r\n  }\r\n\r\n  //remove item from user's cart\r\n  removeItem(){\r\n    const apiURL = \"/api/getUserCart/deleteItems\";\r\n    axios.post(apiURL, {\r\n      params:{\r\n        user: this.props.user,\r\n        pid: this.state.pid\r\n      }\r\n    })\r\n    .then(res => {\r\n      const getCart = \"/api/getUserCart\";\r\n      //after successful deletion, get updated user's cart\r\n      axios.get(getCart, {\r\n        params:{\r\n          user: this.props.user\r\n        }\r\n      })\r\n      .then(res => {\r\n        //after removing item from cart, update cart on server\r\n        this.props.updateItems(res.data.data);\r\n        //get total from items\r\n        var currentCart = res.data.data;\r\n        var priceTotal = 0;\r\n        \r\n        //if cart is empty, total price is $0\r\n        if(currentCart.length === 0){\r\n          console.log(\"cart is empty\");\r\n          this.props.updateTotal(priceTotal);\r\n        }\r\n\r\n        //if there are items, calculate total price\r\n        else{\r\n          console.log(\"cart is not empty\");\r\n          for(let i = 0; i < currentCart.length; i++){\r\n            priceTotal += Number(currentCart[i].totalPrice);\r\n          }\r\n          console.log(priceTotal);\r\n          this.props.updateTotal(priceTotal);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        alert(err);\r\n      })\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid item xs>\r\n        <Card className= \"card\">\r\n          <CardActionArea>\r\n            <CardMedia className = \"media\"/>\r\n            <CardContent>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                {this.props.productName}\r\n              </Typography>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                Amount: {this.props.amtPurchased}\r\n              </Typography>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                Price: ${this.props.productPrice}\r\n              </Typography>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                Total Price: ${this.props.totalPrice}\r\n              </Typography>\r\n            </CardContent>\r\n          </CardActionArea>\r\n          <CardActions>\r\n            <Button size=\"small\" color=\"primary\" onClick = {this.removeItem}>\r\n              Remove Item\r\n            </Button>\r\n            <Button size=\"small\" color=\"primary\">\r\n              Add Item\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart from store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    updateItems: (response) => dispatch({\r\n      type: actions.GET_CART,\r\n      cart: response\r\n    }),\r\n\r\n    //update store of cart total\r\n    updateTotal: (sum) => dispatch({\r\n      type: actions.UPDATE_TOTAL,\r\n      total: sum\r\n    })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CartItem);\r\n","import React, { Component } from 'react';\r\nimport './Checkout.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport PaypalExpressBtn from 'react-paypal-express-checkout';\r\nimport axios from 'axios';\r\n\r\n//styles for checkout button\r\nconst styles = theme => ({\r\n  margin: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing.unit,\r\n  },\r\n});\r\n\r\n//calculate total price of user's cart and allow user to checkout\r\n//get user's cart info from state\r\n//state consists of information needed for paypal checkout\r\nclass Checkout extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      total: this.props.total,\r\n      env: \"sandbox\",\r\n      currency: \"USD\",\r\n      client: {\r\n        sandbox: 'AQRbJx9R02PGD4hvGRQlGL48Ri1mvf4c7qd6LzuNHqmbtothVDp-vI6K7qatzi3dgYcg4tkp5lpXHBye',\r\n        production: 'YOUR-PRODUCTION-APP-ID',\r\n      },\r\n      paymentOptions: {\r\n        \"intent\": \"sale\",\r\n        // \"payer\": {\r\n        //   \"payer_info\": {  // payer_info not saved to paypal transaction, will need to send email to vendor with transaction ID for cross reference\r\n        //     \"email\": \"tst@gmail.com\",\r\n        //     \"first_name\": \"a\",\r\n        //     \"last_name\": \"d\"\r\n        //   },\r\n        //   \"payment_method\": \"paypal\"\r\n        // },\r\n        \"redirect_urls\": {\r\n          \"return_url\": \"www.google.com\", \r\n          \"cancel_url\": \"www.reddit.com\",\r\n        },\r\n        \"transactions\": [],\r\n        \"note_to_payer\": \"Pickup the sale at this location:\"  // does a popup, not incuded in transaction on paypal\r\n      },\r\n      cartTotal: this.props.total\r\n    }\r\n  }\r\n\r\n  //convert items in cart to array of paypal objects for payment option\r\n  componentDidMount(){\r\n    //array to store as payment option\r\n    var paypalTransactionsArray= [];\r\n    var paypalTransactions = {};\r\n    paypalTransactions.item_list = {};\r\n    paypalTransactions.amount = {};\r\n    paypalTransactions.description = \"Sale\";\r\n\r\n    var paypalItems = [];\r\n\r\n    //go through each item in redux store\r\n    for(let i = 0; i < this.props.cart.length; i++){\r\n      let paypalItem = {};\r\n\r\n      //construct new paypal object based on each item in Redux store container\r\n      paypalItem.name = this.props.cart[i].productName;\r\n      paypalItem.price = String(this.props.cart[i].productPrice.toFixed(2));\r\n      paypalItem.currency = this.state.currency;\r\n      paypalItem.quantity = String(this.props.cart[i].amtPurchased);\r\n\r\n      //store \r\n      paypalItems.push(paypalItem);\r\n    }\r\n\r\n    paypalTransactions.item_list.items = paypalItems;\r\n    paypalTransactions.amount.currency = this.state.currency;\r\n    paypalTransactions.amount.total = String(this.props.total.toFixed(2));\r\n    //paypalTransactions.amount.total = String(this.state.total.toFixed(2));\r\n\r\n    //update payment options to be list of paypal items\r\n    console.log(this.state.paymentOptions.transactions);\r\n    paypalTransactionsArray.push(paypalTransactions);\r\n    this.state.paymentOptions.transactions = paypalTransactionsArray;\r\n  }\r\n\r\n  //update payment option on update\r\n  componentDidUpdate(){\r\n    console.log(\"THIS IS THE TOTAL PLEASE FIX STATE\", this.props.total);\r\n    this.state.paymentOptions.transactions[0].amount.total = this.props.total;\r\n    this.state.paymentOptions.transactions[0].amount.total = String(this.props.total);\r\n    console.log(\"testing payment options \", this.state.paymentOptions);\r\n  }\r\n\r\n  onSuccess = (payment) => {\r\n    console.log(\"Payment successful!\", payment);\r\n    console.log(this.props.cart);\r\n    this.props.updateSelectedVendor(this.props.cart[0].vid);\r\n\r\n    const apiURL = \"/api/orders\";\r\n\r\n    axios.post(apiURL, {\r\n      params:{\r\n        items: this.state.paymentOptions.transactions[0].item_list.items,\r\n        totalPrice: String(this.props.total),\r\n        vid: this.props.cart[0].vid,\r\n        user: this.props.user,\r\n        paymentID: payment.paymentID,\r\n        payerID: payment.payerID\r\n      }\r\n    })\r\n    .then(res => {\r\n      if(res.data.success === true){\r\n        alert(res.data.message);\r\n      }\r\n\r\n      else{\r\n        alert(\"Error with sending order\");\r\n      }\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n\r\n    // You can bind the \"payment\" object's value to your state or props or whatever here, please see below for sample returned data\r\n    // alert('Transaction completed by ' + payment.email);\r\n    \r\n    // TODO, payment contains info, send it to backend\r\n    // payment.payerID\r\n    // payment.paymentID\r\n\r\n    // payment.returnUrl can be used to route back to somewhere\r\n    // or route ourselves\r\n  }\r\n\r\n  onCancel = (data) => {\r\n    // The user pressed \"cancel\" or closed the PayPal popup\r\n    console.log('Payment cancelled!', data);\r\n    // You can bind the \"data\" object's value to your state or props or whatever here, please see below for sample returned data\r\n  }\r\n\r\n  onError = (err) => {\r\n    // The main Paypal script could not be loaded or something blocked the script from loading\r\n    console.log(\"Error!\", err);\r\n    alert(err);\r\n    // Because the Paypal's main script is loaded asynchronously from \"https://www.paypalobjects.com/api/checkout.js\"\r\n    // => sometimes it may take about 0.5 second for everything to get set, or for the button to appear\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return(\r\n      <div>\r\n        <Grid container direction=\"row\">\r\n          <h1> Total: ${this.props.total} </h1>\r\n          <PaypalExpressBtn env={this.state.env} client={this.state.client} currency={this.state.currency}\r\n            total={Number(this.props.total)} onError={this.onError} onSuccess={this.onSuccess}\r\n            onCancel={this.onCancel} shipping={1} paymentOptions={this.state.paymentOptions} />\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n  //  total: state.cart.total,\r\n    cart: state.cart.items\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart from store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    updateItems: (response) => dispatch({\r\n      type: actions.GET_CART,\r\n      cart: response\r\n    }),\r\n\r\n    updateSelectedVendor: (currentVendor) => dispatch({\r\n      type: actions.GET_VENDOR_PRODUCTS,\r\n      vendor: currentVendor\r\n    })\r\n  }\r\n}\r\n\r\nCheckout.PropTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Checkout));\r\n","import React, { Component } from 'react';\r\nimport './Cart.css';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CartItem from '../CartItem/CartItem';\r\nimport Checkout from '../Checkout/Checkout';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n//component to display user's cart\r\nclass Cart extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      total: 0\r\n    }\r\n  }\r\n\r\n  //get cart from server for user\r\n  componentDidMount(){\r\n    //get total from items\r\n    var currentCart = this.props.items;\r\n    var priceTotal = 0;\r\n\r\n    //if cart is empty, total price is $0\r\n    if(currentCart.length === 0){\r\n      this.props.updateTotal(priceTotal);\r\n    }\r\n\r\n    //if there are items, calculate total price\r\n    else{\r\n      //go through each item in cart and sum up price\r\n      for(let i = 0; i < currentCart.length; i++){\r\n        priceTotal += Number(currentCart[i].totalPrice);\r\n      }\r\n      priceTotal = priceTotal.toFixed(2);\r\n      this.setState({\r\n        total: priceTotal\r\n      });\r\n      this.props.updateTotal(priceTotal);\r\n    }\r\n  }\r\n\r\n  //render cart items to cart view\r\n  render() {\r\n    const cart = this.props.items.map(result => {\r\n      return <CartItem key = {result.productName} pid = {result.pid} vendorID = {result.vid} productName = {result.productName} amtPurchased = {result.amtPurchased} productPrice = {result.productPrice}  totalPrice = {result.totalPrice} />\r\n    });\r\n\r\n    return(\r\n      <div>\r\n        <Grid container direction=\"column\">\r\n          <h1> <Link to = \"/orderHistory\"> Order History </Link> </h1>\r\n          <h1> Current Cart: </h1>\r\n        </Grid>\r\n\r\n        <Grid container direction=\"column\" justify-xs-space-evenly>\r\n          <Checkout total = {this.state.total}/>\r\n          {cart}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    updateItems: (response) => dispatch({\r\n      type: actions.GET_CART,\r\n      cart: response\r\n    }),\r\n\r\n    //update store of cart total\r\n    updateTotal: (sum) => dispatch({\r\n      type: actions.UPDATE_TOTAL,\r\n      total: sum\r\n    })\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Cart);\r\n","import React, { Component } from 'react';\r\nimport './VendorView.css';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport ShopItem from '../ShopItem/ShopItem';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass VendorView extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      products: [],\r\n      vendorName: '',\r\n      bio: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    const apiURL = \"/api/getVendorProducts\";\r\n    axios.get(apiURL, {\r\n      params:{\r\n        vendor: this.props.vendor\r\n      }\r\n    })\r\n    .then(res => {\r\n      console.log(\"getting vendor products \", res.data);\r\n\r\n      var currentVendorName = '';\r\n      var currentVendorBio = '';\r\n\r\n      //search for matching vendor id in array of vendors of redux store\r\n      for(let i = 0; i < this.props.vendors.length; i++){\r\n        if(this.props.vendors[i].vid === this.props.vendor){\r\n          //update component state, list of products from vendor\r\n          this.setState({\r\n            products: res.data.data,\r\n            vendorName: this.props.vendors[i].vendorName,\r\n            bio: this.props.vendors[i].bio\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const items = this.state.products.map(result => {\r\n      return <ShopItem key = {result.pid} vendorID = {result.vid} pid = {result.pid} productName = {result.productName} productPrice = {result.productPrice} stock = {result.stock} productInfo = {result.productInfo} />\r\n    });\r\n\r\n    return (\r\n      <div className = \"grow\">\r\n        <Grid container direction=\"column\" justify=\"center\"alignContent = \"center\" alignItems=\"center\">\r\n          <h1> {this.state.vendorName} </h1>\r\n          <h3> Bio: {this.state.bio} </h3>\r\n        </Grid>\r\n\r\n        <Grid container spacing={24} direction=\"row\" justify=\"center\" alignItems=\"center\" justify-xs-space-evenly>\r\n          {items}\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//redux\r\n\r\n//dispatch action to reducer\r\n//update items from server to become state of store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n      updateProducts: (products) => dispatch({\r\n          type: actions.GET_PRODUCTS,\r\n          items: products\r\n      })\r\n  }\r\n}\r\n\r\n//get items from products state of store\r\n//obtain state from store as props for component\r\nconst mapStateToProps = state => {\r\n  return{\r\n    vendor: state.vendor.vendor,\r\n    vendors: state.vendor.vendors\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VendorView);\r\n","import React, { Component } from 'react';\r\nimport './VendorSignup.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { createHashHistory, createBrowserHistory } from 'history';\r\nconst history = createBrowserHistory();\r\n\r\n//vendor confirmation\r\n\r\n//insert email for verification\r\n//dropdown menu to select clubs\r\n//insert access code\r\n\r\nclass VendorSignup extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      code: '',\r\n      vendor: 'Select Club Name',\r\n      open: false,\r\n      value: '',\r\n      vendorID: '',\r\n      vendors: []\r\n    };\r\n    this.sendSignup = this.sendSignup.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.handleOpen = this.handleOpen.bind(this);\r\n    this.handleSelect = this.handleSelect.bind(this);\r\n  }\r\n\r\n  //store list of active vendors from database\r\n  componentDidMount(){\r\n    const apiURL = \"/api/getVendorInfo\";\r\n    axios.get(apiURL)\r\n      .then(res => {\r\n        this.setState({\r\n          vendors: res.data.vendors\r\n        })\r\n      })\r\n  }\r\n\r\n  //close select\r\n  handleClose(){\r\n    this.setState({\r\n      open: false\r\n    })\r\n  }\r\n\r\n  //open select\r\n  handleOpen(){\r\n    this.setState({\r\n      open: true\r\n    })\r\n  }\r\n\r\n  //update value selected\r\n  handleSelect(event){\r\n    var currentVendorID = event.target.value;\r\n    var currentVendorName = '';\r\n    //search through list of available vendors\r\n    //save state of selected vendor\r\n    //save vendor id and name of selected vendor\r\n    for(let i = 0; i < this.state.vendors.length; i++){\r\n      if(this.state.vendors[i].vid === currentVendorID){\r\n        currentVendorName = this.state.vendors[i].vendorName;\r\n        this.setState({\r\n          vendorID: currentVendorID,\r\n          vendor: currentVendorName     \r\n        });\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  //send signup to verify admin process\r\n  sendSignup(){\r\n    //add current user to be admin of selected vendor\r\n    const apiURL = \"/api/adminUser/addAdminUser\";\r\n\r\n    axios.post(apiURL, {\r\n      params:{\r\n        user: this.state.email,\r\n        vid: this.state.vendorID,\r\n        adminCode: this.state.code\r\n      }\r\n    })\r\n    .then(res => {\r\n      //if successful, set isAdmin = true\r\n      //login in user\r\n      //redirect back to homepage with admin version of navbar\r\n      if(res.data.success === true){\r\n        //get list of vendors user is an admin of\r\n        //get the vids of vendors in which user is an admin of\r\n        const adminsURL = \"/api/adminUser\";\r\n        axios.get(adminsURL, {\r\n          params:{\r\n            user: this.state.email\r\n          }\r\n        })\r\n        .then(res => {\r\n          if(res.data.success === true){\r\n            //update the user's email, update current admin of which vendor, and update which vendors user is an admin of\r\n            var currentVendor = '';\r\n\r\n            //find matching vendor id, extract vendor name from list of vendors\r\n            for(let i = 0; i < this.props.vendors.length; i++){\r\n              if(this.props.vendors[i].vid === this.state.vendorID){\r\n                currentVendor = this.props.vendors[i].vendorName;\r\n                break;\r\n              }\r\n            }\r\n\r\n            //update redux store\r\n            //update user's email, vendorID currently an admin of, list of vids of an admin of, and name of current\r\n            this.props.updateAdminLogin(this.state.email, this.state.vendorID, res.data.vendors,currentVendor);\r\n            alert(\"Admin verification succesful!\");\r\n\r\n            //redirect user back home\r\n            this.props.history.push('/');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          alert(err);\r\n        })\r\n      }\r\n\r\n      //print why verification didn't work\r\n      else{\r\n        alert(res.data.message);\r\n      }\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const vendorList = this.state.vendors.map(result => {\r\n      return <MenuItem key = {result.vid} value = {result.vid} name = {result.vendorName}> {result.vendorName} </MenuItem>\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <Grid container direction = \"column\" justify = \"center\" alignItems = \"center\">\r\n          <Paper id = \"signupPaperContainer\">\r\n            <h1> Admin Verification </h1>\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Email\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ email: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Access Code\"\r\n                type=\"password\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ code: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            <h5> Select Vendor </h5>\r\n            <div className = \"textForm\" id = \"row\">\r\n              <FormControl id = \"clubForm\">\r\n                <InputLabel> {this.state.vendor} </InputLabel>\r\n                <Select value = {this.state.value} open = {this.state.open} onClose = {this.handleClose} onOpen = {this.handleOpen} onChange = {this.handleSelect}>\r\n                  {vendorList}\r\n                </Select>\r\n              </FormControl>\r\n            </div>\r\n            <Button type = \"submit\" variant = \"contained\" color = \"primary\" onClick = {this.sendSignup}> Verify  </Button>\r\n          </Paper>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n    vendors: state.vendor.vendors\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart from store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    updateAdminLogin: (currentEmail, vendorID, adminsOf, vendor) => dispatch({\r\n      type: actions.ADMIN_LOGGED_IN,\r\n      user: currentEmail,\r\n      vid: vendorID,\r\n      admins: adminsOf,\r\n      currentVendor: vendor\r\n    })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VendorSignup);\r\n","import React, { Component } from 'react';\r\nimport './EditClubInfo.css';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass EditClubInfo extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      bio: '',\r\n      lastUpdate: '',\r\n      lastUpdateUser: '',\r\n      vendorName: ''\r\n    };\r\n\r\n    this.getClubInfo = this.getClubInfo.bind(this);\r\n    this.sendEdit = this.sendEdit.bind(this);\r\n  }\r\n\r\n  //get club info\r\n  getClubInfo(){\r\n    const apiURL = \"/api/adminVendor\";\r\n    axios.get(apiURL, {\r\n      params:{\r\n        user: this.props.user,\r\n        vid: this.props.vendorID\r\n      }\r\n    })\r\n    .then(res => {\r\n      if(res.data.success === true){\r\n        this.setState({\r\n          bio: res.data.bio,\r\n          lastUpdate: res.data.lastUpdate,\r\n          lastUpdateUser: res.data.lastUpdateUser,\r\n          vendorName: res.data.vendorName\r\n        })\r\n      }\r\n      else{\r\n        alert(\"Error getting club info\");\r\n      }\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  //when component loads, get club info from server\r\n  componentDidMount(){\r\n    this.getClubInfo();\r\n  }\r\n\r\n  //update club info on server\r\n  sendEdit(){\r\n    const apiURL = \"/api/adminVendor/editVendorInfo\";\r\n    axios.patch(apiURL, {\r\n      params:{\r\n        user: this.props.user,\r\n        vid: this.props.vendorID,\r\n        vendorName: this.state.vendorName,\r\n        bio: this.state.bio\r\n      }\r\n    })\r\n    .then(res => {\r\n      //if edit was successful, get new info for edited club\r\n      if(res.data.success === true){\r\n        alert(res.data.message);\r\n        this.getClubInfo();\r\n      }\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Grid container direction = \"column\" justify = \"center\" alignItems = \"center\">\r\n          <h1> Edit Club Info </h1>\r\n          <h6> Last Updated: {this.state.lastUpdate} </h6>\r\n          <h6> Last Edited By: {this.state.lastUpdateUser} </h6>\r\n          <form id = \"editClubForm\">\r\n            <TextField\r\n              className = \"inputWidth\"\r\n              label=\"Club Name\"\r\n              value={this.state.vendorName}\r\n              onChange={(event) => this.setState({ vendorName: event.target.value })}          \r\n            />\r\n\r\n            <TextField\r\n              className = \"inputWidth\"\r\n              label=\"Biography\"\r\n              value={this.state.bio}\r\n              id = \"standard-full-width\"\r\n              onChange={(event) => this.setState({ bio: event.target.value })}          \r\n            />\r\n\r\n            <Button variant = \"contained\" color = \"primary\" onClick = {this.sendEdit}> Update Club  </Button>\r\n\r\n          </form>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n    vendorID: state.auth.vendorID\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(EditClubInfo);\r\n","import React, { Component } from 'react';\r\nimport './AddProduct.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nclass AddProduct extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      productName: '',\r\n      productInfo: '',\r\n      productPrice: '',\r\n      stock: ''\r\n    }\r\n    this.addProduct = this.addProduct.bind(this);\r\n  }\r\n\r\n  //add product to vendor's collection in database\r\n  addProduct(){\r\n    const apiURL = \"http://localhost:4000/api/adminProducts/addNewProduct\";\r\n    axios.post(apiURL, {\r\n      params:{\r\n        vid: this.props.vid,\r\n        user: this.props.user,\r\n        productInfo: this.state.productInfo,\r\n        productName: this.state.productName,\r\n        productPrice: this.state.productPrice,\r\n        stock: this.state.stock\r\n      }\r\n    })\r\n    .then(res => {\r\n      alert(res.data.message);\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Grid container direction = \"column\" justify = \"center\" alignItems = \"center\">\r\n            <h1> Add Product </h1>\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Product Name\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ productName: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Product Info\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ productInfo: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Product Price\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ productPrice: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            <div className = \"textForm\" id=\"row\">\r\n              <TextField\r\n                label=\"Product Stock\"\r\n                required=\"true\"\r\n                onChange={(event) => this.setState({ stock: event.target.value })}\r\n              />\r\n            </div>\r\n\r\n            <Button variant = \"contained\" color = \"primary\" onClick = {this.addProduct}> Add Product  </Button>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//redux\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n    vid: state.auth.vendorID\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(AddProduct);\r\n","import React, { Component } from 'react';\r\nimport './OrderHistoryItem.css';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nclass OrderHistoryItem extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Card className= \"card orderHistoryCard\">\r\n            <CardActionArea>\r\n              <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Date: {this.props.orderDate}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  First Name: {this.props.firstName}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Last Name: {this.props.lastName}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Order ID: {this.props.oid}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Paid: {this.props.paid}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Picked Up: {this.props.pickedUp}\r\n                </Typography>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                  Total Price: ${this.props.totalPrice}\r\n                </Typography>\r\n                \r\n              </CardContent>\r\n            </CardActionArea>\r\n          </Card>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default OrderHistoryItem;\r\n","import React, { Component } from 'react';\r\nimport './OrderHistory.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport OrderHistoryItem from '../OrderHistoryItem/OrderHistoryItem.js';\r\n\r\nclass OrderHistory extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      orders: []\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n    const apiURL = \"/api/orders/getUserOrders\";\r\n\r\n    axios.get(apiURL, {\r\n      params:{\r\n        user: this.props.user\r\n      }\r\n    })\r\n    .then(res => {\r\n      if(res.data.success === true){\r\n        this.setState({\r\n          orders: res.data.orders\r\n        });\r\n      }\r\n\r\n      else{\r\n        alert(res.data.message);\r\n      }\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const orders = this.state.orders.map(order => {\r\n      console.log(order.date);\r\n\r\n\r\n      let convertDate = new Date(order.date);\r\n      let hours = convertDate.getHours();\r\n      let timeOfDay = \"AM\";\r\n\r\n      console.log(\"hours \", hours);\r\n\r\n      if(hours > 12){\r\n        hours = hours -12;\r\n        timeOfDay = \"PM\";\r\n      }\r\n\r\n      hours = String(hours);\r\n\r\n      let minutes = String(convertDate.getMinutes());\r\n\r\n      if(minutes.length === 1){\r\n        minutes = '0' + minutes;\r\n      }\r\n\r\n      let seconds = String(convertDate.getSeconds());\r\n\r\n      let actualDate = convertDate.toDateString() + ' ' + hours + ':' + minutes + ' ' + timeOfDay;\r\n            \r\n      return <OrderHistoryItem orderDate = {actualDate} email = {order.email} firstName = {order.firstName} \r\n            lastName = {order.lastName} oid = {order.oid} paid = {String(order.paid)} pickedUp = {String(order.pickedUp)}\r\n            totalPrice = {order.totalPrice} \r\n            />\r\n    });\r\n\r\n\r\n    if(this.state.orders.length === 0){\r\n      return(\r\n        <div>\r\n          <h1> No orders were made! </h1>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    else{\r\n      return (\r\n        <div>\r\n          <h1> Orders: </h1>\r\n          <Grid container direction = \"column\">\r\n            {orders}\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n    total: state.cart.total,\r\n    cart: state.cart.items\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart from store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    updateItems: (response) => dispatch({\r\n      type: actions.GET_CART,\r\n      cart: response\r\n    })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderHistory);\r\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\nimport About from './components/About/About';\nimport Signup from './components/Signup/Signup';\nimport Home from './components/Home/Home';\nimport Login from './components/Login/Login';\nimport ButtonAppBar from './components/ButtonAppBar/ButtonAppBar';\nimport Shop from './components/Shop/Shop';\nimport Cart from './components/Cart/Cart';\nimport VendorView from './components/VendorView/VendorView';\nimport VendorSignup from './components/VendorSignup/VendorSignup';\nimport EditClubInfo from './components/EditClubInfo/EditClubInfo';\nimport AddProduct from './components/AddProduct/AddProduct';\nimport OrderHistory from './components/OrderHistory/OrderHistory';\n\nimport { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <ButtonAppBar />\n          <Route exact path = \"/\" component = {Home} />\n          <Route exact path = \"/about\" component = {About} />\n          <Route exact path = \"/shop\" component = {Shop}/>\n          <Route exact path = \"/signup\" component = {Signup} />\n          <Route exact path = \"/login\" component = {Login} /> \n          <Route exact path = \"/cart\" component = {Cart}/>\n          <Route exact path = \"/vendorProducts\" component = {VendorView}/>\n          <Route exact path = \"/abcdefg/vendorSignup\" component = {VendorSignup}/>\n          <Route exact path = \"/editClubInfo\" component = {EditClubInfo}/>\n          <Route exact path = \"/addProduct\" component = {AddProduct}/>\n          <Route exact path = \"/orderHistory\" component = {OrderHistory}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import actions from './actions';\r\n\r\n//initial state of login reducer\r\n\r\n//check whether login is true or false\r\n//if logged in, set navbar text to Logout, if logged out set navbar text to Login\r\n//store user email to use with other components\r\nconst initialState = {\r\n    login: false,\r\n    text: \"Login\",\r\n    user: '',\r\n    isAdmin: false,\r\n    vendorID: '',\r\n    adminsOf: [],\r\n    currentVendor: ''\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        //if user is logged in, change state to true\r\n        case actions.LOGGED_IN:\r\n            return{\r\n                //updating state immutably\r\n                //disperse contents of original state object\r\n                ...state,\r\n                //assign login value to true based on payload action name\r\n                //assign email to user's email after logging in\r\n                //return new state object with updated \r\n                login: true,\r\n                text: \"Logout\",\r\n                user: action.user\r\n            }\r\n        //when an admin is logged in\r\n        case actions.ADMIN_LOGGED_IN:\r\n            return{\r\n                ...state,\r\n                login: true,\r\n                text: \"Logout\",\r\n                user:action.user,\r\n                isAdmin: true,\r\n                vendorID: action.vid,\r\n                adminsOf: action.admins,\r\n                currentVendor: action.currentVendor\r\n            }\r\n        //if user logs out, update state\r\n        case actions.LOGGED_OUT:\r\n            return{\r\n                ...state,\r\n                login: false,\r\n                text: \"Login\",\r\n                email: '',\r\n                isAdmin: false,\r\n                vendorID: '',\r\n                adminsOf: state.adminsOf.length = 0,\r\n                currentVendor: ''\r\n            }\r\n        //update vendor id of user if admin\r\n        case actions.UPDATE_VENDOR_ID:\r\n            return{\r\n              ...state,\r\n              vendorID: action.vid,\r\n              currentVendor: action.vendor\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import actions from './actions';\r\n\r\n//initial state of shop view\r\nconst initialState = {\r\n  products: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case actions.GET_PRODUCTS:\r\n      //copy initial state\r\n      //update products array to be array retrieved from GET request to server\r\n      //action.items is payload to update state\r\n      return{\r\n        ...state,\r\n        products: action.items\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import actions from './actions';\r\n//reducer for managing state of cart for a logged in user\r\n\r\n//initial state of cart reducer\r\nconst initialState = {\r\n  items: [],\r\n  total: 0\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  //action to get cart items stored on server\r\n  switch(action.type){\r\n    case actions.GET_CART:\r\n      return{\r\n        ...state,\r\n        //get cart items from server, assign to state\r\n        items: action.cart\r\n      }\r\n\r\n    //add item to cart, update state\r\n    case actions.ADD_CART:\r\n      return{\r\n        ...state,\r\n        items: state.items.concat(action.item)\r\n      }\r\n\r\n    //remove item from cart, update state\r\n    case actions.REMOVE_CART:\r\n      return{\r\n\r\n      }\r\n\r\n    //empty cart, either on logout or checkout\r\n    case actions.EMPTY_CART:\r\n      return{\r\n        ...state,\r\n        items: state.items.length = 0\r\n      }\r\n\r\n    case actions.UPDATE_TOTAL:\r\n      return{\r\n        ...state,\r\n        total: action.total\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import actions from './actions';\r\n\r\nconst initialState = {\r\n  vendor: '',\r\n  vendors: []\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case actions.GET_VENDOR_PRODUCTS:\r\n      return{\r\n        ...state,\r\n        vendor: action.vendor\r\n      }\r\n\r\n    case actions.GET_VENDORS:\r\n      return{\r\n        ...state,\r\n        vendors: action.vendors\r\n      }\r\n\r\n  \r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default reducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, combineReducers} from 'redux';\nimport {Provider} from 'react-redux';\nimport loginReducer from './store/loginReducer';\nimport getProductsReducer from './store/getProductsReducer';\nimport cartReducer from './store/cartReducer';\nimport vendorReducer from './store/vendorReducer';\n\n//create store for redux state management\n//store stores state of application\nconst rootReducer = combineReducers({\n  auth: loginReducer,\n  getAllItems: getProductsReducer,\n  cart: cartReducer,\n  vendor: vendorReducer\n});\n\nconst store = createStore(rootReducer);\n\n//Provider tag allows all components to have access to store\nReactDOM.render(<Provider store = {store}> <App /> </Provider>, document.getElementById('root'));\n\n// hot module reloading used to reload app in browser w/out performing a page\n// refresh. Useful when wanting to test w/out losing console.log() s\nif (module.hot) {\n  module.hot.accept()\n}\n\nserviceWorker.unregister();\n"],"sourceRoot":""}