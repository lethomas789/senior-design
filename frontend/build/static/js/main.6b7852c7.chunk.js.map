{"version":3,"sources":["images/dog1.jpg","images/dog2.jpg","images/dog3.jpg","components/About/About.js","components/Signup/Signup.js","components/Home/Home.js","store/actions.js","components/Login/Login.js","components/ButtonAppBar/ButtonAppBar.js","components/ShopItem/ShopItem.js","components/ShopView/ShopView.js","components/Shop/Shop.js","components/CartItem/CartItem.js","components/Checkout/Checkout.js","components/Cart/Cart.js","App.js","serviceWorker.js","store/loginReducer.js","store/getProductsReducer.js","store/cartReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","Grid_default","container","direction","justify","alignContent","alignItems","id","Component","Signup","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","firstName","lastName","email","password","confirmPassword","open","progressValue","progressVariant","responseMessage","sendSignup","bind","assertThisInitialized","handleClose","setState","_this2","axios","post","params","then","res","data","success","message","catch","err","alert","_this3","classes","Paper_default","className","TextField_default","label","required","onChange","event","target","value","type","Button_default","variant","color","onClick","CircularProgress_default","defineProperty","size","progress","Dialog_default","onClose","aria-describedby","DialogContent_default","DialogContentText_default","index_es","withStyles","theme","margin","spacing","unit","react_alice_carousel_default","autoPlay","autoPlayInterval","buttonsDisabled","src","image1","image2","image3","actions","LOGGED_IN","LOGGED_OUT","GET_PRODUCTS","GET_CART","ADD_CART","REMOVE_CART","EMPTY_CART","UPDATE_TOTAL","Login","getCart","sendLogin","get","user","updateItems","updateLogin","_this4","propsTypes","PropTypes","object","isRequired","connect","dispatch","currentEmail","response","cart","ButtonAppBar","alertMessage","logoutUser","viewCartCheck","loginText","updateLogout","emptyCart","loginValue","login","AppBar_default","position","Toolbar_default","IconButton_default","aria-label","Menu_default","Typography_default","component","Link","to","Badge_default","badgeContent","cartLength","badge","ShoppingCart_default","auth","text","items","length","top","right","border","concat","palette","grey","ShopItem","name","productName","price","productPrice","pid","amtPurchased","addItem","addQuantity","removeQuantity","currentQuantity","item","xs","Card_default","CardActionArea_default","CardMedia_default","CardContent_default","gutterBottom","stock","productInfo","CardActions_default","Fab_default","Remove_default","Add_default","ShopView","console","log","updateProducts","products","map","result","components_ShopItem_ShopItem","key","justify-xs-space-evenly","getAllItems","Shop","components_ShopView_ShopView","CartItem","removeItem","currentCart","priceTotal","updateTotal","i","Number","totalPrice","sum","total","Checkout","extendedIcon","marginRight","Cart","toFixed","components_CartItem_CartItem","components_Checkout_Checkout","App","BrowserRouter","components_ButtonAppBar_ButtonAppBar","Route","exact","path","About","Boolean","window","location","hostname","match","initialState","reducer","arguments","undefined","action","objectSpread","rootReducer","combineReducers","loginReducer","getProductsReducer","cartReducer","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b7852c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dog1.aa9094e4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog2.303269b8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dog3.751aa161.jpg\";","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './About.css';\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Grid container direction=\"column\" justify=\"center\"alignContent = \"center\" alignItems=\"center\">\r\n          <h1 id = \"aboutHeader\"> About Us </h1>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport './Signup.css';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { DialogActions } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles'; \nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\n\nconst styles = theme => ({\n  progress: {\n    margin: theme.spacing.unit * 2\n  }\n});\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props)\n    //store user input\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      open: false,\n      progressValue: 0,\n      progressVariant: 'determinate',\n      responseMessage: ''\n    }\n    this.sendSignup = this.sendSignup.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  //handle dialog closing\n  handleClose(){\n    this.setState({\n        open: false\n    })\n  }\n\n  //send signup request\n  sendSignup(){\n    //load progress circle to wait for signup check\n    this.setState({\n      progressValue: 50,\n      progressVariant: \"indeterminate\"\n    });\n    const apiURL = \"http://localhost:4000/api/signup\";\n    //send signup request\n    axios.post(apiURL, {\n      params: {\n        firstName: this.state.firstName,\n        lastName: this.state.lastName,\n        email: this.state.email,\n        password: this.state.password\n      }\n    })\n    .then(res => {\n      //if signup is successful, display success message\n      if(res.data.success === true){\n        this.setState({\n          open: true,\n          progressValue: 0,\n          progressVariant: \"determinate\",\n          responseMessage: \"Signup successful! Please login!\"\n        })\n      }\n\n      //display error message\n      else{\n        this.setState({\n          open: true,\n          progressValue: 0,\n          progressVariant: \"determinate\",\n          responseMessage: res.data.message\n        })\n      }\n    })\n    .catch(err => {\n      alert(err);\n    })\n  }\n  \n  render() {\n    const { classes } = this.props;\n    return (\n      <div id = \"signupContainer\">\n        <div id = \"signupForms\">\n          <Paper id = \"signupPaperContainer\">\n            <h1> Sign Up </h1>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                label=\"First Name\"\n                required=\"true\"\n                onChange={(event) => this.setState({ firstName: event.target.value })}\n              />\n            </div>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                label=\"Last Name\"\n                required=\"true\"\n                onChange={(event) => this.setState({ lastName: event.target.value })}\n              />\n            </div>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                label=\"Email\"\n                required=\"true\"\n                onChange={(event) => this.setState({ email: event.target.value })}\n              />\n            </div>\n            <div className = \"textForm\" id=\"row\">\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                required=\"true\"\n                onChange={(event) => this.setState({ password: event.target.value })}\n              />\n            </div>\n            <Button type = \"submit\" variant = \"contained\" color = \"primary\" onClick = {this.sendSignup}> Sign Up  </Button>\n          </Paper>\n\n          <div className = \"progressContainer\">\n            <div className = \"circle\">\n              <CircularProgress className = \"loadingCircle\" size = {80} variant = {this.state.progressVariant} value = {this.state.progressValue} className = {classes.progress}/>\n            </div>\n          </div>\n          \n          <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\n            <DialogContent>\n              <DialogContentText id = \"alert-dialog-description\">\n                {this.state.responseMessage}\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick = {this.handleClose} color = \"primary\">\n                Ok\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </div>\n      </div>\n    )\n  }\n}\n\nSignup.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Signup);\n","import React, { Component } from 'react';\nimport './Home.css';\nimport Grid from '@material-ui/core/Grid';\nimport { Slide } from 'react-slideshow-image';\nimport AliceCarousel from 'react-alice-carousel';\nimport \"react-alice-carousel/lib/alice-carousel.css\";\nimport image1 from '../../images/dog1.jpg';\nimport image2 from '../../images/dog2.jpg';\nimport image3 from '../../images/dog3.jpg';\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div id = \"homeContainer\">\n        <Grid container direction=\"column\" justify=\"center\"alignContent = \"center\" alignItems=\"center\">\n          <h1> Welcome to ECS193 ECommerce! </h1>\n          <p>This is a ecommerce website for UC Davis's clubs. \n          Here we make merchandise available from all different clubs of Davis.</p>\n\n          <div id = \"carouselContainer\">\n            <AliceCarousel autoPlay = {true} autoPlayInterval = {2000} buttonsDisabled = {true}>\n                <img className = \"slideImage\" src = {image1} />\n                <img className = \"slideImage\" src = {image2} />\n                <img className = \"slideImage\" src = {image3} />\n            </AliceCarousel>\n          </div>\n  \n        </Grid>\n      </div>\n    );\n  }\n}\n\n \n","//actions to trigger reducer to handle state changes\nconst actions =  {\n    //auth actions\n    LOGGED_IN: \"LOGGED_IN\",\n    LOGGED_OUT: \"LOGGED_OUT\",\n    GET_PRODUCTS: \"GET_PRODUCTS\",\n    //cart actions\n    GET_CART: \"GET_CART\",\n    ADD_CART:\"ADD_CART\",\n    REMOVE_CART:\"REMOVE_CART\",\n    EMPTY_CART: \"EMPTY_CART\",\n    UPDATE_TOTAL: \"UPDATE_TOTAL\"\n}\n\nexport default actions;\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport './Login.css';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport { DialogActions } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles'; \r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport PropTypes from 'prop-types';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\n\r\nconst styles = theme => ({\r\n    progress: {\r\n      margin: theme.spacing.unit * 2\r\n    }\r\n});\r\n\r\n//Login component, allows user to login with email and password credentials\r\nclass Login extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        //store user input\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            open: false,\r\n            progressValue: 0,\r\n            progressVariant: 'determinate',\r\n            responseMessage: ''        \r\n        }\r\n        this.getCart = this.getCart.bind(this);\r\n        this.sendLogin = this.sendLogin.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n    }\r\n\r\n    //get logged in user's cart info\r\n    getCart(){\r\n      const apiURL = \"http://localhost:4000/api/getUserCart\";\r\n      axios.get(apiURL, {\r\n        params:{\r\n          user: this.state.email\r\n        }\r\n      }).then(res => {\r\n          //after getting cart info, update redux store container\r\n          this.props.updateItems(res.data.data);\r\n        })\r\n        .catch(err => {\r\n          alert(err);\r\n        })\r\n    }\r\n\r\n    //send login request, display if login was successful\r\n    sendLogin(){\r\n        //load progress circle to wait for login check\r\n        this.setState({\r\n            progressValue: 50,\r\n            progressVariant: \"indeterminate\"\r\n        });\r\n        const apiURL = \"http://localhost:4000/api/login\";\r\n        axios.post(apiURL, {\r\n            params:{\r\n              email: this.state.email,\r\n              password: this.state.password\r\n            }\r\n        })\r\n        //successful login, display message\r\n        .then(res => {\r\n            if(res.data.success === true){\r\n                //dispatch update login action to update login state\r\n                let email = this.state.email;\r\n                this.props.updateLogin(email);\r\n\r\n                //after updating login, get cart info\r\n                this.getCart();\r\n\r\n                //display dialog for login successful\r\n                this.setState({\r\n                    open: true,\r\n                    progressValue: 0,\r\n                    progressVariant: \"determinate\",\r\n                    responseMessage: \"Login Succesful!\"\r\n                });\r\n            }\r\n            //display error message with logging in\r\n            else{\r\n                this.setState({\r\n                    open: true,\r\n                    progressValue: 0,\r\n                    progressVariant: \"determinate\",\r\n                    responseMessage: res.data.message\r\n                });\r\n            }\r\n        })\r\n        .catch(err => {\r\n            alert(err);\r\n        })\r\n    }\r\n\r\n    //handle dialog closing\r\n    handleClose(){\r\n        this.setState({\r\n            open: false\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const { classes } = this.props;\r\n        return(\r\n            <div id = \"loginContainer\">\r\n                <div id = \"loginForms\">\r\n                    <Paper className = \"paperContainer\">\r\n                        <h1> Login </h1>\r\n                        <div className = \"textForm\" id=\"row\">\r\n                            <TextField\r\n                            id = \"outline-simple-start-adornment\"\r\n                            label=\"Email\"\r\n                            required=\"true\"\r\n                            onChange={(event) => this.setState({ email: event.target.value })}\r\n                            />\r\n                        </div>\r\n                        <div className = \"textForm\" id=\"row\">\r\n                            <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            required=\"true\"\r\n                            onChange={(event) => this.setState({ password: event.target.value })}\r\n                            />\r\n                        </div>\r\n                        <Button type = \"submit\" variant = \"contained\" color = \"primary\" onClick = {this.sendLogin}> Login  </Button>\r\n                    </Paper>\r\n                    \r\n                    <div className = \"progressContainer\">\r\n                        <div className = \"circle\">\r\n                            <CircularProgress className = \"loadingCircle\" size = {80} variant = {this.state.progressVariant} value = {this.state.progressValue} className = {classes.progress}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\r\n                        <DialogContent>\r\n                            <DialogContentText id = \"alert-dialog-description\">\r\n                                {this.state.responseMessage}\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick = {this.handleClose} color = \"primary\">\r\n                                Ok\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//redux, dispatch action to reducer to update state\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        //update logged in values\r\n        updateLogin: (currentEmail) => dispatch({\r\n            type: actions.LOGGED_IN,\r\n            user: currentEmail\r\n        }),\r\n\r\n        //get user's cart from state after logging in\r\n        updateItems: (response) => dispatch({\r\n          type: actions.GET_CART,\r\n          cart: response\r\n        })\r\n    }\r\n}\r\n\r\nLogin.propsTypes = {\r\n    classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default connect(null,mapDispatchToProps)(withStyles(styles)(Login));\r\n","import React, { Component } from 'react';\nimport './ButtonAppBar.css';\nimport {connect} from 'react-redux';\nimport actions from '../../store/actions';\nimport {Route, Link, Redirect} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CartIcon from '@material-ui/icons/ShoppingCart';\nimport Badge from '@material-ui/core/Badge';\nimport axios from 'axios';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { DialogActions } from '@material-ui/core';\n\n//variables to store routes to redirect to with Link component\nconst homeRoute = \"/\";\nconst aboutRoute = \"/about\";\nconst signupRoute = \"/signup\";\nconst loginRoute = \"/login\";\nconst shopRoute = \"/shop\";\nconst cartRoute = \"/cart\";\n\n//style for cart to display number of items\nconst styles = theme => ({\n  badge: {\n    top: '50%',\n    right: -3,\n    // The border color match the background color.\n    border: `2px solid ${\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[900]\n    }`,\n  },\n});\n\n//navbar component\nclass ButtonAppBar extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        open: false,\n        alertMessage: ''        \n      }\n      this.logoutUser = this.logoutUser.bind(this);\n      this.viewCartCheck = this.viewCartCheck.bind(this);\n      this.handleClose = this.handleClose.bind(this);\n    }\n\n    //handle dialog closing\n    handleClose(){\n      this.setState({\n          open: false\n      })\n    }\n\n    //logout user when clicking \"Logout\" on navbar\n    //empty shopping cart\n    logoutUser(){\n      if (this.props.loginText === \"Logout\"){\n        this.props.updateLogout();\n        this.props.emptyCart();\n        //display dialog\n        this.setState({\n          open: true,\n          alertMessage: \"Logout successful!\"\n        });\n      }\n    }\n\n    //check if user is logged in to view cart\n    viewCartCheck(){\n      //prevent user from using cart until logged in\n      if(this.props.loginValue === false){\n        this.setState({\n          open: true,\n          alertMessage: \"Please login to view cart\"\n        })\n      }\n      \n      //if logged in, get cart and calculate cart's total\n      else{\n        const apiURL = \"http://localhost:4000/api/getUserCart\";\n        //if user is logged in, get cart info\n        if (this.props.login === true){\n          axios.get(apiURL,{\n            params:{\n              user: this.props.user\n            }\n          })\n          .then(res => {\n            //after getting cart from server, update user's items in redux state\n            alert(\"updating store with new items\");\n            this.props.updateItems(res.data.data);\n          })\n          .catch(err => {\n            alert(err);\n          })\n        }\n      }\n    }\n    \n    render(){\n      const { classes } = this.props;\n      //conditonal rendering\n      //render navbar based on whether user is logged in or not\n      //if user is logged in, hide parts of navbar such as signup and display \"Logout\"\n      if(this.props.loginValue === true){\n        return(\n          <div className= \"root\">\n            <AppBar position=\"static\">\n              <Toolbar>\n                <IconButton className = \"menuButton\" color=\"inherit\" aria-label=\"Menu\">\n                  <MenuIcon />\n                </IconButton>\n                <Typography component = {Link} to = {homeRoute} variant=\"h6\" color=\"inherit\" className = \"grow\">\n                  ECS193 ECommerce\n                </Typography>\n                  <div id = \"navLink\">\n                    <Button component = {Link} to = {aboutRoute} color = \"inherit\"> About </Button> \n                    <Button component = {Link} to = {loginRoute} color=\"inherit\" onClick = {this.logoutUser}> {this.props.loginText} </Button> \n                    <Button component = {Link} to = {shopRoute} color = \"inherit\"> Shop </Button>\n                    <Button component = {Link} to = {cartRoute} color = \"inherit\" onClick = {this.viewCartCheck}> \n                      <Badge badgeContent = {this.props.cartLength} color = \"primary\" classes={{ badge: classes.badge }}>\n                        <CartIcon/> \n                      </Badge>\n                    </Button>\n                  </div>\n              </Toolbar>\n            </AppBar>\n        </div>\n        );\n      }\n\n      //user is not logged in\n      else{\n        return(\n          <div className= \"root\">\n            <AppBar position=\"static\">\n              <Toolbar>\n                <IconButton className = \"menuButton\" color=\"inherit\" aria-label=\"Menu\">\n                  <MenuIcon />\n                </IconButton>\n                <Typography component = {Link} to = {homeRoute} variant=\"h6\" color=\"inherit\" className = \"grow\">\n                  ECS193 ECommerce\n                </Typography>\n                  <div id = \"navLink\">\n                    <Button component = {Link} to = {aboutRoute} color = \"inherit\"> About </Button> \n                    <Button component = {Link} to = {signupRoute} color = \"inherit\"> Sign Up </Button> \n                    <Button component = {Link} to = {loginRoute} color=\"inherit\" onClick = {this.logoutUser}> {this.props.loginText} </Button> \n                    <Button component = {Link} to = {shopRoute} color = \"inherit\"> Shop </Button>\n                    <Button color = \"inherit\" onClick = {this.viewCartCheck}> <CartIcon/> </Button>\n                  </div>\n                  <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\n                        <DialogContent>\n                            <DialogContentText id = \"alert-dialog-description\">\n                              {this.state.alertMessage}\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick = {this.handleClose} color = \"primary\">\n                                Ok\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n              </Toolbar>\n            </AppBar>\n        </div>\n        );\n      }\n    }\n  }\n\n  //redux\n\n  //dispatch action to reducer\n  const mapDispatchToProps = dispatch => {\n    return{\n        //update store that user logged out\n        updateLogout: () => dispatch({\n          type: actions.LOGGED_OUT\n        }),\n\n        //update store cart is empty\n        emptyCart: () => dispatch({\n          type: actions.EMPTY_CART\n        })\n    }\n  }\n\n  //obtain state from store as props for component\n  //get login value, login text, and cart length\n  const mapStateToProps = state => {\n    return{\n        loginValue: state.auth.login,\n        loginText: state.auth.text,\n        user: state.auth.user,\n        cartLength: state.cart.items.length,\n        items: state.cart.items\n    }\n  }\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withStyles(styles)(ButtonAppBar));\n","import React, { Component } from 'react';\r\nimport './ShopItem.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport actions from '../../store/actions';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport AddCircle from '@material-ui/icons/Add';\r\nimport RemoveCircle from '@material-ui/icons/Remove';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport { DialogActions } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n//component to display product info\r\nclass ShopItem extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    //initial state of products\r\n    this.state = {\r\n      name: this.props.productName,\r\n      price: this.props.productPrice,\r\n      pid: this.props.pid,\r\n      amtPurchased: 1,\r\n      open: false,\r\n      alertMessage: ''\r\n    }\r\n\r\n    //bind functions to component\r\n    this.addItem = this.addItem.bind(this);\r\n    this.addQuantity = this.addQuantity.bind(this);\r\n    this.removeQuantity = this.removeQuantity.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n  }\r\n\r\n  //handle dialog closing\r\n  handleClose(){\r\n    this.setState({\r\n        open: false\r\n    })\r\n  }\r\n\r\n  //function to update cart of user\r\n  //add item to user's cart\r\n  addItem(){\r\n    //check if user is logged in\r\n    //only allow user to add to cart if logged in\r\n    if(this.props.login === false){\r\n      this.setState({\r\n        open: true,\r\n        alertMessage: \"Please login to add to cart!\"\r\n      })\r\n    }\r\n\r\n    else{\r\n      //update user's cart on server\r\n      var apiURL = \"http://localhost:4000/api/getUserCart/addItems\";\r\n      axios.post(apiURL, {\r\n        params:{\r\n          user: this.props.user,\r\n          pid: this.state.pid,\r\n          amtPurchased: this.state.amtPurchased\r\n        }\r\n      })\r\n      .then(res => {\r\n        if(res.data.success === true){\r\n          //after adding to item, get updated cart\r\n          const getCartURL = \"http://localhost:4000/api/getUserCart\";\r\n          axios.get(getCartURL, {\r\n            params:{\r\n              user: this.props.user\r\n            }\r\n          })\r\n          .then(res => {\r\n            //after getting cart info, update redux store container\r\n            this.props.updateItems(res.data.data);\r\n            this.setState({\r\n              open: true,\r\n              alertMessage: \"Item added to cart!\"\r\n            });\r\n          })\r\n          .catch(err => {\r\n            alert(err);\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        alert(err);\r\n      })\r\n    }\r\n  } //end of add item\r\n\r\n  //add quantity purchased\r\n  addQuantity(){\r\n    var currentQuantity = this.state.amtPurchased;\r\n    currentQuantity += 1;\r\n    this.setState({\r\n      amtPurchased: currentQuantity\r\n    });\r\n  }\r\n\r\n  //remove quantity purchased\r\n  removeQuantity(){\r\n    var currentQuantity = this.state.amtPurchased;\r\n    //can't have negative amount of items selected\r\n    if(currentQuantity <= 1){\r\n      alert(\"Must have at least one item\");\r\n    }\r\n\r\n    else{\r\n      currentQuantity -= 1;\r\n      this.setState({\r\n        amtPurchased: currentQuantity\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Grid item xs> \r\n          <Card className= \"card\">\r\n            <CardActionArea>\r\n              <CardMedia className = \"media\"/>\r\n              <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  {this.props.productName}\r\n                </Typography>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  Price: ${this.props.productPrice}\r\n                </Typography>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  Stock: {this.props.stock}\r\n                </Typography>\r\n                <Typography component=\"p\">\r\n                  Info: {this.props.productInfo}\r\n                </Typography>\r\n              </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n              <Typography variant = \"h6\">\r\n                <Fab size = \"small\" aria-label = \"Remove\" onClick = {this.removeQuantity}>\r\n                  <RemoveCircle/>\r\n                </Fab>\r\n                Quantity: {this.state.amtPurchased}\r\n                <Fab size = \"small\" aria-label = \"Add\" onClick = {this.addQuantity}>\r\n                  <AddCircle/>\r\n                </Fab>\r\n              </Typography>\r\n\r\n              <Button size=\"small\" color=\"primary\" onClick = {this.addItem}>\r\n                Add To Cart\r\n              </Button>\r\n\r\n              <Button size=\"small\" color=\"primary\">\r\n                Learn More\r\n              </Button>\r\n\r\n              <Dialog open = {this.state.open} onClose = {this.handleClose} aria-describedby = \"alert-dialog-description\">\r\n                <DialogContent>\r\n                  <DialogContentText id = \"alert-dialog-description\">\r\n                    {this.state.alertMessage}\r\n                  </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                  <Button onClick = {this.handleClose} color = \"primary\">\r\n                    Ok\r\n                  </Button>\r\n                </DialogActions>\r\n              </Dialog>\r\n            </CardActions>\r\n          </Card>\r\n        </Grid>\r\n    )\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get login value and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n      user: state.auth.user,\r\n      login: state.auth.login\r\n  }\r\n}\r\n\r\n//dispatch action to reducer\r\n//update redux state of current cart\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n      //get user's cart from state after logging in\r\n      updateItems: (response) => dispatch({\r\n        type: actions.GET_CART,\r\n        cart: response\r\n      })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopItem);\r\n","import React, { Component } from 'react';\r\nimport './ShopView.css';\r\nimport ShopItem from '../ShopItem/ShopItem';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\n\r\nclass ShopView extends Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  //get products from server after mounting to screen\r\n  componentDidMount(){\r\n    const apiURL = \"http://localhost:4000/api/getAllProducts\";\r\n\r\n    //get all products from server\r\n    //update state of view to obtain items\r\n    axios.get(apiURL)\r\n      .then(res => {\r\n        //update product state in redux store\r\n        console.log(res.data);\r\n        this.props.updateProducts(res.data.data);\r\n      })\r\n      .catch(err => {\r\n        alert(\"Server error retrieving items\");\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const items = this.props.products.map(result => {\r\n      return <ShopItem key = {result.pid} pid = {result.pid} productName = {result.productName} productPrice = {result.productPrice} stock = {result.stock} productInfo = {result.productInfo} />\r\n    });\r\n\r\n    return (\r\n      <div className = \"grow\">\r\n        <Grid container direction=\"column\" justify=\"center\"alignContent = \"center\" alignItems=\"center\">\r\n          <h1> Shop </h1>\r\n        </Grid>\r\n\r\n        <Grid container spacing={24} direction=\"row\" justify=\"center\" alignItems=\"center\" justify-xs-space-evenly>\r\n          {items}\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//redux\r\n\r\n//dispatch action to reducer\r\n//update items from server to become state of store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n      updateProducts: (products) => dispatch({\r\n          type: actions.GET_PRODUCTS,\r\n          items: products\r\n      })\r\n  }\r\n}\r\n\r\n//get items from products state of store\r\n//obtain state from store as props for component\r\nconst mapStateToProps = state => {\r\n  return{\r\n      products: state.getAllItems.products\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopView);\r\n","import React, { Component } from 'react';\r\nimport './Shop.css';\r\nimport ShopView from '../ShopView/ShopView';\r\n\r\nexport default class Shop extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <ShopView/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './CartItem.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\n\r\n//component to display cart objects\r\nclass CartItem extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    //store product id PID to reference for item removal\r\n    this.state = {\r\n      pid: this.props.pid\r\n    }\r\n    this.removeItem = this.removeItem.bind(this);\r\n  }\r\n\r\n  //remove item from user's cart\r\n  removeItem(){\r\n    const apiURL = \"http://localhost:4000/api/getUserCart/deleteItems\";\r\n    axios.post(apiURL, {\r\n      params:{\r\n        user: this.props.user,\r\n        pid: this.state.pid\r\n      }\r\n    })\r\n    .then(res => {\r\n      const getCart = \"http://localhost:4000/api/getUserCart\";\r\n      //after successful deletion, get updated user's cart\r\n      axios.get(getCart, {\r\n        params:{\r\n          user: this.props.user\r\n        }\r\n      })\r\n      .then(res => {\r\n        //after removing item from cart, update cart on server\r\n        this.props.updateItems(res.data.data);\r\n        //get total from items\r\n        var currentCart = res.data.data;\r\n        var priceTotal = 0;\r\n        \r\n        //if cart is empty, total price is $0\r\n        if(currentCart.length === 0){\r\n          console.log(\"cart is empty\");\r\n          this.props.updateTotal(priceTotal);\r\n        }\r\n\r\n        //if there are items, calculate total price\r\n        else{\r\n          console.log(\"cart is not empty\");\r\n          for(let i = 0; i < currentCart.length; i++){\r\n            priceTotal += Number(currentCart[i].totalPrice);\r\n          }\r\n          console.log(priceTotal);\r\n          this.props.updateTotal(priceTotal);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        alert(err);\r\n      })\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid item xs>\r\n        <Card className= \"card\">\r\n          <CardActionArea>\r\n            <CardMedia className = \"media\"/>\r\n            <CardContent>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                {this.props.productName}\r\n              </Typography>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                Amount: {this.props.amtPurchased}\r\n              </Typography>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                Price: ${this.props.productPrice}\r\n              </Typography>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                Total Price: ${this.props.totalPrice}\r\n              </Typography>\r\n            </CardContent>\r\n          </CardActionArea>\r\n          <CardActions>\r\n            <Button size=\"small\" color=\"primary\" onClick = {this.removeItem}>\r\n              Remove Item\r\n            </Button>\r\n            <Button size=\"small\" color=\"primary\">\r\n              Add Item\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart from store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    updateItems: (response) => dispatch({\r\n      type: actions.GET_CART,\r\n      cart: response\r\n    }),\r\n\r\n    //update store of cart total\r\n    updateTotal: (sum) => dispatch({\r\n      type: actions.UPDATE_TOTAL,\r\n      total: sum\r\n    })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CartItem);\r\n","import React, { Component } from 'react';\r\nimport './Checkout.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n//styles for checkout button\r\nconst styles = theme => ({\r\n  margin: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing.unit,\r\n  },\r\n});\r\n\r\n//calculate total price of user's cart and allow user to checkout\r\n//get user's cart info from state\r\nclass Checkout extends Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n        <Grid container direction=\"row\">\r\n          <h1> Total: ${this.props.total} </h1>\r\n          <Button variant = \"contained\" size = \"small\" color = \"primary\" className = {classes.margin}> Checkout </Button>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user,\r\n    total: state.cart.total\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart from store\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    updateItems: (response) => dispatch({\r\n      type: actions.GET_CART,\r\n      cart: response\r\n    })\r\n  }\r\n}\r\n\r\nCheckout.PropTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Checkout));\r\n","import React, { Component } from 'react';\r\nimport './Cart.css';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CartItem from '../CartItem/CartItem';\r\nimport Checkout from '../Checkout/Checkout';\r\n\r\n//component to display user's cart\r\nclass Cart extends Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  //get cart from server for user\r\n  componentDidMount(){\r\n    //get total from items\r\n    var currentCart = this.props.items;\r\n    var priceTotal = 0;\r\n\r\n    //if cart is empty, total price is $0\r\n    if(currentCart.length === 0){\r\n      this.props.updateTotal(priceTotal);\r\n    }\r\n\r\n    //if there are items, calculate total price\r\n    else{\r\n      //go through each item in cart and sum up price\r\n      for(let i = 0; i < currentCart.length; i++){\r\n        priceTotal += Number(currentCart[i].totalPrice);\r\n      }\r\n      priceTotal = priceTotal.toFixed(2);\r\n      this.props.updateTotal(priceTotal);\r\n    }\r\n  }\r\n\r\n  //render cart items to cart view\r\n  render() {\r\n    const cart = this.props.items.map(result => {\r\n      return <CartItem key = {result.productName} pid = {result.pid} productName = {result.productName} amtPurchased = {result.amtPurchased} productPrice = {result.productPrice}  totalPrice = {result.totalPrice} />\r\n    });\r\n\r\n    return(\r\n      <div>\r\n        <Grid container direction=\"row\">\r\n          <h1> Current Cart: </h1>\r\n        </Grid>\r\n\r\n        <Grid container direction=\"column\" justify-xs-space-evenly>\r\n          {cart}\r\n        </Grid>\r\n\r\n        <Checkout/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//redux\r\n//dispatch action to reducer, get user's cart\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    updateItems: (response) => dispatch({\r\n      type: actions.GET_CART,\r\n      cart: response\r\n    }),\r\n\r\n    //update store of cart total\r\n    updateTotal: (sum) => dispatch({\r\n      type: actions.UPDATE_TOTAL,\r\n      total: sum\r\n    })\r\n  }\r\n}\r\n\r\n//obtain state from store as props for component\r\n//get cart items, login value, and user email\r\nconst mapStateToProps = state => {\r\n  return{\r\n    items: state.cart.items,\r\n    login: state.auth.login,\r\n    user: state.auth.user\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Cart);\r\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\nimport About from './components/About/About';\nimport Signup from './components/Signup/Signup';\nimport Home from './components/Home/Home';\nimport Login from './components/Login/Login';\nimport ButtonAppBar from './components/ButtonAppBar/ButtonAppBar';\nimport Shop from './components/Shop/Shop';\nimport Cart from './components/Cart/Cart';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <ButtonAppBar />\n          <Route exact path = \"/\" component = {Home} />\n          <Route exact path = \"/about\" component = {About} />\n          <Route exact path = \"/shop\" component = {Shop}/>\n          <Route exact path = \"/signup\" component = {Signup} />\n          <Route exact path = \"/login\" component = {Login} /> \n          <Route exact path = \"/cart\" component = {Cart}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import actions from './actions';\r\n\r\n//initial state of login reducer\r\n\r\n//check whether login is true or false\r\n//if logged in, set navbar text to Logout, if logged out set navbar text to Login\r\n//store user email to use with other components\r\nconst initialState = {\r\n    login: false,\r\n    text: \"Login\",\r\n    user: ''\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        //if user is logged in, change state to true\r\n        case actions.LOGGED_IN:\r\n            return{\r\n                //updating state immutably\r\n                //disperse contents of original state object\r\n                ...state,\r\n                //assign login value to true based on payload action name\r\n                //assign email to user's email after logging in\r\n                //return new state object with updated \r\n                login: true,\r\n                text: \"Logout\",\r\n                user: action.user\r\n            }\r\n        //if user logs out, update state\r\n        case actions.LOGGED_OUT:\r\n            return{\r\n                ...state,\r\n                login: false,\r\n                text: \"Login\",\r\n                email: ''\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import actions from './actions';\r\n\r\n//initial state of shop view\r\nconst initialState = {\r\n  products: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case actions.GET_PRODUCTS:\r\n      //copy initial state\r\n      //update products array to be array retrieved from GET request to server\r\n      //action.items is payload to update state\r\n      return{\r\n        ...state,\r\n        products: action.items\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import actions from './actions';\r\n//reducer for managing state of cart for a logged in user\r\n\r\n//initial state of cart reducer\r\nconst initialState = {\r\n  items: [],\r\n  total: 0\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  //action to get cart items stored on server\r\n  switch(action.type){\r\n    case actions.GET_CART:\r\n      return{\r\n        ...state,\r\n        //get cart items from server, assign to state\r\n        items: action.cart\r\n      }\r\n\r\n    //add item to cart, update state\r\n    case actions.ADD_CART:\r\n      return{\r\n        ...state,\r\n        items: state.items.concat(action.item)\r\n      }\r\n\r\n    //remove item from cart, update state\r\n    case actions.REMOVE_CART:\r\n      return{\r\n\r\n      }\r\n\r\n    //empty cart, either on logout or checkout\r\n    case actions.EMPTY_CART:\r\n      return{\r\n        ...state,\r\n        items: state.items.length = 0\r\n      }\r\n\r\n    case actions.UPDATE_TOTAL:\r\n      return{\r\n        ...state,\r\n        total: action.total\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, combineReducers} from 'redux';\nimport {Provider} from 'react-redux';\nimport loginReducer from './store/loginReducer';\nimport getProductsReducer from './store/getProductsReducer';\nimport cartReducer from './store/cartReducer';\n\n//create store for redux state management\n//store stores state of application\nconst rootReducer = combineReducers({\n  auth: loginReducer,\n  getAllItems: getProductsReducer,\n  cart: cartReducer\n});\n\nconst store = createStore(rootReducer);\n\n//Provider tag allows all components to have access to store\nReactDOM.render(<Provider store = {store}> <App /> </Provider>, document.getElementById('root'));\n\n// hot module reloading used to reload app in browser w/out performing a page\n// refresh. Useful when wanting to test w/out losing console.log() s\nif (module.hot) {\n  module.hot.accept()\n}\n\nserviceWorker.unregister();\n"],"sourceRoot":""}